import "strings"

providers = {
	"aws": {
		"alias": "",
		"config": {
			"region": {
				"references": [
					"var.region",
				],
			},
		},
		"module_address":      "",
		"name":                "aws",
		"provider_config_key": "aws",
		"version_constraint":  ">= 3.20.0",
	},
	"kubernetes": {
		"alias": "",
		"config": {
			"cluster_ca_certificate": {
				"references": [
					"data.aws_eks_cluster.cluster.certificate_authority[0].data",
					"data.aws_eks_cluster.cluster.certificate_authority[0]",
					"data.aws_eks_cluster.cluster.certificate_authority",
					"data.aws_eks_cluster.cluster",
				],
			},
			"host": {
				"references": [
					"data.aws_eks_cluster.cluster.endpoint",
					"data.aws_eks_cluster.cluster",
				],
			},
			"token": {
				"references": [
					"data.aws_eks_cluster_auth.cluster.token",
					"data.aws_eks_cluster_auth.cluster",
				],
			},
		},
		"module_address":      "",
		"name":                "kubernetes",
		"provider_config_key": "kubernetes",
		"version_constraint":  ">= 2.0.1",
	},
	"local": {
		"alias":               "",
		"config":              {},
		"module_address":      "",
		"name":                "local",
		"provider_config_key": "local",
		"version_constraint":  "2.1.0",
	},
	"module.eks.module.fargate:aws": {
		"alias":               "",
		"config":              {},
		"module_address":      "module.eks.module.fargate",
		"name":                "aws",
		"provider_config_key": "module.eks.module.fargate:aws",
		"version_constraint":  ">= 3.56.0",
	},
	"module.eks.module.node_groups:aws": {
		"alias":               "",
		"config":              {},
		"module_address":      "module.eks.module.node_groups",
		"name":                "aws",
		"provider_config_key": "module.eks.module.node_groups:aws",
		"version_constraint":  ">= 3.56.0",
	},
	"module.eks.module.node_groups:cloudinit": {
		"alias":               "",
		"config":              {},
		"module_address":      "module.eks.module.node_groups",
		"name":                "cloudinit",
		"provider_config_key": "module.eks.module.node_groups:cloudinit",
		"version_constraint":  ">= 2.0.0",
	},
	"module.eks:aws": {
		"alias":               "",
		"config":              {},
		"module_address":      "module.eks",
		"name":                "aws",
		"provider_config_key": "module.eks:aws",
		"version_constraint":  ">= 3.56.0",
	},
	"module.eks:cloudinit": {
		"alias":               "",
		"config":              {},
		"module_address":      "module.eks",
		"name":                "cloudinit",
		"provider_config_key": "module.eks:cloudinit",
		"version_constraint":  ">= 2.0.0",
	},
	"module.eks:http": {
		"alias":               "",
		"config":              {},
		"module_address":      "module.eks",
		"name":                "http",
		"provider_config_key": "module.eks:http",
		"version_constraint":  ">= 2.4.1",
	},
	"module.eks:kubernetes": {
		"alias":               "",
		"config":              {},
		"module_address":      "module.eks",
		"name":                "kubernetes",
		"provider_config_key": "module.eks:kubernetes",
		"version_constraint":  ">= 1.11.1",
	},
	"module.eks:local": {
		"alias":               "",
		"config":              {},
		"module_address":      "module.eks",
		"name":                "local",
		"provider_config_key": "module.eks:local",
		"version_constraint":  ">= 1.4.0",
	},
	"module.vpc:aws": {
		"alias":               "",
		"config":              {},
		"module_address":      "module.vpc",
		"name":                "aws",
		"provider_config_key": "module.vpc:aws",
		"version_constraint":  ">= 3.15.0",
	},
	"null": {
		"alias":               "",
		"config":              {},
		"module_address":      "",
		"name":                "null",
		"provider_config_key": "null",
		"version_constraint":  "3.1.0",
	},
	"random": {
		"alias":               "",
		"config":              {},
		"module_address":      "",
		"name":                "random",
		"provider_config_key": "random",
		"version_constraint":  "3.1.0",
	},
}

resources = {
	"aws_security_group.all_worker_mgmt": {
		"address": "aws_security_group.all_worker_mgmt",
		"config": {
			"ingress": {
				"constant_value": [
					{
						"cidr_blocks": [
							"10.0.0.0/8",
							"172.16.0.0/12",
							"192.168.0.0/16",
						],
						"description":      null,
						"from_port":        22,
						"ipv6_cidr_blocks": null,
						"prefix_list_ids":  null,
						"protocol":         "tcp",
						"security_groups":  null,
						"self":             null,
						"to_port":          22,
					},
				],
			},
			"name_prefix": {
				"constant_value": "all_worker_management",
			},
			"vpc_id": {
				"references": [
					"module.vpc.vpc_id",
					"module.vpc",
				],
			},
		},
		"count":               {},
		"depends_on":          [],
		"for_each":            {},
		"mode":                "managed",
		"module_address":      "",
		"name":                "all_worker_mgmt",
		"provider_config_key": "aws",
		"provisioners":        [],
		"type":                "aws_security_group",
	},
	"aws_security_group.worker_group_mgmt_one": {
		"address": "aws_security_group.worker_group_mgmt_one",
		"config": {
			"ingress": {
				"constant_value": [
					{
						"cidr_blocks": [
							"10.0.0.0/8",
						],
						"description":      null,
						"from_port":        22,
						"ipv6_cidr_blocks": null,
						"prefix_list_ids":  null,
						"protocol":         "tcp",
						"security_groups":  null,
						"self":             null,
						"to_port":          22,
					},
				],
			},
			"name_prefix": {
				"constant_value": "worker_group_mgmt_one",
			},
			"vpc_id": {
				"references": [
					"module.vpc.vpc_id",
					"module.vpc",
				],
			},
		},
		"count":               {},
		"depends_on":          [],
		"for_each":            {},
		"mode":                "managed",
		"module_address":      "",
		"name":                "worker_group_mgmt_one",
		"provider_config_key": "aws",
		"provisioners":        [],
		"type":                "aws_security_group",
	},
	"aws_security_group.worker_group_mgmt_two": {
		"address": "aws_security_group.worker_group_mgmt_two",
		"config": {
			"ingress": {
				"constant_value": [
					{
						"cidr_blocks": [
							"192.168.0.0/16",
						],
						"description":      null,
						"from_port":        22,
						"ipv6_cidr_blocks": null,
						"prefix_list_ids":  null,
						"protocol":         "tcp",
						"security_groups":  null,
						"self":             null,
						"to_port":          22,
					},
				],
			},
			"name_prefix": {
				"constant_value": "worker_group_mgmt_two",
			},
			"vpc_id": {
				"references": [
					"module.vpc.vpc_id",
					"module.vpc",
				],
			},
		},
		"count":               {},
		"depends_on":          [],
		"for_each":            {},
		"mode":                "managed",
		"module_address":      "",
		"name":                "worker_group_mgmt_two",
		"provider_config_key": "aws",
		"provisioners":        [],
		"type":                "aws_security_group",
	},
	"data.aws_availability_zones.available": {
		"address":             "data.aws_availability_zones.available",
		"config":              {},
		"count":               {},
		"depends_on":          [],
		"for_each":            {},
		"mode":                "data",
		"module_address":      "",
		"name":                "available",
		"provider_config_key": "aws",
		"provisioners":        [],
		"type":                "aws_availability_zones",
	},
	"data.aws_eks_cluster.cluster": {
		"address": "data.aws_eks_cluster.cluster",
		"config": {
			"name": {
				"references": [
					"module.eks.cluster_id",
					"module.eks",
				],
			},
		},
		"count":               {},
		"depends_on":          [],
		"for_each":            {},
		"mode":                "data",
		"module_address":      "",
		"name":                "cluster",
		"provider_config_key": "aws",
		"provisioners":        [],
		"type":                "aws_eks_cluster",
	},
	"data.aws_eks_cluster_auth.cluster": {
		"address": "data.aws_eks_cluster_auth.cluster",
		"config": {
			"name": {
				"references": [
					"module.eks.cluster_id",
					"module.eks",
				],
			},
		},
		"count":               {},
		"depends_on":          [],
		"for_each":            {},
		"mode":                "data",
		"module_address":      "",
		"name":                "cluster",
		"provider_config_key": "aws",
		"provisioners":        [],
		"type":                "aws_eks_cluster_auth",
	},
	"module.eks.aws_autoscaling_group.workers": {
		"address": "module.eks.aws_autoscaling_group.workers",
		"config": {
			"capacity_rebalance": {
				"references": [
					"var.worker_groups",
					"count.index",
					"local.workers_group_defaults[\"capacity_rebalance\"]",
					"local.workers_group_defaults",
				],
			},
			"default_cooldown": {
				"references": [
					"var.worker_groups",
					"count.index",
					"local.workers_group_defaults[\"default_cooldown\"]",
					"local.workers_group_defaults",
				],
			},
			"desired_capacity": {
				"references": [
					"var.worker_groups",
					"count.index",
					"local.workers_group_defaults[\"asg_desired_capacity\"]",
					"local.workers_group_defaults",
				],
			},
			"enabled_metrics": {
				"references": [
					"var.worker_groups",
					"count.index",
					"local.workers_group_defaults[\"enabled_metrics\"]",
					"local.workers_group_defaults",
				],
			},
			"force_delete": {
				"references": [
					"var.worker_groups",
					"count.index",
					"local.workers_group_defaults[\"asg_force_delete\"]",
					"local.workers_group_defaults",
				],
			},
			"health_check_grace_period": {
				"references": [
					"var.worker_groups",
					"count.index",
					"local.workers_group_defaults[\"health_check_grace_period\"]",
					"local.workers_group_defaults",
				],
			},
			"health_check_type": {
				"references": [
					"var.worker_groups",
					"count.index",
					"local.workers_group_defaults[\"health_check_type\"]",
					"local.workers_group_defaults",
				],
			},
			"launch_configuration": {
				"references": [
					"aws_launch_configuration.workers",
					"count.index",
				],
			},
			"load_balancers": {
				"references": [
					"var.worker_groups",
					"count.index",
					"local.workers_group_defaults[\"load_balancers\"]",
					"local.workers_group_defaults",
				],
			},
			"max_instance_lifetime": {
				"references": [
					"var.worker_groups",
					"count.index",
					"local.workers_group_defaults[\"max_instance_lifetime\"]",
					"local.workers_group_defaults",
				],
			},
			"max_size": {
				"references": [
					"var.worker_groups",
					"count.index",
					"local.workers_group_defaults[\"asg_max_size\"]",
					"local.workers_group_defaults",
				],
			},
			"min_size": {
				"references": [
					"var.worker_groups",
					"count.index",
					"local.workers_group_defaults[\"asg_min_size\"]",
					"local.workers_group_defaults",
				],
			},
			"name_prefix": {
				"references": [
					"local.cluster_name",
					"var.worker_groups",
					"count.index",
					"count.index",
				],
			},
			"placement_group": {
				"references": [
					"var.worker_groups",
					"count.index",
					"local.workers_group_defaults[\"placement_group\"]",
					"local.workers_group_defaults",
				],
			},
			"protect_from_scale_in": {
				"references": [
					"var.worker_groups",
					"count.index",
					"local.workers_group_defaults[\"protect_from_scale_in\"]",
					"local.workers_group_defaults",
				],
			},
			"service_linked_role_arn": {
				"references": [
					"var.worker_groups",
					"count.index",
					"local.workers_group_defaults[\"service_linked_role_arn\"]",
					"local.workers_group_defaults",
				],
			},
			"suspended_processes": {
				"references": [
					"var.worker_groups",
					"count.index",
					"local.workers_group_defaults[\"suspended_processes\"]",
					"local.workers_group_defaults",
				],
			},
			"target_group_arns": {
				"references": [
					"var.worker_groups",
					"count.index",
					"local.workers_group_defaults[\"target_group_arns\"]",
					"local.workers_group_defaults",
				],
			},
			"termination_policies": {
				"references": [
					"var.worker_groups",
					"count.index",
					"local.workers_group_defaults[\"termination_policies\"]",
					"local.workers_group_defaults",
				],
			},
			"vpc_zone_identifier": {
				"references": [
					"var.worker_groups",
					"count.index",
					"local.workers_group_defaults[\"subnets\"]",
					"local.workers_group_defaults",
				],
			},
		},
		"count": {
			"references": [
				"var.create_eks",
				"local.worker_group_launch_configuration_count",
			],
		},
		"depends_on":          [],
		"for_each":            {},
		"mode":                "managed",
		"module_address":      "module.eks",
		"name":                "workers",
		"provider_config_key": "module.eks:aws",
		"provisioners":        [],
		"type":                "aws_autoscaling_group",
	},
	"module.eks.aws_autoscaling_group.workers_launch_template": {
		"address": "module.eks.aws_autoscaling_group.workers_launch_template",
		"config": {
			"capacity_rebalance": {
				"references": [
					"var.worker_groups_launch_template",
					"count.index",
					"local.workers_group_defaults[\"capacity_rebalance\"]",
					"local.workers_group_defaults",
				],
			},
			"default_cooldown": {
				"references": [
					"var.worker_groups_launch_template",
					"count.index",
					"local.workers_group_defaults[\"default_cooldown\"]",
					"local.workers_group_defaults",
				],
			},
			"desired_capacity": {
				"references": [
					"var.worker_groups_launch_template",
					"count.index",
					"local.workers_group_defaults[\"asg_desired_capacity\"]",
					"local.workers_group_defaults",
				],
			},
			"enabled_metrics": {
				"references": [
					"var.worker_groups_launch_template",
					"count.index",
					"local.workers_group_defaults[\"enabled_metrics\"]",
					"local.workers_group_defaults",
				],
			},
			"force_delete": {
				"references": [
					"var.worker_groups_launch_template",
					"count.index",
					"local.workers_group_defaults[\"asg_force_delete\"]",
					"local.workers_group_defaults",
				],
			},
			"health_check_grace_period": {
				"references": [
					"var.worker_groups_launch_template",
					"count.index",
					"local.workers_group_defaults[\"health_check_grace_period\"]",
					"local.workers_group_defaults",
				],
			},
			"health_check_type": {
				"references": [
					"var.worker_groups_launch_template",
					"count.index",
					"local.workers_group_defaults[\"health_check_type\"]",
					"local.workers_group_defaults",
				],
			},
			"load_balancers": {
				"references": [
					"var.worker_groups_launch_template",
					"count.index",
					"local.workers_group_defaults[\"load_balancers\"]",
					"local.workers_group_defaults",
				],
			},
			"max_instance_lifetime": {
				"references": [
					"var.worker_groups_launch_template",
					"count.index",
					"local.workers_group_defaults[\"max_instance_lifetime\"]",
					"local.workers_group_defaults",
				],
			},
			"max_size": {
				"references": [
					"var.worker_groups_launch_template",
					"count.index",
					"local.workers_group_defaults[\"asg_max_size\"]",
					"local.workers_group_defaults",
				],
			},
			"min_size": {
				"references": [
					"var.worker_groups_launch_template",
					"count.index",
					"local.workers_group_defaults[\"asg_min_size\"]",
					"local.workers_group_defaults",
				],
			},
			"name_prefix": {
				"references": [
					"local.cluster_name",
					"var.worker_groups_launch_template",
					"count.index",
					"count.index",
				],
			},
			"placement_group": {
				"references": [
					"var.worker_groups_launch_template",
					"count.index",
					"local.workers_group_defaults[\"placement_group\"]",
					"local.workers_group_defaults",
				],
			},
			"protect_from_scale_in": {
				"references": [
					"var.worker_groups_launch_template",
					"count.index",
					"local.workers_group_defaults[\"protect_from_scale_in\"]",
					"local.workers_group_defaults",
				],
			},
			"service_linked_role_arn": {
				"references": [
					"var.worker_groups_launch_template",
					"count.index",
					"local.workers_group_defaults[\"service_linked_role_arn\"]",
					"local.workers_group_defaults",
				],
			},
			"suspended_processes": {
				"references": [
					"var.worker_groups_launch_template",
					"count.index",
					"local.workers_group_defaults[\"suspended_processes\"]",
					"local.workers_group_defaults",
				],
			},
			"target_group_arns": {
				"references": [
					"var.worker_groups_launch_template",
					"count.index",
					"local.workers_group_defaults[\"target_group_arns\"]",
					"local.workers_group_defaults",
				],
			},
			"termination_policies": {
				"references": [
					"var.worker_groups_launch_template",
					"count.index",
					"local.workers_group_defaults[\"termination_policies\"]",
					"local.workers_group_defaults",
				],
			},
			"vpc_zone_identifier": {
				"references": [
					"var.worker_groups_launch_template",
					"count.index",
					"local.workers_group_defaults[\"subnets\"]",
					"local.workers_group_defaults",
				],
			},
		},
		"count": {
			"references": [
				"var.create_eks",
				"local.worker_group_launch_template_count",
			],
		},
		"depends_on":          [],
		"for_each":            {},
		"mode":                "managed",
		"module_address":      "module.eks",
		"name":                "workers_launch_template",
		"provider_config_key": "module.eks:aws",
		"provisioners":        [],
		"type":                "aws_autoscaling_group",
	},
	"module.eks.aws_cloudwatch_log_group.this": {
		"address": "module.eks.aws_cloudwatch_log_group.this",
		"config": {
			"kms_key_id": {
				"references": [
					"var.cluster_log_kms_key_id",
				],
			},
			"name": {
				"references": [
					"var.cluster_name",
				],
			},
			"retention_in_days": {
				"references": [
					"var.cluster_log_retention_in_days",
				],
			},
			"tags": {
				"references": [
					"var.tags",
				],
			},
		},
		"count": {
			"references": [
				"var.cluster_enabled_log_types",
				"var.create_eks",
			],
		},
		"depends_on":          [],
		"for_each":            {},
		"mode":                "managed",
		"module_address":      "module.eks",
		"name":                "this",
		"provider_config_key": "module.eks:aws",
		"provisioners":        [],
		"type":                "aws_cloudwatch_log_group",
	},
	"module.eks.aws_eks_cluster.this": {
		"address": "module.eks.aws_eks_cluster.this",
		"config": {
			"enabled_cluster_log_types": {
				"references": [
					"var.cluster_enabled_log_types",
				],
			},
			"kubernetes_network_config": [
				{
					"service_ipv4_cidr": {
						"references": [
							"var.cluster_service_ipv4_cidr",
						],
					},
				},
			],
			"name": {
				"references": [
					"var.cluster_name",
				],
			},
			"role_arn": {
				"references": [
					"local.cluster_iam_role_arn",
				],
			},
			"tags": {
				"references": [
					"var.tags",
					"var.cluster_tags",
				],
			},
			"timeouts": {
				"constant_value": null,
			},
			"version": {
				"references": [
					"var.cluster_version",
				],
			},
			"vpc_config": [
				{
					"endpoint_private_access": {
						"references": [
							"var.cluster_endpoint_private_access",
						],
					},
					"endpoint_public_access": {
						"references": [
							"var.cluster_endpoint_public_access",
						],
					},
					"public_access_cidrs": {
						"references": [
							"var.cluster_endpoint_public_access_cidrs",
						],
					},
					"security_group_ids": {
						"references": [
							"local.cluster_security_group_id",
						],
					},
					"subnet_ids": {
						"references": [
							"var.subnets",
						],
					},
				},
			],
		},
		"count": {
			"references": [
				"var.create_eks",
			],
		},
		"depends_on": [
			"aws_security_group_rule.cluster_egress_internet",
			"aws_security_group_rule.cluster_https_worker_ingress",
			"aws_iam_role_policy_attachment.cluster_AmazonEKSClusterPolicy",
			"aws_iam_role_policy_attachment.cluster_AmazonEKSServicePolicy",
			"aws_iam_role_policy_attachment.cluster_AmazonEKSVPCResourceControllerPolicy",
			"aws_cloudwatch_log_group.this",
		],
		"for_each":            {},
		"mode":                "managed",
		"module_address":      "module.eks",
		"name":                "this",
		"provider_config_key": "module.eks:aws",
		"provisioners":        [],
		"type":                "aws_eks_cluster",
	},
	"module.eks.aws_iam_instance_profile.workers": {
		"address": "module.eks.aws_iam_instance_profile.workers",
		"config": {
			"name_prefix": {
				"references": [
					"local.cluster_name",
				],
			},
			"path": {
				"references": [
					"var.iam_path",
				],
			},
			"role": {
				"references": [
					"var.worker_groups",
					"count.index",
					"local.default_iam_role_id",
				],
			},
			"tags": {
				"references": [
					"var.tags",
				],
			},
		},
		"count": {
			"references": [
				"var.manage_worker_iam_resources",
				"var.create_eks",
				"local.worker_group_launch_configuration_count",
			],
		},
		"depends_on":          [],
		"for_each":            {},
		"mode":                "managed",
		"module_address":      "module.eks",
		"name":                "workers",
		"provider_config_key": "module.eks:aws",
		"provisioners":        [],
		"type":                "aws_iam_instance_profile",
	},
	"module.eks.aws_iam_instance_profile.workers_launch_template": {
		"address": "module.eks.aws_iam_instance_profile.workers_launch_template",
		"config": {
			"name_prefix": {
				"references": [
					"local.cluster_name",
				],
			},
			"path": {
				"references": [
					"var.iam_path",
				],
			},
			"role": {
				"references": [
					"var.worker_groups_launch_template",
					"count.index",
					"local.default_iam_role_id",
				],
			},
			"tags": {
				"references": [
					"var.tags",
				],
			},
		},
		"count": {
			"references": [
				"var.manage_worker_iam_resources",
				"var.create_eks",
				"local.worker_group_launch_template_count",
			],
		},
		"depends_on":          [],
		"for_each":            {},
		"mode":                "managed",
		"module_address":      "module.eks",
		"name":                "workers_launch_template",
		"provider_config_key": "module.eks:aws",
		"provisioners":        [],
		"type":                "aws_iam_instance_profile",
	},
	"module.eks.aws_iam_openid_connect_provider.oidc_provider": {
		"address": "module.eks.aws_iam_openid_connect_provider.oidc_provider",
		"config": {
			"client_id_list": {
				"references": [
					"local.client_id_list",
				],
			},
			"tags": {
				"references": [
					"var.cluster_name",
					"var.tags",
				],
			},
			"thumbprint_list": {
				"references": [
					"var.eks_oidc_root_ca_thumbprint",
				],
			},
			"url": {
				"references": [
					"local.cluster_oidc_issuer_url",
				],
			},
		},
		"count": {
			"references": [
				"var.enable_irsa",
				"var.create_eks",
			],
		},
		"depends_on":          [],
		"for_each":            {},
		"mode":                "managed",
		"module_address":      "module.eks",
		"name":                "oidc_provider",
		"provider_config_key": "module.eks:aws",
		"provisioners":        [],
		"type":                "aws_iam_openid_connect_provider",
	},
	"module.eks.aws_iam_policy.cluster_deny_log_group": {
		"address": "module.eks.aws_iam_policy.cluster_deny_log_group",
		"config": {
			"description": {
				"constant_value": "Deny CreateLogGroup",
			},
			"name_prefix": {
				"references": [
					"var.cluster_name",
				],
			},
			"path": {
				"references": [
					"var.iam_path",
				],
			},
			"policy": {
				"references": [
					"data.aws_iam_policy_document.cluster_deny_log_group[0].json",
					"data.aws_iam_policy_document.cluster_deny_log_group[0]",
					"data.aws_iam_policy_document.cluster_deny_log_group",
				],
			},
			"tags": {
				"references": [
					"var.tags",
				],
			},
		},
		"count": {
			"references": [
				"var.manage_cluster_iam_resources",
				"var.create_eks",
			],
		},
		"depends_on":          [],
		"for_each":            {},
		"mode":                "managed",
		"module_address":      "module.eks",
		"name":                "cluster_deny_log_group",
		"provider_config_key": "module.eks:aws",
		"provisioners":        [],
		"type":                "aws_iam_policy",
	},
	"module.eks.aws_iam_policy.cluster_elb_sl_role_creation": {
		"address": "module.eks.aws_iam_policy.cluster_elb_sl_role_creation",
		"config": {
			"description": {
				"constant_value": "Permissions for EKS to create AWSServiceRoleForElasticLoadBalancing service-linked role",
			},
			"name_prefix": {
				"references": [
					"var.cluster_name",
				],
			},
			"path": {
				"references": [
					"var.iam_path",
				],
			},
			"policy": {
				"references": [
					"data.aws_iam_policy_document.cluster_elb_sl_role_creation[0].json",
					"data.aws_iam_policy_document.cluster_elb_sl_role_creation[0]",
					"data.aws_iam_policy_document.cluster_elb_sl_role_creation",
				],
			},
			"tags": {
				"references": [
					"var.tags",
				],
			},
		},
		"count": {
			"references": [
				"var.manage_cluster_iam_resources",
				"var.create_eks",
			],
		},
		"depends_on":          [],
		"for_each":            {},
		"mode":                "managed",
		"module_address":      "module.eks",
		"name":                "cluster_elb_sl_role_creation",
		"provider_config_key": "module.eks:aws",
		"provisioners":        [],
		"type":                "aws_iam_policy",
	},
	"module.eks.aws_iam_role.cluster": {
		"address": "module.eks.aws_iam_role.cluster",
		"config": {
			"assume_role_policy": {
				"references": [
					"data.aws_iam_policy_document.cluster_assume_role_policy.json",
					"data.aws_iam_policy_document.cluster_assume_role_policy",
				],
			},
			"force_detach_policies": {
				"constant_value": true,
			},
			"name": {
				"references": [
					"var.cluster_iam_role_name",
					"var.cluster_iam_role_name",
				],
			},
			"name_prefix": {
				"references": [
					"var.cluster_iam_role_name",
					"var.cluster_name",
				],
			},
			"path": {
				"references": [
					"var.iam_path",
				],
			},
			"permissions_boundary": {
				"references": [
					"var.permissions_boundary",
				],
			},
			"tags": {
				"references": [
					"var.tags",
				],
			},
		},
		"count": {
			"references": [
				"var.manage_cluster_iam_resources",
				"var.create_eks",
			],
		},
		"depends_on":          [],
		"for_each":            {},
		"mode":                "managed",
		"module_address":      "module.eks",
		"name":                "cluster",
		"provider_config_key": "module.eks:aws",
		"provisioners":        [],
		"type":                "aws_iam_role",
	},
	"module.eks.aws_iam_role.workers": {
		"address": "module.eks.aws_iam_role.workers",
		"config": {
			"assume_role_policy": {
				"references": [
					"data.aws_iam_policy_document.workers_assume_role_policy.json",
					"data.aws_iam_policy_document.workers_assume_role_policy",
				],
			},
			"force_detach_policies": {
				"constant_value": true,
			},
			"name": {
				"references": [
					"var.workers_role_name",
					"var.workers_role_name",
				],
			},
			"name_prefix": {
				"references": [
					"var.workers_role_name",
					"local.cluster_name",
				],
			},
			"path": {
				"references": [
					"var.iam_path",
				],
			},
			"permissions_boundary": {
				"references": [
					"var.permissions_boundary",
				],
			},
			"tags": {
				"references": [
					"var.tags",
				],
			},
		},
		"count": {
			"references": [
				"var.manage_worker_iam_resources",
				"var.create_eks",
			],
		},
		"depends_on":          [],
		"for_each":            {},
		"mode":                "managed",
		"module_address":      "module.eks",
		"name":                "workers",
		"provider_config_key": "module.eks:aws",
		"provisioners":        [],
		"type":                "aws_iam_role",
	},
	"module.eks.aws_iam_role_policy_attachment.cluster_AmazonEKSClusterPolicy": {
		"address": "module.eks.aws_iam_role_policy_attachment.cluster_AmazonEKSClusterPolicy",
		"config": {
			"policy_arn": {
				"references": [
					"local.policy_arn_prefix",
				],
			},
			"role": {
				"references": [
					"local.cluster_iam_role_name",
				],
			},
		},
		"count": {
			"references": [
				"var.manage_cluster_iam_resources",
				"var.create_eks",
			],
		},
		"depends_on":          [],
		"for_each":            {},
		"mode":                "managed",
		"module_address":      "module.eks",
		"name":                "cluster_AmazonEKSClusterPolicy",
		"provider_config_key": "module.eks:aws",
		"provisioners":        [],
		"type":                "aws_iam_role_policy_attachment",
	},
	"module.eks.aws_iam_role_policy_attachment.cluster_AmazonEKSServicePolicy": {
		"address": "module.eks.aws_iam_role_policy_attachment.cluster_AmazonEKSServicePolicy",
		"config": {
			"policy_arn": {
				"references": [
					"local.policy_arn_prefix",
				],
			},
			"role": {
				"references": [
					"local.cluster_iam_role_name",
				],
			},
		},
		"count": {
			"references": [
				"var.manage_cluster_iam_resources",
				"var.create_eks",
			],
		},
		"depends_on":          [],
		"for_each":            {},
		"mode":                "managed",
		"module_address":      "module.eks",
		"name":                "cluster_AmazonEKSServicePolicy",
		"provider_config_key": "module.eks:aws",
		"provisioners":        [],
		"type":                "aws_iam_role_policy_attachment",
	},
	"module.eks.aws_iam_role_policy_attachment.cluster_AmazonEKSVPCResourceControllerPolicy": {
		"address": "module.eks.aws_iam_role_policy_attachment.cluster_AmazonEKSVPCResourceControllerPolicy",
		"config": {
			"policy_arn": {
				"references": [
					"local.policy_arn_prefix",
				],
			},
			"role": {
				"references": [
					"local.cluster_iam_role_name",
				],
			},
		},
		"count": {
			"references": [
				"var.manage_cluster_iam_resources",
				"var.create_eks",
			],
		},
		"depends_on":          [],
		"for_each":            {},
		"mode":                "managed",
		"module_address":      "module.eks",
		"name":                "cluster_AmazonEKSVPCResourceControllerPolicy",
		"provider_config_key": "module.eks:aws",
		"provisioners":        [],
		"type":                "aws_iam_role_policy_attachment",
	},
	"module.eks.aws_iam_role_policy_attachment.cluster_deny_log_group": {
		"address": "module.eks.aws_iam_role_policy_attachment.cluster_deny_log_group",
		"config": {
			"policy_arn": {
				"references": [
					"aws_iam_policy.cluster_deny_log_group[0].arn",
					"aws_iam_policy.cluster_deny_log_group[0]",
					"aws_iam_policy.cluster_deny_log_group",
				],
			},
			"role": {
				"references": [
					"local.cluster_iam_role_name",
				],
			},
		},
		"count": {
			"references": [
				"var.manage_cluster_iam_resources",
				"var.create_eks",
			],
		},
		"depends_on":          [],
		"for_each":            {},
		"mode":                "managed",
		"module_address":      "module.eks",
		"name":                "cluster_deny_log_group",
		"provider_config_key": "module.eks:aws",
		"provisioners":        [],
		"type":                "aws_iam_role_policy_attachment",
	},
	"module.eks.aws_iam_role_policy_attachment.cluster_elb_sl_role_creation": {
		"address": "module.eks.aws_iam_role_policy_attachment.cluster_elb_sl_role_creation",
		"config": {
			"policy_arn": {
				"references": [
					"aws_iam_policy.cluster_elb_sl_role_creation[0].arn",
					"aws_iam_policy.cluster_elb_sl_role_creation[0]",
					"aws_iam_policy.cluster_elb_sl_role_creation",
				],
			},
			"role": {
				"references": [
					"local.cluster_iam_role_name",
				],
			},
		},
		"count": {
			"references": [
				"var.manage_cluster_iam_resources",
				"var.create_eks",
			],
		},
		"depends_on":          [],
		"for_each":            {},
		"mode":                "managed",
		"module_address":      "module.eks",
		"name":                "cluster_elb_sl_role_creation",
		"provider_config_key": "module.eks:aws",
		"provisioners":        [],
		"type":                "aws_iam_role_policy_attachment",
	},
	"module.eks.aws_iam_role_policy_attachment.workers_AmazonEC2ContainerRegistryReadOnly": {
		"address": "module.eks.aws_iam_role_policy_attachment.workers_AmazonEC2ContainerRegistryReadOnly",
		"config": {
			"policy_arn": {
				"references": [
					"local.policy_arn_prefix",
				],
			},
			"role": {
				"references": [
					"aws_iam_role.workers[0].name",
					"aws_iam_role.workers[0]",
					"aws_iam_role.workers",
				],
			},
		},
		"count": {
			"references": [
				"var.manage_worker_iam_resources",
				"var.create_eks",
			],
		},
		"depends_on":          [],
		"for_each":            {},
		"mode":                "managed",
		"module_address":      "module.eks",
		"name":                "workers_AmazonEC2ContainerRegistryReadOnly",
		"provider_config_key": "module.eks:aws",
		"provisioners":        [],
		"type":                "aws_iam_role_policy_attachment",
	},
	"module.eks.aws_iam_role_policy_attachment.workers_AmazonEKSWorkerNodePolicy": {
		"address": "module.eks.aws_iam_role_policy_attachment.workers_AmazonEKSWorkerNodePolicy",
		"config": {
			"policy_arn": {
				"references": [
					"local.policy_arn_prefix",
				],
			},
			"role": {
				"references": [
					"aws_iam_role.workers[0].name",
					"aws_iam_role.workers[0]",
					"aws_iam_role.workers",
				],
			},
		},
		"count": {
			"references": [
				"var.manage_worker_iam_resources",
				"var.create_eks",
			],
		},
		"depends_on":          [],
		"for_each":            {},
		"mode":                "managed",
		"module_address":      "module.eks",
		"name":                "workers_AmazonEKSWorkerNodePolicy",
		"provider_config_key": "module.eks:aws",
		"provisioners":        [],
		"type":                "aws_iam_role_policy_attachment",
	},
	"module.eks.aws_iam_role_policy_attachment.workers_AmazonEKS_CNI_Policy": {
		"address": "module.eks.aws_iam_role_policy_attachment.workers_AmazonEKS_CNI_Policy",
		"config": {
			"policy_arn": {
				"references": [
					"local.policy_arn_prefix",
				],
			},
			"role": {
				"references": [
					"aws_iam_role.workers[0].name",
					"aws_iam_role.workers[0]",
					"aws_iam_role.workers",
				],
			},
		},
		"count": {
			"references": [
				"var.manage_worker_iam_resources",
				"var.attach_worker_cni_policy",
				"var.create_eks",
			],
		},
		"depends_on":          [],
		"for_each":            {},
		"mode":                "managed",
		"module_address":      "module.eks",
		"name":                "workers_AmazonEKS_CNI_Policy",
		"provider_config_key": "module.eks:aws",
		"provisioners":        [],
		"type":                "aws_iam_role_policy_attachment",
	},
	"module.eks.aws_iam_role_policy_attachment.workers_additional_policies": {
		"address": "module.eks.aws_iam_role_policy_attachment.workers_additional_policies",
		"config": {
			"policy_arn": {
				"references": [
					"var.workers_additional_policies",
					"count.index",
				],
			},
			"role": {
				"references": [
					"aws_iam_role.workers[0].name",
					"aws_iam_role.workers[0]",
					"aws_iam_role.workers",
				],
			},
		},
		"count": {
			"references": [
				"var.manage_worker_iam_resources",
				"var.create_eks",
				"var.workers_additional_policies",
			],
		},
		"depends_on":          [],
		"for_each":            {},
		"mode":                "managed",
		"module_address":      "module.eks",
		"name":                "workers_additional_policies",
		"provider_config_key": "module.eks:aws",
		"provisioners":        [],
		"type":                "aws_iam_role_policy_attachment",
	},
	"module.eks.aws_launch_configuration.workers": {
		"address": "module.eks.aws_launch_configuration.workers",
		"config": {
			"associate_public_ip_address": {
				"references": [
					"var.worker_groups",
					"count.index",
					"local.workers_group_defaults[\"public_ip\"]",
					"local.workers_group_defaults",
				],
			},
			"ebs_optimized": {
				"references": [
					"var.worker_groups",
					"count.index",
					"local.ebs_optimized_not_supported",
					"var.worker_groups",
					"count.index",
					"local.workers_group_defaults[\"instance_type\"]",
					"local.workers_group_defaults",
				],
			},
			"enable_monitoring": {
				"references": [
					"var.worker_groups",
					"count.index",
					"local.workers_group_defaults[\"enable_monitoring\"]",
					"local.workers_group_defaults",
				],
			},
			"iam_instance_profile": {
				"references": [
					"aws_iam_instance_profile.workers",
					"data.aws_iam_instance_profile.custom_worker_group_iam_instance_profile",
					"count.index",
				],
			},
			"image_id": {
				"references": [
					"var.worker_groups",
					"count.index",
					"var.worker_groups",
					"count.index",
					"local.workers_group_defaults[\"platform\"]",
					"local.workers_group_defaults",
					"local.default_ami_id_windows",
					"local.default_ami_id_linux",
				],
			},
			"instance_type": {
				"references": [
					"var.worker_groups",
					"count.index",
					"local.workers_group_defaults[\"instance_type\"]",
					"local.workers_group_defaults",
				],
			},
			"key_name": {
				"references": [
					"var.worker_groups",
					"count.index",
					"local.workers_group_defaults[\"key_name\"]",
					"local.workers_group_defaults",
				],
			},
			"metadata_options": [
				{
					"http_endpoint": {
						"references": [
							"var.worker_groups",
							"count.index",
							"local.workers_group_defaults[\"metadata_http_endpoint\"]",
							"local.workers_group_defaults",
						],
					},
					"http_put_response_hop_limit": {
						"references": [
							"var.worker_groups",
							"count.index",
							"local.workers_group_defaults[\"metadata_http_put_response_hop_limit\"]",
							"local.workers_group_defaults",
						],
					},
					"http_tokens": {
						"references": [
							"var.worker_groups",
							"count.index",
							"local.workers_group_defaults[\"metadata_http_tokens\"]",
							"local.workers_group_defaults",
						],
					},
				},
			],
			"name_prefix": {
				"references": [
					"local.cluster_name",
					"var.worker_groups",
					"count.index",
					"count.index",
				],
			},
			"placement_tenancy": {
				"references": [
					"var.worker_groups",
					"count.index",
					"local.workers_group_defaults[\"placement_tenancy\"]",
					"local.workers_group_defaults",
				],
			},
			"root_block_device": [
				{
					"delete_on_termination": {
						"constant_value": true,
					},
					"encrypted": {
						"references": [
							"var.worker_groups",
							"count.index",
							"local.workers_group_defaults[\"root_encrypted\"]",
							"local.workers_group_defaults",
						],
					},
					"iops": {
						"references": [
							"var.worker_groups",
							"count.index",
							"local.workers_group_defaults[\"root_iops\"]",
							"local.workers_group_defaults",
						],
					},
					"throughput": {
						"references": [
							"var.worker_groups",
							"count.index",
							"local.workers_group_defaults[\"root_volume_throughput\"]",
							"local.workers_group_defaults",
						],
					},
					"volume_size": {
						"references": [
							"var.worker_groups",
							"count.index",
							"local.workers_group_defaults[\"root_volume_size\"]",
							"local.workers_group_defaults",
						],
					},
					"volume_type": {
						"references": [
							"var.worker_groups",
							"count.index",
							"local.workers_group_defaults[\"root_volume_type\"]",
							"local.workers_group_defaults",
						],
					},
				},
			],
			"security_groups": {
				"references": [
					"local.worker_security_group_id",
					"var.worker_additional_security_group_ids",
					"var.worker_groups",
					"count.index",
					"local.workers_group_defaults[\"additional_security_group_ids\"]",
					"local.workers_group_defaults",
				],
			},
			"spot_price": {
				"references": [
					"var.worker_groups",
					"count.index",
					"local.workers_group_defaults[\"spot_price\"]",
					"local.workers_group_defaults",
				],
			},
			"user_data_base64": {
				"references": [
					"local.launch_configuration_userdata_rendered",
					"count.index",
				],
			},
		},
		"count": {
			"references": [
				"var.create_eks",
				"local.worker_group_launch_configuration_count",
			],
		},
		"depends_on": [
			"aws_security_group_rule.workers_egress_internet",
			"aws_security_group_rule.workers_ingress_self",
			"aws_security_group_rule.workers_ingress_cluster",
			"aws_security_group_rule.workers_ingress_cluster_kubelet",
			"aws_security_group_rule.workers_ingress_cluster_https",
			"aws_security_group_rule.workers_ingress_cluster_primary",
			"aws_security_group_rule.cluster_primary_ingress_workers",
			"aws_iam_role_policy_attachment.workers_AmazonEKSWorkerNodePolicy",
			"aws_iam_role_policy_attachment.workers_AmazonEKS_CNI_Policy",
			"aws_iam_role_policy_attachment.workers_AmazonEC2ContainerRegistryReadOnly",
			"aws_iam_role_policy_attachment.workers_additional_policies",
		],
		"for_each":            {},
		"mode":                "managed",
		"module_address":      "module.eks",
		"name":                "workers",
		"provider_config_key": "module.eks:aws",
		"provisioners":        [],
		"type":                "aws_launch_configuration",
	},
	"module.eks.aws_launch_template.workers_launch_template": {
		"address": "module.eks.aws_launch_template.workers_launch_template",
		"config": {
			"block_device_mappings": [
				{
					"device_name": {
						"references": [
							"var.worker_groups_launch_template",
							"count.index",
							"var.worker_groups_launch_template",
							"count.index",
							"local.workers_group_defaults[\"platform\"]",
							"local.workers_group_defaults",
							"local.workers_group_defaults[\"root_block_device_name_windows\"]",
							"local.workers_group_defaults",
							"local.workers_group_defaults[\"root_block_device_name\"]",
							"local.workers_group_defaults",
						],
					},
					"ebs": [
						{
							"delete_on_termination": {
								"constant_value": true,
							},
							"encrypted": {
								"references": [
									"var.worker_groups_launch_template",
									"count.index",
									"local.workers_group_defaults[\"root_encrypted\"]",
									"local.workers_group_defaults",
								],
							},
							"iops": {
								"references": [
									"var.worker_groups_launch_template",
									"count.index",
									"local.workers_group_defaults[\"root_iops\"]",
									"local.workers_group_defaults",
								],
							},
							"kms_key_id": {
								"references": [
									"var.worker_groups_launch_template",
									"count.index",
									"local.workers_group_defaults[\"root_kms_key_id\"]",
									"local.workers_group_defaults",
								],
							},
							"throughput": {
								"references": [
									"var.worker_groups_launch_template",
									"count.index",
									"local.workers_group_defaults[\"root_volume_throughput\"]",
									"local.workers_group_defaults",
								],
							},
							"volume_size": {
								"references": [
									"var.worker_groups_launch_template",
									"count.index",
									"local.workers_group_defaults[\"root_volume_size\"]",
									"local.workers_group_defaults",
								],
							},
							"volume_type": {
								"references": [
									"var.worker_groups_launch_template",
									"count.index",
									"local.workers_group_defaults[\"root_volume_type\"]",
									"local.workers_group_defaults",
								],
							},
						},
					],
				},
			],
			"ebs_optimized": {
				"references": [
					"var.worker_groups_launch_template",
					"count.index",
					"local.ebs_optimized_not_supported",
					"var.worker_groups_launch_template",
					"count.index",
					"local.workers_group_defaults[\"instance_type\"]",
					"local.workers_group_defaults",
				],
			},
			"enclave_options": [
				{
					"enabled": {
						"references": [
							"var.worker_groups_launch_template",
							"count.index",
							"local.workers_group_defaults[\"enclave_support\"]",
							"local.workers_group_defaults",
						],
					},
				},
			],
			"iam_instance_profile": [
				{
					"name": {
						"references": [
							"aws_iam_instance_profile.workers_launch_template",
							"data.aws_iam_instance_profile.custom_worker_group_launch_template_iam_instance_profile",
							"count.index",
						],
					},
				},
			],
			"image_id": {
				"references": [
					"var.worker_groups_launch_template",
					"count.index",
					"var.worker_groups_launch_template",
					"count.index",
					"local.workers_group_defaults[\"platform\"]",
					"local.workers_group_defaults",
					"local.default_ami_id_windows",
					"local.default_ami_id_linux",
				],
			},
			"instance_type": {
				"references": [
					"var.worker_groups_launch_template",
					"count.index",
					"local.workers_group_defaults[\"instance_type\"]",
					"local.workers_group_defaults",
				],
			},
			"key_name": {
				"references": [
					"var.worker_groups_launch_template",
					"count.index",
					"local.workers_group_defaults[\"key_name\"]",
					"local.workers_group_defaults",
				],
			},
			"metadata_options": [
				{
					"http_endpoint": {
						"references": [
							"var.worker_groups_launch_template",
							"count.index",
							"local.workers_group_defaults[\"metadata_http_endpoint\"]",
							"local.workers_group_defaults",
						],
					},
					"http_put_response_hop_limit": {
						"references": [
							"var.worker_groups_launch_template",
							"count.index",
							"local.workers_group_defaults[\"metadata_http_put_response_hop_limit\"]",
							"local.workers_group_defaults",
						],
					},
					"http_tokens": {
						"references": [
							"var.worker_groups_launch_template",
							"count.index",
							"local.workers_group_defaults[\"metadata_http_tokens\"]",
							"local.workers_group_defaults",
						],
					},
				},
			],
			"monitoring": [
				{
					"enabled": {
						"references": [
							"var.worker_groups_launch_template",
							"count.index",
							"local.workers_group_defaults[\"enable_monitoring\"]",
							"local.workers_group_defaults",
						],
					},
				},
			],
			"name_prefix": {
				"references": [
					"local.cluster_name",
					"var.worker_groups_launch_template",
					"count.index",
					"count.index",
				],
			},
			"network_interfaces": [
				{
					"associate_public_ip_address": {
						"references": [
							"var.worker_groups_launch_template",
							"count.index",
							"local.workers_group_defaults[\"public_ip\"]",
							"local.workers_group_defaults",
						],
					},
					"delete_on_termination": {
						"references": [
							"var.worker_groups_launch_template",
							"count.index",
							"local.workers_group_defaults[\"eni_delete\"]",
							"local.workers_group_defaults",
						],
					},
					"interface_type": {
						"references": [
							"var.worker_groups_launch_template",
							"count.index",
							"local.workers_group_defaults[\"interface_type\"]",
							"local.workers_group_defaults",
						],
					},
					"security_groups": {
						"references": [
							"local.worker_security_group_id",
							"var.worker_additional_security_group_ids",
							"var.worker_groups_launch_template",
							"count.index",
							"local.workers_group_defaults[\"additional_security_group_ids\"]",
							"local.workers_group_defaults",
						],
					},
				},
			],
			"tag_specifications": [
				{
					"resource_type": {
						"constant_value": "volume",
					},
					"tags": {
						"references": [
							"local.cluster_name",
							"var.worker_groups_launch_template",
							"count.index",
							"count.index",
							"var.tags",
							"var.worker_groups_launch_template",
							"count.index",
							"local.workers_group_defaults[\"tags\"]",
							"local.workers_group_defaults",
						],
					},
				},
				{
					"resource_type": {
						"constant_value": "instance",
					},
					"tags": {
						"references": [
							"local.cluster_name",
							"var.worker_groups_launch_template",
							"count.index",
							"count.index",
							"var.tags",
							"var.worker_groups_launch_template",
							"count.index",
							"local.workers_group_defaults[\"tags\"]",
							"local.workers_group_defaults",
						],
					},
				},
				{
					"resource_type": {
						"constant_value": "network-interface",
					},
					"tags": {
						"references": [
							"local.cluster_name",
							"var.worker_groups_launch_template",
							"count.index",
							"count.index",
							"var.tags",
							"var.worker_groups_launch_template",
							"count.index",
							"local.workers_group_defaults[\"tags\"]",
							"local.workers_group_defaults",
						],
					},
				},
			],
			"tags": {
				"references": [
					"var.tags",
				],
			},
			"update_default_version": {
				"references": [
					"var.worker_groups_launch_template",
					"count.index",
					"local.workers_group_defaults[\"update_default_version\"]",
					"local.workers_group_defaults",
				],
			},
			"user_data": {
				"references": [
					"local.launch_template_userdata_rendered",
					"count.index",
				],
			},
		},
		"count": {
			"references": [
				"var.create_eks",
				"local.worker_group_launch_template_count",
			],
		},
		"depends_on": [
			"aws_security_group_rule.workers_egress_internet",
			"aws_security_group_rule.workers_ingress_self",
			"aws_security_group_rule.workers_ingress_cluster",
			"aws_security_group_rule.workers_ingress_cluster_kubelet",
			"aws_security_group_rule.workers_ingress_cluster_https",
			"aws_security_group_rule.workers_ingress_cluster_primary",
			"aws_security_group_rule.cluster_primary_ingress_workers",
			"aws_iam_role_policy_attachment.workers_AmazonEKSWorkerNodePolicy",
			"aws_iam_role_policy_attachment.workers_AmazonEKS_CNI_Policy",
			"aws_iam_role_policy_attachment.workers_AmazonEC2ContainerRegistryReadOnly",
			"aws_iam_role_policy_attachment.workers_additional_policies",
		],
		"for_each":            {},
		"mode":                "managed",
		"module_address":      "module.eks",
		"name":                "workers_launch_template",
		"provider_config_key": "module.eks:aws",
		"provisioners":        [],
		"type":                "aws_launch_template",
	},
	"module.eks.aws_security_group.cluster": {
		"address": "module.eks.aws_security_group.cluster",
		"config": {
			"description": {
				"constant_value": "EKS cluster security group.",
			},
			"name_prefix": {
				"references": [
					"var.cluster_name",
				],
			},
			"tags": {
				"references": [
					"var.tags",
					"var.cluster_name",
				],
			},
			"vpc_id": {
				"references": [
					"var.vpc_id",
				],
			},
		},
		"count": {
			"references": [
				"var.cluster_create_security_group",
				"var.create_eks",
			],
		},
		"depends_on":          [],
		"for_each":            {},
		"mode":                "managed",
		"module_address":      "module.eks",
		"name":                "cluster",
		"provider_config_key": "module.eks:aws",
		"provisioners":        [],
		"type":                "aws_security_group",
	},
	"module.eks.aws_security_group.workers": {
		"address": "module.eks.aws_security_group.workers",
		"config": {
			"description": {
				"constant_value": "Security group for all nodes in the cluster.",
			},
			"name_prefix": {
				"references": [
					"var.cluster_name",
				],
			},
			"tags": {
				"references": [
					"var.tags",
					"var.cluster_name",
					"var.cluster_name",
				],
			},
			"vpc_id": {
				"references": [
					"var.vpc_id",
				],
			},
		},
		"count": {
			"references": [
				"var.worker_create_security_group",
				"var.create_eks",
			],
		},
		"depends_on":          [],
		"for_each":            {},
		"mode":                "managed",
		"module_address":      "module.eks",
		"name":                "workers",
		"provider_config_key": "module.eks:aws",
		"provisioners":        [],
		"type":                "aws_security_group",
	},
	"module.eks.aws_security_group_rule.cluster_egress_internet": {
		"address": "module.eks.aws_security_group_rule.cluster_egress_internet",
		"config": {
			"cidr_blocks": {
				"references": [
					"var.cluster_egress_cidrs",
				],
			},
			"description": {
				"constant_value": "Allow cluster egress access to the Internet.",
			},
			"from_port": {
				"constant_value": 0,
			},
			"protocol": {
				"constant_value": "-1",
			},
			"security_group_id": {
				"references": [
					"local.cluster_security_group_id",
				],
			},
			"to_port": {
				"constant_value": 0,
			},
			"type": {
				"constant_value": "egress",
			},
		},
		"count": {
			"references": [
				"var.cluster_create_security_group",
				"var.create_eks",
			],
		},
		"depends_on":          [],
		"for_each":            {},
		"mode":                "managed",
		"module_address":      "module.eks",
		"name":                "cluster_egress_internet",
		"provider_config_key": "module.eks:aws",
		"provisioners":        [],
		"type":                "aws_security_group_rule",
	},
	"module.eks.aws_security_group_rule.cluster_https_worker_ingress": {
		"address": "module.eks.aws_security_group_rule.cluster_https_worker_ingress",
		"config": {
			"description": {
				"constant_value": "Allow pods to communicate with the EKS cluster API.",
			},
			"from_port": {
				"constant_value": 443,
			},
			"protocol": {
				"constant_value": "tcp",
			},
			"security_group_id": {
				"references": [
					"local.cluster_security_group_id",
				],
			},
			"source_security_group_id": {
				"references": [
					"local.worker_security_group_id",
				],
			},
			"to_port": {
				"constant_value": 443,
			},
			"type": {
				"constant_value": "ingress",
			},
		},
		"count": {
			"references": [
				"var.cluster_create_security_group",
				"var.create_eks",
				"var.worker_create_security_group",
			],
		},
		"depends_on":          [],
		"for_each":            {},
		"mode":                "managed",
		"module_address":      "module.eks",
		"name":                "cluster_https_worker_ingress",
		"provider_config_key": "module.eks:aws",
		"provisioners":        [],
		"type":                "aws_security_group_rule",
	},
	"module.eks.aws_security_group_rule.cluster_primary_ingress_workers": {
		"address": "module.eks.aws_security_group_rule.cluster_primary_ingress_workers",
		"config": {
			"description": {
				"constant_value": "Allow pods running on workers to send communication to cluster primary security group (e.g. Fargate pods).",
			},
			"from_port": {
				"constant_value": 0,
			},
			"protocol": {
				"constant_value": "all",
			},
			"security_group_id": {
				"references": [
					"local.cluster_primary_security_group_id",
				],
			},
			"source_security_group_id": {
				"references": [
					"local.worker_security_group_id",
				],
			},
			"to_port": {
				"constant_value": 65535,
			},
			"type": {
				"constant_value": "ingress",
			},
		},
		"count": {
			"references": [
				"var.worker_create_security_group",
				"var.worker_create_cluster_primary_security_group_rules",
				"var.create_eks",
			],
		},
		"depends_on":          [],
		"for_each":            {},
		"mode":                "managed",
		"module_address":      "module.eks",
		"name":                "cluster_primary_ingress_workers",
		"provider_config_key": "module.eks:aws",
		"provisioners":        [],
		"type":                "aws_security_group_rule",
	},
	"module.eks.aws_security_group_rule.cluster_private_access_cidrs_source": {
		"address": "module.eks.aws_security_group_rule.cluster_private_access_cidrs_source",
		"config": {
			"cidr_blocks": {
				"references": [
					"each.value",
				],
			},
			"description": {
				"constant_value": "Allow private K8S API ingress from custom CIDR source.",
			},
			"from_port": {
				"constant_value": 443,
			},
			"protocol": {
				"constant_value": "tcp",
			},
			"security_group_id": {
				"references": [
					"aws_eks_cluster.this[0].vpc_config[0].cluster_security_group_id",
					"aws_eks_cluster.this[0].vpc_config[0]",
					"aws_eks_cluster.this[0].vpc_config",
					"aws_eks_cluster.this[0]",
					"aws_eks_cluster.this",
				],
			},
			"to_port": {
				"constant_value": 443,
			},
			"type": {
				"constant_value": "ingress",
			},
		},
		"count":      {},
		"depends_on": [],
		"for_each": {
			"references": [
				"var.create_eks",
				"var.cluster_create_endpoint_private_access_sg_rule",
				"var.cluster_endpoint_private_access",
				"var.cluster_endpoint_private_access_cidrs",
				"var.cluster_endpoint_private_access_cidrs",
			],
		},
		"mode":                "managed",
		"module_address":      "module.eks",
		"name":                "cluster_private_access_cidrs_source",
		"provider_config_key": "module.eks:aws",
		"provisioners":        [],
		"type":                "aws_security_group_rule",
	},
	"module.eks.aws_security_group_rule.cluster_private_access_sg_source": {
		"address": "module.eks.aws_security_group_rule.cluster_private_access_sg_source",
		"config": {
			"description": {
				"constant_value": "Allow private K8S API ingress from custom Security Groups source.",
			},
			"from_port": {
				"constant_value": 443,
			},
			"protocol": {
				"constant_value": "tcp",
			},
			"security_group_id": {
				"references": [
					"aws_eks_cluster.this[0].vpc_config[0].cluster_security_group_id",
					"aws_eks_cluster.this[0].vpc_config[0]",
					"aws_eks_cluster.this[0].vpc_config",
					"aws_eks_cluster.this[0]",
					"aws_eks_cluster.this",
				],
			},
			"source_security_group_id": {
				"references": [
					"var.cluster_endpoint_private_access_sg",
					"count.index",
				],
			},
			"to_port": {
				"constant_value": 443,
			},
			"type": {
				"constant_value": "ingress",
			},
		},
		"count": {
			"references": [
				"var.create_eks",
				"var.cluster_create_endpoint_private_access_sg_rule",
				"var.cluster_endpoint_private_access",
				"var.cluster_endpoint_private_access_sg",
				"var.cluster_endpoint_private_access_sg",
			],
		},
		"depends_on":          [],
		"for_each":            {},
		"mode":                "managed",
		"module_address":      "module.eks",
		"name":                "cluster_private_access_sg_source",
		"provider_config_key": "module.eks:aws",
		"provisioners":        [],
		"type":                "aws_security_group_rule",
	},
	"module.eks.aws_security_group_rule.workers_egress_internet": {
		"address": "module.eks.aws_security_group_rule.workers_egress_internet",
		"config": {
			"cidr_blocks": {
				"references": [
					"var.workers_egress_cidrs",
				],
			},
			"description": {
				"constant_value": "Allow nodes all egress to the Internet.",
			},
			"from_port": {
				"constant_value": 0,
			},
			"protocol": {
				"constant_value": "-1",
			},
			"security_group_id": {
				"references": [
					"local.worker_security_group_id",
				],
			},
			"to_port": {
				"constant_value": 0,
			},
			"type": {
				"constant_value": "egress",
			},
		},
		"count": {
			"references": [
				"var.worker_create_security_group",
				"var.create_eks",
			],
		},
		"depends_on":          [],
		"for_each":            {},
		"mode":                "managed",
		"module_address":      "module.eks",
		"name":                "workers_egress_internet",
		"provider_config_key": "module.eks:aws",
		"provisioners":        [],
		"type":                "aws_security_group_rule",
	},
	"module.eks.aws_security_group_rule.workers_ingress_cluster": {
		"address": "module.eks.aws_security_group_rule.workers_ingress_cluster",
		"config": {
			"description": {
				"constant_value": "Allow workers pods to receive communication from the cluster control plane.",
			},
			"from_port": {
				"references": [
					"var.worker_sg_ingress_from_port",
				],
			},
			"protocol": {
				"constant_value": "tcp",
			},
			"security_group_id": {
				"references": [
					"local.worker_security_group_id",
				],
			},
			"source_security_group_id": {
				"references": [
					"local.cluster_security_group_id",
				],
			},
			"to_port": {
				"constant_value": 65535,
			},
			"type": {
				"constant_value": "ingress",
			},
		},
		"count": {
			"references": [
				"var.worker_create_security_group",
				"var.create_eks",
			],
		},
		"depends_on":          [],
		"for_each":            {},
		"mode":                "managed",
		"module_address":      "module.eks",
		"name":                "workers_ingress_cluster",
		"provider_config_key": "module.eks:aws",
		"provisioners":        [],
		"type":                "aws_security_group_rule",
	},
	"module.eks.aws_security_group_rule.workers_ingress_cluster_https": {
		"address": "module.eks.aws_security_group_rule.workers_ingress_cluster_https",
		"config": {
			"description": {
				"constant_value": "Allow pods running extension API servers on port 443 to receive communication from cluster control plane.",
			},
			"from_port": {
				"constant_value": 443,
			},
			"protocol": {
				"constant_value": "tcp",
			},
			"security_group_id": {
				"references": [
					"local.worker_security_group_id",
				],
			},
			"source_security_group_id": {
				"references": [
					"local.cluster_security_group_id",
				],
			},
			"to_port": {
				"constant_value": 443,
			},
			"type": {
				"constant_value": "ingress",
			},
		},
		"count": {
			"references": [
				"var.worker_create_security_group",
				"var.create_eks",
			],
		},
		"depends_on":          [],
		"for_each":            {},
		"mode":                "managed",
		"module_address":      "module.eks",
		"name":                "workers_ingress_cluster_https",
		"provider_config_key": "module.eks:aws",
		"provisioners":        [],
		"type":                "aws_security_group_rule",
	},
	"module.eks.aws_security_group_rule.workers_ingress_cluster_kubelet": {
		"address": "module.eks.aws_security_group_rule.workers_ingress_cluster_kubelet",
		"config": {
			"description": {
				"constant_value": "Allow workers Kubelets to receive communication from the cluster control plane.",
			},
			"from_port": {
				"constant_value": 10250,
			},
			"protocol": {
				"constant_value": "tcp",
			},
			"security_group_id": {
				"references": [
					"local.worker_security_group_id",
				],
			},
			"source_security_group_id": {
				"references": [
					"local.cluster_security_group_id",
				],
			},
			"to_port": {
				"constant_value": 10250,
			},
			"type": {
				"constant_value": "ingress",
			},
		},
		"count": {
			"references": [
				"var.worker_create_security_group",
				"var.create_eks",
				"var.worker_sg_ingress_from_port",
			],
		},
		"depends_on":          [],
		"for_each":            {},
		"mode":                "managed",
		"module_address":      "module.eks",
		"name":                "workers_ingress_cluster_kubelet",
		"provider_config_key": "module.eks:aws",
		"provisioners":        [],
		"type":                "aws_security_group_rule",
	},
	"module.eks.aws_security_group_rule.workers_ingress_cluster_primary": {
		"address": "module.eks.aws_security_group_rule.workers_ingress_cluster_primary",
		"config": {
			"description": {
				"constant_value": "Allow pods running on workers to receive communication from cluster primary security group (e.g. Fargate pods).",
			},
			"from_port": {
				"constant_value": 0,
			},
			"protocol": {
				"constant_value": "all",
			},
			"security_group_id": {
				"references": [
					"local.worker_security_group_id",
				],
			},
			"source_security_group_id": {
				"references": [
					"local.cluster_primary_security_group_id",
				],
			},
			"to_port": {
				"constant_value": 65535,
			},
			"type": {
				"constant_value": "ingress",
			},
		},
		"count": {
			"references": [
				"var.worker_create_security_group",
				"var.worker_create_cluster_primary_security_group_rules",
				"var.create_eks",
			],
		},
		"depends_on":          [],
		"for_each":            {},
		"mode":                "managed",
		"module_address":      "module.eks",
		"name":                "workers_ingress_cluster_primary",
		"provider_config_key": "module.eks:aws",
		"provisioners":        [],
		"type":                "aws_security_group_rule",
	},
	"module.eks.aws_security_group_rule.workers_ingress_self": {
		"address": "module.eks.aws_security_group_rule.workers_ingress_self",
		"config": {
			"description": {
				"constant_value": "Allow node to communicate with each other.",
			},
			"from_port": {
				"constant_value": 0,
			},
			"protocol": {
				"constant_value": "-1",
			},
			"security_group_id": {
				"references": [
					"local.worker_security_group_id",
				],
			},
			"source_security_group_id": {
				"references": [
					"local.worker_security_group_id",
				],
			},
			"to_port": {
				"constant_value": 65535,
			},
			"type": {
				"constant_value": "ingress",
			},
		},
		"count": {
			"references": [
				"var.worker_create_security_group",
				"var.create_eks",
			],
		},
		"depends_on":          [],
		"for_each":            {},
		"mode":                "managed",
		"module_address":      "module.eks",
		"name":                "workers_ingress_self",
		"provider_config_key": "module.eks:aws",
		"provisioners":        [],
		"type":                "aws_security_group_rule",
	},
	"module.eks.data.aws_ami.eks_worker": {
		"address": "module.eks.data.aws_ami.eks_worker",
		"config": {
			"filter": [
				{
					"name": {
						"constant_value": "name",
					},
					"values": {
						"references": [
							"local.worker_ami_name_filter",
						],
					},
				},
			],
			"most_recent": {
				"constant_value": true,
			},
			"owners": {
				"references": [
					"var.worker_ami_owner_id",
				],
			},
		},
		"count": {
			"references": [
				"local.worker_groups_platforms",
			],
		},
		"depends_on":          [],
		"for_each":            {},
		"mode":                "data",
		"module_address":      "module.eks",
		"name":                "eks_worker",
		"provider_config_key": "module.eks:aws",
		"provisioners":        [],
		"type":                "aws_ami",
	},
	"module.eks.data.aws_ami.eks_worker_windows": {
		"address": "module.eks.data.aws_ami.eks_worker_windows",
		"config": {
			"filter": [
				{
					"name": {
						"constant_value": "name",
					},
					"values": {
						"references": [
							"local.worker_ami_name_filter_windows",
						],
					},
				},
				{
					"name": {
						"constant_value": "platform",
					},
					"values": {
						"constant_value": [
							"windows",
						],
					},
				},
			],
			"most_recent": {
				"constant_value": true,
			},
			"owners": {
				"references": [
					"var.worker_ami_owner_id_windows",
				],
			},
		},
		"count": {
			"references": [
				"local.worker_groups_platforms",
			],
		},
		"depends_on":          [],
		"for_each":            {},
		"mode":                "data",
		"module_address":      "module.eks",
		"name":                "eks_worker_windows",
		"provider_config_key": "module.eks:aws",
		"provisioners":        [],
		"type":                "aws_ami",
	},
	"module.eks.data.aws_caller_identity.current": {
		"address":             "module.eks.data.aws_caller_identity.current",
		"config":              {},
		"count":               {},
		"depends_on":          [],
		"for_each":            {},
		"mode":                "data",
		"module_address":      "module.eks",
		"name":                "current",
		"provider_config_key": "module.eks:aws",
		"provisioners":        [],
		"type":                "aws_caller_identity",
	},
	"module.eks.data.aws_iam_instance_profile.custom_worker_group_iam_instance_profile": {
		"address": "module.eks.data.aws_iam_instance_profile.custom_worker_group_iam_instance_profile",
		"config": {
			"name": {
				"references": [
					"var.worker_groups",
					"count.index",
					"local.workers_group_defaults[\"iam_instance_profile_name\"]",
					"local.workers_group_defaults",
				],
			},
		},
		"count": {
			"references": [
				"var.manage_worker_iam_resources",
				"local.worker_group_launch_configuration_count",
			],
		},
		"depends_on":          [],
		"for_each":            {},
		"mode":                "data",
		"module_address":      "module.eks",
		"name":                "custom_worker_group_iam_instance_profile",
		"provider_config_key": "module.eks:aws",
		"provisioners":        [],
		"type":                "aws_iam_instance_profile",
	},
	"module.eks.data.aws_iam_instance_profile.custom_worker_group_launch_template_iam_instance_profile": {
		"address": "module.eks.data.aws_iam_instance_profile.custom_worker_group_launch_template_iam_instance_profile",
		"config": {
			"name": {
				"references": [
					"var.worker_groups_launch_template",
					"count.index",
					"local.workers_group_defaults[\"iam_instance_profile_name\"]",
					"local.workers_group_defaults",
				],
			},
		},
		"count": {
			"references": [
				"var.manage_worker_iam_resources",
				"local.worker_group_launch_template_count",
			],
		},
		"depends_on":          [],
		"for_each":            {},
		"mode":                "data",
		"module_address":      "module.eks",
		"name":                "custom_worker_group_launch_template_iam_instance_profile",
		"provider_config_key": "module.eks:aws",
		"provisioners":        [],
		"type":                "aws_iam_instance_profile",
	},
	"module.eks.data.aws_iam_policy_document.cluster_assume_role_policy": {
		"address": "module.eks.data.aws_iam_policy_document.cluster_assume_role_policy",
		"config": {
			"statement": [
				{
					"actions": {
						"constant_value": [
							"sts:AssumeRole",
						],
					},
					"principals": [
						{
							"identifiers": {
								"constant_value": [
									"eks.amazonaws.com",
								],
							},
							"type": {
								"constant_value": "Service",
							},
						},
					],
					"sid": {
						"constant_value": "EKSClusterAssumeRole",
					},
				},
			],
		},
		"count":               {},
		"depends_on":          [],
		"for_each":            {},
		"mode":                "data",
		"module_address":      "module.eks",
		"name":                "cluster_assume_role_policy",
		"provider_config_key": "module.eks:aws",
		"provisioners":        [],
		"type":                "aws_iam_policy_document",
	},
	"module.eks.data.aws_iam_policy_document.cluster_deny_log_group": {
		"address": "module.eks.data.aws_iam_policy_document.cluster_deny_log_group",
		"config": {
			"statement": [
				{
					"actions": {
						"constant_value": [
							"logs:CreateLogGroup",
						],
					},
					"effect": {
						"constant_value": "Deny",
					},
					"resources": {
						"constant_value": [
							"*",
						],
					},
				},
			],
		},
		"count": {
			"references": [
				"var.manage_cluster_iam_resources",
				"var.create_eks",
			],
		},
		"depends_on":          [],
		"for_each":            {},
		"mode":                "data",
		"module_address":      "module.eks",
		"name":                "cluster_deny_log_group",
		"provider_config_key": "module.eks:aws",
		"provisioners":        [],
		"type":                "aws_iam_policy_document",
	},
	"module.eks.data.aws_iam_policy_document.cluster_elb_sl_role_creation": {
		"address": "module.eks.data.aws_iam_policy_document.cluster_elb_sl_role_creation",
		"config": {
			"statement": [
				{
					"actions": {
						"constant_value": [
							"ec2:DescribeAccountAttributes",
							"ec2:DescribeInternetGateways",
							"ec2:DescribeAddresses",
						],
					},
					"effect": {
						"constant_value": "Allow",
					},
					"resources": {
						"constant_value": [
							"*",
						],
					},
				},
			],
		},
		"count": {
			"references": [
				"var.manage_cluster_iam_resources",
				"var.create_eks",
			],
		},
		"depends_on":          [],
		"for_each":            {},
		"mode":                "data",
		"module_address":      "module.eks",
		"name":                "cluster_elb_sl_role_creation",
		"provider_config_key": "module.eks:aws",
		"provisioners":        [],
		"type":                "aws_iam_policy_document",
	},
	"module.eks.data.aws_iam_policy_document.workers_assume_role_policy": {
		"address": "module.eks.data.aws_iam_policy_document.workers_assume_role_policy",
		"config": {
			"statement": [
				{
					"actions": {
						"constant_value": [
							"sts:AssumeRole",
						],
					},
					"principals": [
						{
							"identifiers": {
								"references": [
									"local.ec2_principal",
								],
							},
							"type": {
								"constant_value": "Service",
							},
						},
					],
					"sid": {
						"constant_value": "EKSWorkerAssumeRole",
					},
				},
			],
		},
		"count":               {},
		"depends_on":          [],
		"for_each":            {},
		"mode":                "data",
		"module_address":      "module.eks",
		"name":                "workers_assume_role_policy",
		"provider_config_key": "module.eks:aws",
		"provisioners":        [],
		"type":                "aws_iam_policy_document",
	},
	"module.eks.data.aws_iam_role.custom_cluster_iam_role": {
		"address": "module.eks.data.aws_iam_role.custom_cluster_iam_role",
		"config": {
			"name": {
				"references": [
					"var.cluster_iam_role_name",
				],
			},
		},
		"count": {
			"references": [
				"var.manage_cluster_iam_resources",
			],
		},
		"depends_on":          [],
		"for_each":            {},
		"mode":                "data",
		"module_address":      "module.eks",
		"name":                "custom_cluster_iam_role",
		"provider_config_key": "module.eks:aws",
		"provisioners":        [],
		"type":                "aws_iam_role",
	},
	"module.eks.data.aws_partition.current": {
		"address":             "module.eks.data.aws_partition.current",
		"config":              {},
		"count":               {},
		"depends_on":          [],
		"for_each":            {},
		"mode":                "data",
		"module_address":      "module.eks",
		"name":                "current",
		"provider_config_key": "module.eks:aws",
		"provisioners":        [],
		"type":                "aws_partition",
	},
	"module.eks.data.http.wait_for_cluster": {
		"address": "module.eks.data.http.wait_for_cluster",
		"config": {
			"ca_certificate": {
				"references": [
					"local.cluster_auth_base64",
				],
			},
			"timeout": {
				"references": [
					"var.wait_for_cluster_timeout",
				],
			},
			"url": {
				"references": [
					"aws_eks_cluster.this[0].endpoint",
					"aws_eks_cluster.this[0]",
					"aws_eks_cluster.this",
				],
			},
		},
		"count": {
			"references": [
				"var.create_eks",
				"var.manage_aws_auth",
			],
		},
		"depends_on": [
			"aws_eks_cluster.this",
			"aws_security_group_rule.cluster_private_access_sg_source",
			"aws_security_group_rule.cluster_private_access_cidrs_source",
		],
		"for_each":            {},
		"mode":                "data",
		"module_address":      "module.eks",
		"name":                "wait_for_cluster",
		"provider_config_key": "module.eks:http",
		"provisioners":        [],
		"type":                "http",
	},
	"module.eks.kubernetes_config_map.aws_auth": {
		"address": "module.eks.kubernetes_config_map.aws_auth",
		"config": {
			"data": {
				"references": [
					"local.configmap_roles",
					"var.map_roles",
					"var.map_users",
					"var.map_accounts",
				],
			},
			"metadata": [
				{
					"labels": {
						"references": [
							"var.aws_auth_additional_labels",
						],
					},
					"name": {
						"constant_value": "aws-auth",
					},
					"namespace": {
						"constant_value": "kube-system",
					},
				},
			],
		},
		"count": {
			"references": [
				"var.create_eks",
				"var.manage_aws_auth",
			],
		},
		"depends_on": [
			"data.http.wait_for_cluster[0]",
		],
		"for_each":            {},
		"mode":                "managed",
		"module_address":      "module.eks",
		"name":                "aws_auth",
		"provider_config_key": "module.eks:kubernetes",
		"provisioners":        [],
		"type":                "kubernetes_config_map",
	},
	"module.eks.local_file.kubeconfig": {
		"address": "module.eks.local_file.kubeconfig",
		"config": {
			"content": {
				"references": [
					"local.kubeconfig",
				],
			},
			"directory_permission": {
				"constant_value": "0755",
			},
			"file_permission": {
				"references": [
					"var.kubeconfig_file_permission",
				],
			},
			"filename": {
				"references": [
					"var.kubeconfig_output_path",
					"var.kubeconfig_output_path",
					"var.cluster_name",
					"var.kubeconfig_output_path",
				],
			},
		},
		"count": {
			"references": [
				"var.write_kubeconfig",
				"var.create_eks",
			],
		},
		"depends_on":          [],
		"for_each":            {},
		"mode":                "managed",
		"module_address":      "module.eks",
		"name":                "kubeconfig",
		"provider_config_key": "module.eks:local",
		"provisioners":        [],
		"type":                "local_file",
	},
	"module.eks.module.fargate.aws_eks_fargate_profile.this": {
		"address": "module.eks.module.fargate.aws_eks_fargate_profile.this",
		"config": {
			"cluster_name": {
				"references": [
					"var.cluster_name",
				],
			},
			"fargate_profile_name": {
				"references": [
					"each.value",
					"var.cluster_name",
					"each.key",
				],
			},
			"pod_execution_role_arn": {
				"references": [
					"local.pod_execution_role_arn",
				],
			},
			"subnet_ids": {
				"references": [
					"each.value",
					"var.subnets",
				],
			},
			"tags": {
				"references": [
					"var.tags",
					"each.value",
				],
			},
			"timeouts": {
				"constant_value": null,
			},
		},
		"count":      {},
		"depends_on": [],
		"for_each": {
			"references": [
				"local.fargate_profiles",
			],
		},
		"mode":                "managed",
		"module_address":      "module.eks.module.fargate",
		"name":                "this",
		"provider_config_key": "module.eks.module.fargate:aws",
		"provisioners":        [],
		"type":                "aws_eks_fargate_profile",
	},
	"module.eks.module.fargate.aws_iam_role.eks_fargate_pod": {
		"address": "module.eks.module.fargate.aws_iam_role.eks_fargate_pod",
		"config": {
			"assume_role_policy": {
				"references": [
					"data.aws_iam_policy_document.eks_fargate_pod_assume_role[0].json",
					"data.aws_iam_policy_document.eks_fargate_pod_assume_role[0]",
					"data.aws_iam_policy_document.eks_fargate_pod_assume_role",
				],
			},
			"name_prefix": {
				"references": [
					"var.cluster_name",
				],
			},
			"path": {
				"references": [
					"var.iam_path",
				],
			},
			"permissions_boundary": {
				"references": [
					"var.permissions_boundary",
				],
			},
			"tags": {
				"references": [
					"var.tags",
				],
			},
		},
		"count": {
			"references": [
				"local.create_eks",
				"var.create_fargate_pod_execution_role",
			],
		},
		"depends_on":          [],
		"for_each":            {},
		"mode":                "managed",
		"module_address":      "module.eks.module.fargate",
		"name":                "eks_fargate_pod",
		"provider_config_key": "module.eks.module.fargate:aws",
		"provisioners":        [],
		"type":                "aws_iam_role",
	},
	"module.eks.module.fargate.aws_iam_role_policy_attachment.eks_fargate_pod": {
		"address": "module.eks.module.fargate.aws_iam_role_policy_attachment.eks_fargate_pod",
		"config": {
			"policy_arn": {
				"references": [
					"data.aws_partition.current.partition",
					"data.aws_partition.current",
				],
			},
			"role": {
				"references": [
					"aws_iam_role.eks_fargate_pod[0].name",
					"aws_iam_role.eks_fargate_pod[0]",
					"aws_iam_role.eks_fargate_pod",
				],
			},
		},
		"count": {
			"references": [
				"local.create_eks",
				"var.create_fargate_pod_execution_role",
			],
		},
		"depends_on":          [],
		"for_each":            {},
		"mode":                "managed",
		"module_address":      "module.eks.module.fargate",
		"name":                "eks_fargate_pod",
		"provider_config_key": "module.eks.module.fargate:aws",
		"provisioners":        [],
		"type":                "aws_iam_role_policy_attachment",
	},
	"module.eks.module.fargate.data.aws_iam_policy_document.eks_fargate_pod_assume_role": {
		"address": "module.eks.module.fargate.data.aws_iam_policy_document.eks_fargate_pod_assume_role",
		"config": {
			"statement": [
				{
					"actions": {
						"constant_value": [
							"sts:AssumeRole",
						],
					},
					"effect": {
						"constant_value": "Allow",
					},
					"principals": [
						{
							"identifiers": {
								"constant_value": [
									"eks-fargate-pods.amazonaws.com",
								],
							},
							"type": {
								"constant_value": "Service",
							},
						},
					],
				},
			],
		},
		"count": {
			"references": [
				"local.create_eks",
				"var.create_fargate_pod_execution_role",
			],
		},
		"depends_on":          [],
		"for_each":            {},
		"mode":                "data",
		"module_address":      "module.eks.module.fargate",
		"name":                "eks_fargate_pod_assume_role",
		"provider_config_key": "module.eks.module.fargate:aws",
		"provisioners":        [],
		"type":                "aws_iam_policy_document",
	},
	"module.eks.module.fargate.data.aws_iam_role.custom_fargate_iam_role": {
		"address": "module.eks.module.fargate.data.aws_iam_role.custom_fargate_iam_role",
		"config": {
			"name": {
				"references": [
					"var.fargate_pod_execution_role_name",
				],
			},
		},
		"count": {
			"references": [
				"local.create_eks",
				"var.create_fargate_pod_execution_role",
			],
		},
		"depends_on":          [],
		"for_each":            {},
		"mode":                "data",
		"module_address":      "module.eks.module.fargate",
		"name":                "custom_fargate_iam_role",
		"provider_config_key": "module.eks.module.fargate:aws",
		"provisioners":        [],
		"type":                "aws_iam_role",
	},
	"module.eks.module.fargate.data.aws_partition.current": {
		"address":             "module.eks.module.fargate.data.aws_partition.current",
		"config":              {},
		"count":               {},
		"depends_on":          [],
		"for_each":            {},
		"mode":                "data",
		"module_address":      "module.eks.module.fargate",
		"name":                "current",
		"provider_config_key": "module.eks.module.fargate:aws",
		"provisioners":        [],
		"type":                "aws_partition",
	},
	"module.eks.module.node_groups.aws_eks_node_group.workers": {
		"address": "module.eks.module.node_groups.aws_eks_node_group.workers",
		"config": {
			"ami_type": {
				"references": [
					"each.value",
				],
			},
			"capacity_type": {
				"references": [
					"each.value",
				],
			},
			"cluster_name": {
				"references": [
					"var.cluster_name",
				],
			},
			"disk_size": {
				"references": [
					"each.value[\"launch_template_id\"]",
					"each.value",
					"each.value[\"create_launch_template\"]",
					"each.value",
					"each.value",
				],
			},
			"force_update_version": {
				"references": [
					"each.value",
				],
			},
			"instance_types": {
				"references": [
					"each.value[\"set_instance_types_on_lt\"]",
					"each.value",
					"each.value[\"instance_types\"]",
					"each.value",
				],
			},
			"labels": {
				"references": [
					"var.node_groups_defaults",
					"var.node_groups",
					"each.key",
				],
			},
			"node_group_name": {
				"references": [
					"each.value",
				],
			},
			"node_group_name_prefix": {
				"references": [
					"each.value",
					"local.node_groups_names",
					"each.key",
				],
			},
			"node_role_arn": {
				"references": [
					"each.value[\"iam_role_arn\"]",
					"each.value",
				],
			},
			"release_version": {
				"references": [
					"each.value",
				],
			},
			"scaling_config": [
				{
					"desired_size": {
						"references": [
							"each.value[\"desired_capacity\"]",
							"each.value",
						],
					},
					"max_size": {
						"references": [
							"each.value[\"max_capacity\"]",
							"each.value",
						],
					},
					"min_size": {
						"references": [
							"each.value[\"min_capacity\"]",
							"each.value",
						],
					},
				},
			],
			"subnet_ids": {
				"references": [
					"each.value[\"subnets\"]",
					"each.value",
				],
			},
			"tags": {
				"references": [
					"var.tags",
					"var.node_groups_defaults",
					"var.node_groups",
					"each.key",
				],
			},
			"timeouts": {
				"constant_value": null,
			},
			"version": {
				"references": [
					"each.value",
				],
			},
		},
		"count":      {},
		"depends_on": [],
		"for_each": {
			"references": [
				"local.node_groups_expanded",
			],
		},
		"mode":                "managed",
		"module_address":      "module.eks.module.node_groups",
		"name":                "workers",
		"provider_config_key": "module.eks.module.node_groups:aws",
		"provisioners":        [],
		"type":                "aws_eks_node_group",
	},
	"module.eks.module.node_groups.aws_launch_template.workers": {
		"address": "module.eks.module.node_groups.aws_launch_template.workers",
		"config": {
			"block_device_mappings": [
				{
					"device_name": {
						"constant_value": "/dev/xvda",
					},
					"ebs": [
						{
							"delete_on_termination": {
								"constant_value": true,
							},
							"encrypted": {
								"references": [
									"each.value",
								],
							},
							"iops": {
								"references": [
									"each.value",
								],
							},
							"kms_key_id": {
								"references": [
									"each.value",
								],
							},
							"throughput": {
								"references": [
									"each.value",
								],
							},
							"volume_size": {
								"references": [
									"each.value",
								],
							},
							"volume_type": {
								"references": [
									"each.value",
								],
							},
						},
					],
				},
			],
			"description": {
				"references": [
					"local.node_groups_names",
					"each.key",
				],
			},
			"ebs_optimized": {
				"references": [
					"each.value",
					"var.ebs_optimized_not_supported",
					"each.value.instance_types",
					"each.value",
				],
			},
			"image_id": {
				"references": [
					"each.value",
				],
			},
			"instance_type": {
				"references": [
					"each.value[\"set_instance_types_on_lt\"]",
					"each.value",
					"each.value.instance_types",
					"each.value",
				],
			},
			"key_name": {
				"references": [
					"each.value",
				],
			},
			"metadata_options": [
				{
					"http_endpoint": {
						"references": [
							"each.value",
						],
					},
					"http_put_response_hop_limit": {
						"references": [
							"each.value",
						],
					},
					"http_tokens": {
						"references": [
							"each.value",
						],
					},
				},
			],
			"monitoring": [
				{
					"enabled": {
						"references": [
							"each.value",
						],
					},
				},
			],
			"name_prefix": {
				"references": [
					"local.node_groups_names",
					"each.key",
				],
			},
			"network_interfaces": [
				{
					"associate_public_ip_address": {
						"references": [
							"each.value",
						],
					},
					"delete_on_termination": {
						"references": [
							"each.value",
						],
					},
					"security_groups": {
						"references": [
							"var.worker_security_group_id",
							"var.worker_additional_security_group_ids",
							"each.value",
						],
					},
				},
			],
			"tag_specifications": [
				{
					"resource_type": {
						"constant_value": "instance",
					},
					"tags": {
						"references": [
							"var.tags",
							"local.node_groups_names",
							"each.key",
							"var.node_groups_defaults",
							"var.node_groups",
							"each.key",
						],
					},
				},
				{
					"resource_type": {
						"constant_value": "volume",
					},
					"tags": {
						"references": [
							"var.tags",
							"local.node_groups_names",
							"each.key",
							"var.node_groups_defaults",
							"var.node_groups",
							"each.key",
						],
					},
				},
				{
					"resource_type": {
						"constant_value": "network-interface",
					},
					"tags": {
						"references": [
							"var.tags",
							"local.node_groups_names",
							"each.key",
							"var.node_groups_defaults",
							"var.node_groups",
							"each.key",
						],
					},
				},
			],
			"tags": {
				"references": [
					"var.tags",
					"var.node_groups_defaults",
					"var.node_groups",
					"each.key",
				],
			},
			"update_default_version": {
				"references": [
					"each.value",
				],
			},
			"user_data": {
				"references": [
					"data.cloudinit_config.workers_userdata",
					"each.key",
				],
			},
		},
		"count":      {},
		"depends_on": [],
		"for_each": {
			"references": [
				"local.node_groups_expanded",
			],
		},
		"mode":                "managed",
		"module_address":      "module.eks.module.node_groups",
		"name":                "workers",
		"provider_config_key": "module.eks.module.node_groups:aws",
		"provisioners":        [],
		"type":                "aws_launch_template",
	},
	"module.eks.module.node_groups.data.cloudinit_config.workers_userdata": {
		"address": "module.eks.module.node_groups.data.cloudinit_config.workers_userdata",
		"config": {
			"base64_encode": {
				"constant_value": true,
			},
			"boundary": {
				"constant_value": "//",
			},
			"gzip": {
				"constant_value": false,
			},
			"part": [
				{
					"content": {
						"references": [
							"path.module",
							"var.cluster_name",
							"var.cluster_endpoint",
							"var.cluster_auth_base64",
							"each.value",
							"each.value[\"ami_is_eks_optimized\"]",
							"each.value",
							"each.value[\"bootstrap_env\"]",
							"each.value",
							"each.value[\"kubelet_extra_args\"]",
							"each.value",
							"each.value[\"pre_userdata\"]",
							"each.value",
							"each.value",
							"each.value",
							"each.value",
						],
					},
					"content_type": {
						"constant_value": "text/x-shellscript",
					},
				},
			],
		},
		"count":      {},
		"depends_on": [],
		"for_each": {
			"references": [
				"local.node_groups_expanded",
			],
		},
		"mode":                "data",
		"module_address":      "module.eks.module.node_groups",
		"name":                "workers_userdata",
		"provider_config_key": "module.eks.module.node_groups:cloudinit",
		"provisioners":        [],
		"type":                "cloudinit_config",
	},
	"module.vpc.aws_cloudwatch_log_group.flow_log": {
		"address": "module.vpc.aws_cloudwatch_log_group.flow_log",
		"config": {
			"kms_key_id": {
				"references": [
					"var.flow_log_cloudwatch_log_group_kms_key_id",
				],
			},
			"name": {
				"references": [
					"var.flow_log_cloudwatch_log_group_name_prefix",
					"local.vpc_id",
				],
			},
			"retention_in_days": {
				"references": [
					"var.flow_log_cloudwatch_log_group_retention_in_days",
				],
			},
			"tags": {
				"references": [
					"var.tags",
					"var.vpc_flow_log_tags",
				],
			},
		},
		"count": {
			"references": [
				"local.create_flow_log_cloudwatch_log_group",
			],
		},
		"depends_on":          [],
		"for_each":            {},
		"mode":                "managed",
		"module_address":      "module.vpc",
		"name":                "flow_log",
		"provider_config_key": "module.vpc:aws",
		"provisioners":        [],
		"type":                "aws_cloudwatch_log_group",
	},
	"module.vpc.aws_customer_gateway.this": {
		"address": "module.vpc.aws_customer_gateway.this",
		"config": {
			"bgp_asn": {
				"references": [
					"each.value[\"bgp_asn\"]",
					"each.value",
				],
			},
			"ip_address": {
				"references": [
					"each.value[\"ip_address\"]",
					"each.value",
				],
			},
			"tags": {
				"references": [
					"var.name",
					"each.key",
					"var.tags",
					"var.customer_gateway_tags",
				],
			},
			"type": {
				"constant_value": "ipsec.1",
			},
		},
		"count":      {},
		"depends_on": [],
		"for_each": {
			"references": [
				"var.customer_gateways",
			],
		},
		"mode":                "managed",
		"module_address":      "module.vpc",
		"name":                "this",
		"provider_config_key": "module.vpc:aws",
		"provisioners":        [],
		"type":                "aws_customer_gateway",
	},
	"module.vpc.aws_db_subnet_group.database": {
		"address": "module.vpc.aws_db_subnet_group.database",
		"config": {
			"description": {
				"references": [
					"var.name",
				],
			},
			"name": {
				"references": [
					"var.database_subnet_group_name",
					"var.name",
				],
			},
			"subnet_ids": {
				"references": [
					"aws_subnet.database",
				],
			},
			"tags": {
				"references": [
					"var.database_subnet_group_name",
					"var.name",
					"var.tags",
					"var.database_subnet_group_tags",
				],
			},
		},
		"count": {
			"references": [
				"var.create_vpc",
				"var.database_subnets",
				"var.create_database_subnet_group",
			],
		},
		"depends_on":          [],
		"for_each":            {},
		"mode":                "managed",
		"module_address":      "module.vpc",
		"name":                "database",
		"provider_config_key": "module.vpc:aws",
		"provisioners":        [],
		"type":                "aws_db_subnet_group",
	},
	"module.vpc.aws_default_network_acl.this": {
		"address": "module.vpc.aws_default_network_acl.this",
		"config": {
			"default_network_acl_id": {
				"references": [
					"aws_vpc.this",
				],
			},
			"subnet_ids": {
				"references": [
					"aws_subnet.public",
					"aws_subnet.private",
					"aws_subnet.intra",
					"aws_subnet.database",
					"aws_subnet.redshift",
					"aws_subnet.elasticache",
					"aws_subnet.outpost",
					"aws_network_acl.public",
					"aws_network_acl.private",
					"aws_network_acl.intra",
					"aws_network_acl.database",
					"aws_network_acl.redshift",
					"aws_network_acl.elasticache",
					"aws_network_acl.outpost",
				],
			},
			"tags": {
				"references": [
					"var.default_network_acl_name",
					"var.tags",
					"var.default_network_acl_tags",
				],
			},
		},
		"count": {
			"references": [
				"var.create_vpc",
				"var.manage_default_network_acl",
			],
		},
		"depends_on":          [],
		"for_each":            {},
		"mode":                "managed",
		"module_address":      "module.vpc",
		"name":                "this",
		"provider_config_key": "module.vpc:aws",
		"provisioners":        [],
		"type":                "aws_default_network_acl",
	},
	"module.vpc.aws_default_route_table.default": {
		"address": "module.vpc.aws_default_route_table.default",
		"config": {
			"default_route_table_id": {
				"references": [
					"aws_vpc.this[0].default_route_table_id",
					"aws_vpc.this[0]",
					"aws_vpc.this",
				],
			},
			"propagating_vgws": {
				"references": [
					"var.default_route_table_propagating_vgws",
				],
			},
			"tags": {
				"references": [
					"var.name",
					"var.tags",
					"var.default_route_table_tags",
				],
			},
		},
		"count": {
			"references": [
				"var.create_vpc",
				"var.manage_default_route_table",
			],
		},
		"depends_on":          [],
		"for_each":            {},
		"mode":                "managed",
		"module_address":      "module.vpc",
		"name":                "default",
		"provider_config_key": "module.vpc:aws",
		"provisioners":        [],
		"type":                "aws_default_route_table",
	},
	"module.vpc.aws_default_security_group.this": {
		"address": "module.vpc.aws_default_security_group.this",
		"config": {
			"tags": {
				"references": [
					"var.default_security_group_name",
					"var.tags",
					"var.default_security_group_tags",
				],
			},
			"vpc_id": {
				"references": [
					"aws_vpc.this[0].id",
					"aws_vpc.this[0]",
					"aws_vpc.this",
				],
			},
		},
		"count": {
			"references": [
				"var.create_vpc",
				"var.manage_default_security_group",
			],
		},
		"depends_on":          [],
		"for_each":            {},
		"mode":                "managed",
		"module_address":      "module.vpc",
		"name":                "this",
		"provider_config_key": "module.vpc:aws",
		"provisioners":        [],
		"type":                "aws_default_security_group",
	},
	"module.vpc.aws_default_vpc.this": {
		"address": "module.vpc.aws_default_vpc.this",
		"config": {
			"enable_classiclink": {
				"references": [
					"var.default_vpc_enable_classiclink",
				],
			},
			"enable_dns_hostnames": {
				"references": [
					"var.default_vpc_enable_dns_hostnames",
				],
			},
			"enable_dns_support": {
				"references": [
					"var.default_vpc_enable_dns_support",
				],
			},
			"tags": {
				"references": [
					"var.default_vpc_name",
					"var.tags",
					"var.default_vpc_tags",
				],
			},
		},
		"count": {
			"references": [
				"var.manage_default_vpc",
			],
		},
		"depends_on":          [],
		"for_each":            {},
		"mode":                "managed",
		"module_address":      "module.vpc",
		"name":                "this",
		"provider_config_key": "module.vpc:aws",
		"provisioners":        [],
		"type":                "aws_default_vpc",
	},
	"module.vpc.aws_egress_only_internet_gateway.this": {
		"address": "module.vpc.aws_egress_only_internet_gateway.this",
		"config": {
			"tags": {
				"references": [
					"var.name",
					"var.tags",
					"var.igw_tags",
				],
			},
			"vpc_id": {
				"references": [
					"local.vpc_id",
				],
			},
		},
		"count": {
			"references": [
				"var.create_vpc",
				"var.create_egress_only_igw",
				"var.enable_ipv6",
				"local.max_subnet_length",
			],
		},
		"depends_on":          [],
		"for_each":            {},
		"mode":                "managed",
		"module_address":      "module.vpc",
		"name":                "this",
		"provider_config_key": "module.vpc:aws",
		"provisioners":        [],
		"type":                "aws_egress_only_internet_gateway",
	},
	"module.vpc.aws_eip.nat": {
		"address": "module.vpc.aws_eip.nat",
		"config": {
			"tags": {
				"references": [
					"var.name",
					"var.azs",
					"var.single_nat_gateway",
					"count.index",
					"var.tags",
					"var.nat_eip_tags",
				],
			},
			"vpc": {
				"constant_value": true,
			},
		},
		"count": {
			"references": [
				"var.create_vpc",
				"var.enable_nat_gateway",
				"var.reuse_nat_ips",
				"local.nat_gateway_count",
			],
		},
		"depends_on":          [],
		"for_each":            {},
		"mode":                "managed",
		"module_address":      "module.vpc",
		"name":                "nat",
		"provider_config_key": "module.vpc:aws",
		"provisioners":        [],
		"type":                "aws_eip",
	},
	"module.vpc.aws_elasticache_subnet_group.elasticache": {
		"address": "module.vpc.aws_elasticache_subnet_group.elasticache",
		"config": {
			"description": {
				"references": [
					"var.name",
				],
			},
			"name": {
				"references": [
					"var.name",
				],
			},
			"subnet_ids": {
				"references": [
					"aws_subnet.elasticache",
				],
			},
		},
		"count": {
			"references": [
				"var.create_vpc",
				"var.elasticache_subnets",
				"var.create_elasticache_subnet_group",
			],
		},
		"depends_on":          [],
		"for_each":            {},
		"mode":                "managed",
		"module_address":      "module.vpc",
		"name":                "elasticache",
		"provider_config_key": "module.vpc:aws",
		"provisioners":        [],
		"type":                "aws_elasticache_subnet_group",
	},
	"module.vpc.aws_flow_log.this": {
		"address": "module.vpc.aws_flow_log.this",
		"config": {
			"iam_role_arn": {
				"references": [
					"local.flow_log_iam_role_arn",
				],
			},
			"log_destination": {
				"references": [
					"local.flow_log_destination_arn",
				],
			},
			"log_destination_type": {
				"references": [
					"var.flow_log_destination_type",
				],
			},
			"log_format": {
				"references": [
					"var.flow_log_log_format",
				],
			},
			"max_aggregation_interval": {
				"references": [
					"var.flow_log_max_aggregation_interval",
				],
			},
			"tags": {
				"references": [
					"var.tags",
					"var.vpc_flow_log_tags",
				],
			},
			"traffic_type": {
				"references": [
					"var.flow_log_traffic_type",
				],
			},
			"vpc_id": {
				"references": [
					"local.vpc_id",
				],
			},
		},
		"count": {
			"references": [
				"local.enable_flow_log",
			],
		},
		"depends_on":          [],
		"for_each":            {},
		"mode":                "managed",
		"module_address":      "module.vpc",
		"name":                "this",
		"provider_config_key": "module.vpc:aws",
		"provisioners":        [],
		"type":                "aws_flow_log",
	},
	"module.vpc.aws_iam_policy.vpc_flow_log_cloudwatch": {
		"address": "module.vpc.aws_iam_policy.vpc_flow_log_cloudwatch",
		"config": {
			"name_prefix": {
				"constant_value": "vpc-flow-log-to-cloudwatch-",
			},
			"policy": {
				"references": [
					"data.aws_iam_policy_document.vpc_flow_log_cloudwatch[0].json",
					"data.aws_iam_policy_document.vpc_flow_log_cloudwatch[0]",
					"data.aws_iam_policy_document.vpc_flow_log_cloudwatch",
				],
			},
		},
		"count": {
			"references": [
				"local.create_flow_log_cloudwatch_iam_role",
			],
		},
		"depends_on":          [],
		"for_each":            {},
		"mode":                "managed",
		"module_address":      "module.vpc",
		"name":                "vpc_flow_log_cloudwatch",
		"provider_config_key": "module.vpc:aws",
		"provisioners":        [],
		"type":                "aws_iam_policy",
	},
	"module.vpc.aws_iam_role.vpc_flow_log_cloudwatch": {
		"address": "module.vpc.aws_iam_role.vpc_flow_log_cloudwatch",
		"config": {
			"assume_role_policy": {
				"references": [
					"data.aws_iam_policy_document.flow_log_cloudwatch_assume_role[0].json",
					"data.aws_iam_policy_document.flow_log_cloudwatch_assume_role[0]",
					"data.aws_iam_policy_document.flow_log_cloudwatch_assume_role",
				],
			},
			"name_prefix": {
				"constant_value": "vpc-flow-log-role-",
			},
			"permissions_boundary": {
				"references": [
					"var.vpc_flow_log_permissions_boundary",
				],
			},
			"tags": {
				"references": [
					"var.tags",
					"var.vpc_flow_log_tags",
				],
			},
		},
		"count": {
			"references": [
				"local.create_flow_log_cloudwatch_iam_role",
			],
		},
		"depends_on":          [],
		"for_each":            {},
		"mode":                "managed",
		"module_address":      "module.vpc",
		"name":                "vpc_flow_log_cloudwatch",
		"provider_config_key": "module.vpc:aws",
		"provisioners":        [],
		"type":                "aws_iam_role",
	},
	"module.vpc.aws_iam_role_policy_attachment.vpc_flow_log_cloudwatch": {
		"address": "module.vpc.aws_iam_role_policy_attachment.vpc_flow_log_cloudwatch",
		"config": {
			"policy_arn": {
				"references": [
					"aws_iam_policy.vpc_flow_log_cloudwatch[0].arn",
					"aws_iam_policy.vpc_flow_log_cloudwatch[0]",
					"aws_iam_policy.vpc_flow_log_cloudwatch",
				],
			},
			"role": {
				"references": [
					"aws_iam_role.vpc_flow_log_cloudwatch[0].name",
					"aws_iam_role.vpc_flow_log_cloudwatch[0]",
					"aws_iam_role.vpc_flow_log_cloudwatch",
				],
			},
		},
		"count": {
			"references": [
				"local.create_flow_log_cloudwatch_iam_role",
			],
		},
		"depends_on":          [],
		"for_each":            {},
		"mode":                "managed",
		"module_address":      "module.vpc",
		"name":                "vpc_flow_log_cloudwatch",
		"provider_config_key": "module.vpc:aws",
		"provisioners":        [],
		"type":                "aws_iam_role_policy_attachment",
	},
	"module.vpc.aws_internet_gateway.this": {
		"address": "module.vpc.aws_internet_gateway.this",
		"config": {
			"tags": {
				"references": [
					"var.name",
					"var.tags",
					"var.igw_tags",
				],
			},
			"vpc_id": {
				"references": [
					"local.vpc_id",
				],
			},
		},
		"count": {
			"references": [
				"var.create_vpc",
				"var.create_igw",
				"var.public_subnets",
			],
		},
		"depends_on":          [],
		"for_each":            {},
		"mode":                "managed",
		"module_address":      "module.vpc",
		"name":                "this",
		"provider_config_key": "module.vpc:aws",
		"provisioners":        [],
		"type":                "aws_internet_gateway",
	},
	"module.vpc.aws_nat_gateway.this": {
		"address": "module.vpc.aws_nat_gateway.this",
		"config": {
			"allocation_id": {
				"references": [
					"local.nat_gateway_ips",
					"var.single_nat_gateway",
					"count.index",
				],
			},
			"subnet_id": {
				"references": [
					"aws_subnet.public",
					"var.single_nat_gateway",
					"count.index",
				],
			},
			"tags": {
				"references": [
					"var.name",
					"var.azs",
					"var.single_nat_gateway",
					"count.index",
					"var.tags",
					"var.nat_gateway_tags",
				],
			},
		},
		"count": {
			"references": [
				"var.create_vpc",
				"var.enable_nat_gateway",
				"local.nat_gateway_count",
			],
		},
		"depends_on": [
			"aws_internet_gateway.this",
		],
		"for_each":            {},
		"mode":                "managed",
		"module_address":      "module.vpc",
		"name":                "this",
		"provider_config_key": "module.vpc:aws",
		"provisioners":        [],
		"type":                "aws_nat_gateway",
	},
	"module.vpc.aws_network_acl.database": {
		"address": "module.vpc.aws_network_acl.database",
		"config": {
			"subnet_ids": {
				"references": [
					"aws_subnet.database",
				],
			},
			"tags": {
				"references": [
					"var.database_subnet_suffix",
					"var.name",
					"var.tags",
					"var.database_acl_tags",
				],
			},
			"vpc_id": {
				"references": [
					"aws_vpc.this",
				],
			},
		},
		"count": {
			"references": [
				"var.create_vpc",
				"var.database_dedicated_network_acl",
				"var.database_subnets",
			],
		},
		"depends_on":          [],
		"for_each":            {},
		"mode":                "managed",
		"module_address":      "module.vpc",
		"name":                "database",
		"provider_config_key": "module.vpc:aws",
		"provisioners":        [],
		"type":                "aws_network_acl",
	},
	"module.vpc.aws_network_acl.elasticache": {
		"address": "module.vpc.aws_network_acl.elasticache",
		"config": {
			"subnet_ids": {
				"references": [
					"aws_subnet.elasticache",
				],
			},
			"tags": {
				"references": [
					"var.elasticache_subnet_suffix",
					"var.name",
					"var.tags",
					"var.elasticache_acl_tags",
				],
			},
			"vpc_id": {
				"references": [
					"aws_vpc.this",
				],
			},
		},
		"count": {
			"references": [
				"var.create_vpc",
				"var.elasticache_dedicated_network_acl",
				"var.elasticache_subnets",
			],
		},
		"depends_on":          [],
		"for_each":            {},
		"mode":                "managed",
		"module_address":      "module.vpc",
		"name":                "elasticache",
		"provider_config_key": "module.vpc:aws",
		"provisioners":        [],
		"type":                "aws_network_acl",
	},
	"module.vpc.aws_network_acl.intra": {
		"address": "module.vpc.aws_network_acl.intra",
		"config": {
			"subnet_ids": {
				"references": [
					"aws_subnet.intra",
				],
			},
			"tags": {
				"references": [
					"var.intra_subnet_suffix",
					"var.name",
					"var.tags",
					"var.intra_acl_tags",
				],
			},
			"vpc_id": {
				"references": [
					"aws_vpc.this",
				],
			},
		},
		"count": {
			"references": [
				"var.create_vpc",
				"var.intra_dedicated_network_acl",
				"var.intra_subnets",
			],
		},
		"depends_on":          [],
		"for_each":            {},
		"mode":                "managed",
		"module_address":      "module.vpc",
		"name":                "intra",
		"provider_config_key": "module.vpc:aws",
		"provisioners":        [],
		"type":                "aws_network_acl",
	},
	"module.vpc.aws_network_acl.outpost": {
		"address": "module.vpc.aws_network_acl.outpost",
		"config": {
			"subnet_ids": {
				"references": [
					"aws_subnet.outpost",
				],
			},
			"tags": {
				"references": [
					"var.outpost_subnet_suffix",
					"var.name",
					"var.tags",
					"var.outpost_acl_tags",
				],
			},
			"vpc_id": {
				"references": [
					"aws_vpc.this",
				],
			},
		},
		"count": {
			"references": [
				"var.create_vpc",
				"var.outpost_dedicated_network_acl",
				"var.outpost_subnets",
			],
		},
		"depends_on":          [],
		"for_each":            {},
		"mode":                "managed",
		"module_address":      "module.vpc",
		"name":                "outpost",
		"provider_config_key": "module.vpc:aws",
		"provisioners":        [],
		"type":                "aws_network_acl",
	},
	"module.vpc.aws_network_acl.private": {
		"address": "module.vpc.aws_network_acl.private",
		"config": {
			"subnet_ids": {
				"references": [
					"aws_subnet.private",
				],
			},
			"tags": {
				"references": [
					"var.private_subnet_suffix",
					"var.name",
					"var.tags",
					"var.private_acl_tags",
				],
			},
			"vpc_id": {
				"references": [
					"aws_vpc.this",
				],
			},
		},
		"count": {
			"references": [
				"var.create_vpc",
				"var.private_dedicated_network_acl",
				"var.private_subnets",
			],
		},
		"depends_on":          [],
		"for_each":            {},
		"mode":                "managed",
		"module_address":      "module.vpc",
		"name":                "private",
		"provider_config_key": "module.vpc:aws",
		"provisioners":        [],
		"type":                "aws_network_acl",
	},
	"module.vpc.aws_network_acl.public": {
		"address": "module.vpc.aws_network_acl.public",
		"config": {
			"subnet_ids": {
				"references": [
					"aws_subnet.public",
				],
			},
			"tags": {
				"references": [
					"var.public_subnet_suffix",
					"var.name",
					"var.tags",
					"var.public_acl_tags",
				],
			},
			"vpc_id": {
				"references": [
					"aws_vpc.this",
				],
			},
		},
		"count": {
			"references": [
				"var.create_vpc",
				"var.public_dedicated_network_acl",
				"var.public_subnets",
			],
		},
		"depends_on":          [],
		"for_each":            {},
		"mode":                "managed",
		"module_address":      "module.vpc",
		"name":                "public",
		"provider_config_key": "module.vpc:aws",
		"provisioners":        [],
		"type":                "aws_network_acl",
	},
	"module.vpc.aws_network_acl.redshift": {
		"address": "module.vpc.aws_network_acl.redshift",
		"config": {
			"subnet_ids": {
				"references": [
					"aws_subnet.redshift",
				],
			},
			"tags": {
				"references": [
					"var.redshift_subnet_suffix",
					"var.name",
					"var.tags",
					"var.redshift_acl_tags",
				],
			},
			"vpc_id": {
				"references": [
					"aws_vpc.this",
				],
			},
		},
		"count": {
			"references": [
				"var.create_vpc",
				"var.redshift_dedicated_network_acl",
				"var.redshift_subnets",
			],
		},
		"depends_on":          [],
		"for_each":            {},
		"mode":                "managed",
		"module_address":      "module.vpc",
		"name":                "redshift",
		"provider_config_key": "module.vpc:aws",
		"provisioners":        [],
		"type":                "aws_network_acl",
	},
	"module.vpc.aws_network_acl_rule.database_inbound": {
		"address": "module.vpc.aws_network_acl_rule.database_inbound",
		"config": {
			"cidr_block": {
				"references": [
					"var.database_inbound_acl_rules",
					"count.index",
				],
			},
			"egress": {
				"constant_value": false,
			},
			"from_port": {
				"references": [
					"var.database_inbound_acl_rules",
					"count.index",
				],
			},
			"icmp_code": {
				"references": [
					"var.database_inbound_acl_rules",
					"count.index",
				],
			},
			"icmp_type": {
				"references": [
					"var.database_inbound_acl_rules",
					"count.index",
				],
			},
			"ipv6_cidr_block": {
				"references": [
					"var.database_inbound_acl_rules",
					"count.index",
				],
			},
			"network_acl_id": {
				"references": [
					"aws_network_acl.database[0].id",
					"aws_network_acl.database[0]",
					"aws_network_acl.database",
				],
			},
			"protocol": {
				"references": [
					"var.database_inbound_acl_rules",
					"count.index",
				],
			},
			"rule_action": {
				"references": [
					"var.database_inbound_acl_rules",
					"count.index",
				],
			},
			"rule_number": {
				"references": [
					"var.database_inbound_acl_rules",
					"count.index",
				],
			},
			"to_port": {
				"references": [
					"var.database_inbound_acl_rules",
					"count.index",
				],
			},
		},
		"count": {
			"references": [
				"var.create_vpc",
				"var.database_dedicated_network_acl",
				"var.database_subnets",
				"var.database_inbound_acl_rules",
			],
		},
		"depends_on":          [],
		"for_each":            {},
		"mode":                "managed",
		"module_address":      "module.vpc",
		"name":                "database_inbound",
		"provider_config_key": "module.vpc:aws",
		"provisioners":        [],
		"type":                "aws_network_acl_rule",
	},
	"module.vpc.aws_network_acl_rule.database_outbound": {
		"address": "module.vpc.aws_network_acl_rule.database_outbound",
		"config": {
			"cidr_block": {
				"references": [
					"var.database_outbound_acl_rules",
					"count.index",
				],
			},
			"egress": {
				"constant_value": true,
			},
			"from_port": {
				"references": [
					"var.database_outbound_acl_rules",
					"count.index",
				],
			},
			"icmp_code": {
				"references": [
					"var.database_outbound_acl_rules",
					"count.index",
				],
			},
			"icmp_type": {
				"references": [
					"var.database_outbound_acl_rules",
					"count.index",
				],
			},
			"ipv6_cidr_block": {
				"references": [
					"var.database_outbound_acl_rules",
					"count.index",
				],
			},
			"network_acl_id": {
				"references": [
					"aws_network_acl.database[0].id",
					"aws_network_acl.database[0]",
					"aws_network_acl.database",
				],
			},
			"protocol": {
				"references": [
					"var.database_outbound_acl_rules",
					"count.index",
				],
			},
			"rule_action": {
				"references": [
					"var.database_outbound_acl_rules",
					"count.index",
				],
			},
			"rule_number": {
				"references": [
					"var.database_outbound_acl_rules",
					"count.index",
				],
			},
			"to_port": {
				"references": [
					"var.database_outbound_acl_rules",
					"count.index",
				],
			},
		},
		"count": {
			"references": [
				"var.create_vpc",
				"var.database_dedicated_network_acl",
				"var.database_subnets",
				"var.database_outbound_acl_rules",
			],
		},
		"depends_on":          [],
		"for_each":            {},
		"mode":                "managed",
		"module_address":      "module.vpc",
		"name":                "database_outbound",
		"provider_config_key": "module.vpc:aws",
		"provisioners":        [],
		"type":                "aws_network_acl_rule",
	},
	"module.vpc.aws_network_acl_rule.elasticache_inbound": {
		"address": "module.vpc.aws_network_acl_rule.elasticache_inbound",
		"config": {
			"cidr_block": {
				"references": [
					"var.elasticache_inbound_acl_rules",
					"count.index",
				],
			},
			"egress": {
				"constant_value": false,
			},
			"from_port": {
				"references": [
					"var.elasticache_inbound_acl_rules",
					"count.index",
				],
			},
			"icmp_code": {
				"references": [
					"var.elasticache_inbound_acl_rules",
					"count.index",
				],
			},
			"icmp_type": {
				"references": [
					"var.elasticache_inbound_acl_rules",
					"count.index",
				],
			},
			"ipv6_cidr_block": {
				"references": [
					"var.elasticache_inbound_acl_rules",
					"count.index",
				],
			},
			"network_acl_id": {
				"references": [
					"aws_network_acl.elasticache[0].id",
					"aws_network_acl.elasticache[0]",
					"aws_network_acl.elasticache",
				],
			},
			"protocol": {
				"references": [
					"var.elasticache_inbound_acl_rules",
					"count.index",
				],
			},
			"rule_action": {
				"references": [
					"var.elasticache_inbound_acl_rules",
					"count.index",
				],
			},
			"rule_number": {
				"references": [
					"var.elasticache_inbound_acl_rules",
					"count.index",
				],
			},
			"to_port": {
				"references": [
					"var.elasticache_inbound_acl_rules",
					"count.index",
				],
			},
		},
		"count": {
			"references": [
				"var.create_vpc",
				"var.elasticache_dedicated_network_acl",
				"var.elasticache_subnets",
				"var.elasticache_inbound_acl_rules",
			],
		},
		"depends_on":          [],
		"for_each":            {},
		"mode":                "managed",
		"module_address":      "module.vpc",
		"name":                "elasticache_inbound",
		"provider_config_key": "module.vpc:aws",
		"provisioners":        [],
		"type":                "aws_network_acl_rule",
	},
	"module.vpc.aws_network_acl_rule.elasticache_outbound": {
		"address": "module.vpc.aws_network_acl_rule.elasticache_outbound",
		"config": {
			"cidr_block": {
				"references": [
					"var.elasticache_outbound_acl_rules",
					"count.index",
				],
			},
			"egress": {
				"constant_value": true,
			},
			"from_port": {
				"references": [
					"var.elasticache_outbound_acl_rules",
					"count.index",
				],
			},
			"icmp_code": {
				"references": [
					"var.elasticache_outbound_acl_rules",
					"count.index",
				],
			},
			"icmp_type": {
				"references": [
					"var.elasticache_outbound_acl_rules",
					"count.index",
				],
			},
			"ipv6_cidr_block": {
				"references": [
					"var.elasticache_outbound_acl_rules",
					"count.index",
				],
			},
			"network_acl_id": {
				"references": [
					"aws_network_acl.elasticache[0].id",
					"aws_network_acl.elasticache[0]",
					"aws_network_acl.elasticache",
				],
			},
			"protocol": {
				"references": [
					"var.elasticache_outbound_acl_rules",
					"count.index",
				],
			},
			"rule_action": {
				"references": [
					"var.elasticache_outbound_acl_rules",
					"count.index",
				],
			},
			"rule_number": {
				"references": [
					"var.elasticache_outbound_acl_rules",
					"count.index",
				],
			},
			"to_port": {
				"references": [
					"var.elasticache_outbound_acl_rules",
					"count.index",
				],
			},
		},
		"count": {
			"references": [
				"var.create_vpc",
				"var.elasticache_dedicated_network_acl",
				"var.elasticache_subnets",
				"var.elasticache_outbound_acl_rules",
			],
		},
		"depends_on":          [],
		"for_each":            {},
		"mode":                "managed",
		"module_address":      "module.vpc",
		"name":                "elasticache_outbound",
		"provider_config_key": "module.vpc:aws",
		"provisioners":        [],
		"type":                "aws_network_acl_rule",
	},
	"module.vpc.aws_network_acl_rule.intra_inbound": {
		"address": "module.vpc.aws_network_acl_rule.intra_inbound",
		"config": {
			"cidr_block": {
				"references": [
					"var.intra_inbound_acl_rules",
					"count.index",
				],
			},
			"egress": {
				"constant_value": false,
			},
			"from_port": {
				"references": [
					"var.intra_inbound_acl_rules",
					"count.index",
				],
			},
			"icmp_code": {
				"references": [
					"var.intra_inbound_acl_rules",
					"count.index",
				],
			},
			"icmp_type": {
				"references": [
					"var.intra_inbound_acl_rules",
					"count.index",
				],
			},
			"ipv6_cidr_block": {
				"references": [
					"var.intra_inbound_acl_rules",
					"count.index",
				],
			},
			"network_acl_id": {
				"references": [
					"aws_network_acl.intra[0].id",
					"aws_network_acl.intra[0]",
					"aws_network_acl.intra",
				],
			},
			"protocol": {
				"references": [
					"var.intra_inbound_acl_rules",
					"count.index",
				],
			},
			"rule_action": {
				"references": [
					"var.intra_inbound_acl_rules",
					"count.index",
				],
			},
			"rule_number": {
				"references": [
					"var.intra_inbound_acl_rules",
					"count.index",
				],
			},
			"to_port": {
				"references": [
					"var.intra_inbound_acl_rules",
					"count.index",
				],
			},
		},
		"count": {
			"references": [
				"var.create_vpc",
				"var.intra_dedicated_network_acl",
				"var.intra_subnets",
				"var.intra_inbound_acl_rules",
			],
		},
		"depends_on":          [],
		"for_each":            {},
		"mode":                "managed",
		"module_address":      "module.vpc",
		"name":                "intra_inbound",
		"provider_config_key": "module.vpc:aws",
		"provisioners":        [],
		"type":                "aws_network_acl_rule",
	},
	"module.vpc.aws_network_acl_rule.intra_outbound": {
		"address": "module.vpc.aws_network_acl_rule.intra_outbound",
		"config": {
			"cidr_block": {
				"references": [
					"var.intra_outbound_acl_rules",
					"count.index",
				],
			},
			"egress": {
				"constant_value": true,
			},
			"from_port": {
				"references": [
					"var.intra_outbound_acl_rules",
					"count.index",
				],
			},
			"icmp_code": {
				"references": [
					"var.intra_outbound_acl_rules",
					"count.index",
				],
			},
			"icmp_type": {
				"references": [
					"var.intra_outbound_acl_rules",
					"count.index",
				],
			},
			"ipv6_cidr_block": {
				"references": [
					"var.intra_outbound_acl_rules",
					"count.index",
				],
			},
			"network_acl_id": {
				"references": [
					"aws_network_acl.intra[0].id",
					"aws_network_acl.intra[0]",
					"aws_network_acl.intra",
				],
			},
			"protocol": {
				"references": [
					"var.intra_outbound_acl_rules",
					"count.index",
				],
			},
			"rule_action": {
				"references": [
					"var.intra_outbound_acl_rules",
					"count.index",
				],
			},
			"rule_number": {
				"references": [
					"var.intra_outbound_acl_rules",
					"count.index",
				],
			},
			"to_port": {
				"references": [
					"var.intra_outbound_acl_rules",
					"count.index",
				],
			},
		},
		"count": {
			"references": [
				"var.create_vpc",
				"var.intra_dedicated_network_acl",
				"var.intra_subnets",
				"var.intra_outbound_acl_rules",
			],
		},
		"depends_on":          [],
		"for_each":            {},
		"mode":                "managed",
		"module_address":      "module.vpc",
		"name":                "intra_outbound",
		"provider_config_key": "module.vpc:aws",
		"provisioners":        [],
		"type":                "aws_network_acl_rule",
	},
	"module.vpc.aws_network_acl_rule.outpost_inbound": {
		"address": "module.vpc.aws_network_acl_rule.outpost_inbound",
		"config": {
			"cidr_block": {
				"references": [
					"var.outpost_inbound_acl_rules",
					"count.index",
				],
			},
			"egress": {
				"constant_value": false,
			},
			"from_port": {
				"references": [
					"var.outpost_inbound_acl_rules",
					"count.index",
				],
			},
			"icmp_code": {
				"references": [
					"var.outpost_inbound_acl_rules",
					"count.index",
				],
			},
			"icmp_type": {
				"references": [
					"var.outpost_inbound_acl_rules",
					"count.index",
				],
			},
			"ipv6_cidr_block": {
				"references": [
					"var.outpost_inbound_acl_rules",
					"count.index",
				],
			},
			"network_acl_id": {
				"references": [
					"aws_network_acl.outpost[0].id",
					"aws_network_acl.outpost[0]",
					"aws_network_acl.outpost",
				],
			},
			"protocol": {
				"references": [
					"var.outpost_inbound_acl_rules",
					"count.index",
				],
			},
			"rule_action": {
				"references": [
					"var.outpost_inbound_acl_rules",
					"count.index",
				],
			},
			"rule_number": {
				"references": [
					"var.outpost_inbound_acl_rules",
					"count.index",
				],
			},
			"to_port": {
				"references": [
					"var.outpost_inbound_acl_rules",
					"count.index",
				],
			},
		},
		"count": {
			"references": [
				"var.create_vpc",
				"var.outpost_dedicated_network_acl",
				"var.outpost_subnets",
				"var.outpost_inbound_acl_rules",
			],
		},
		"depends_on":          [],
		"for_each":            {},
		"mode":                "managed",
		"module_address":      "module.vpc",
		"name":                "outpost_inbound",
		"provider_config_key": "module.vpc:aws",
		"provisioners":        [],
		"type":                "aws_network_acl_rule",
	},
	"module.vpc.aws_network_acl_rule.outpost_outbound": {
		"address": "module.vpc.aws_network_acl_rule.outpost_outbound",
		"config": {
			"cidr_block": {
				"references": [
					"var.outpost_outbound_acl_rules",
					"count.index",
				],
			},
			"egress": {
				"constant_value": true,
			},
			"from_port": {
				"references": [
					"var.outpost_outbound_acl_rules",
					"count.index",
				],
			},
			"icmp_code": {
				"references": [
					"var.outpost_outbound_acl_rules",
					"count.index",
				],
			},
			"icmp_type": {
				"references": [
					"var.outpost_outbound_acl_rules",
					"count.index",
				],
			},
			"ipv6_cidr_block": {
				"references": [
					"var.outpost_outbound_acl_rules",
					"count.index",
				],
			},
			"network_acl_id": {
				"references": [
					"aws_network_acl.outpost[0].id",
					"aws_network_acl.outpost[0]",
					"aws_network_acl.outpost",
				],
			},
			"protocol": {
				"references": [
					"var.outpost_outbound_acl_rules",
					"count.index",
				],
			},
			"rule_action": {
				"references": [
					"var.outpost_outbound_acl_rules",
					"count.index",
				],
			},
			"rule_number": {
				"references": [
					"var.outpost_outbound_acl_rules",
					"count.index",
				],
			},
			"to_port": {
				"references": [
					"var.outpost_outbound_acl_rules",
					"count.index",
				],
			},
		},
		"count": {
			"references": [
				"var.create_vpc",
				"var.outpost_dedicated_network_acl",
				"var.outpost_subnets",
				"var.outpost_outbound_acl_rules",
			],
		},
		"depends_on":          [],
		"for_each":            {},
		"mode":                "managed",
		"module_address":      "module.vpc",
		"name":                "outpost_outbound",
		"provider_config_key": "module.vpc:aws",
		"provisioners":        [],
		"type":                "aws_network_acl_rule",
	},
	"module.vpc.aws_network_acl_rule.private_inbound": {
		"address": "module.vpc.aws_network_acl_rule.private_inbound",
		"config": {
			"cidr_block": {
				"references": [
					"var.private_inbound_acl_rules",
					"count.index",
				],
			},
			"egress": {
				"constant_value": false,
			},
			"from_port": {
				"references": [
					"var.private_inbound_acl_rules",
					"count.index",
				],
			},
			"icmp_code": {
				"references": [
					"var.private_inbound_acl_rules",
					"count.index",
				],
			},
			"icmp_type": {
				"references": [
					"var.private_inbound_acl_rules",
					"count.index",
				],
			},
			"ipv6_cidr_block": {
				"references": [
					"var.private_inbound_acl_rules",
					"count.index",
				],
			},
			"network_acl_id": {
				"references": [
					"aws_network_acl.private[0].id",
					"aws_network_acl.private[0]",
					"aws_network_acl.private",
				],
			},
			"protocol": {
				"references": [
					"var.private_inbound_acl_rules",
					"count.index",
				],
			},
			"rule_action": {
				"references": [
					"var.private_inbound_acl_rules",
					"count.index",
				],
			},
			"rule_number": {
				"references": [
					"var.private_inbound_acl_rules",
					"count.index",
				],
			},
			"to_port": {
				"references": [
					"var.private_inbound_acl_rules",
					"count.index",
				],
			},
		},
		"count": {
			"references": [
				"var.create_vpc",
				"var.private_dedicated_network_acl",
				"var.private_subnets",
				"var.private_inbound_acl_rules",
			],
		},
		"depends_on":          [],
		"for_each":            {},
		"mode":                "managed",
		"module_address":      "module.vpc",
		"name":                "private_inbound",
		"provider_config_key": "module.vpc:aws",
		"provisioners":        [],
		"type":                "aws_network_acl_rule",
	},
	"module.vpc.aws_network_acl_rule.private_outbound": {
		"address": "module.vpc.aws_network_acl_rule.private_outbound",
		"config": {
			"cidr_block": {
				"references": [
					"var.private_outbound_acl_rules",
					"count.index",
				],
			},
			"egress": {
				"constant_value": true,
			},
			"from_port": {
				"references": [
					"var.private_outbound_acl_rules",
					"count.index",
				],
			},
			"icmp_code": {
				"references": [
					"var.private_outbound_acl_rules",
					"count.index",
				],
			},
			"icmp_type": {
				"references": [
					"var.private_outbound_acl_rules",
					"count.index",
				],
			},
			"ipv6_cidr_block": {
				"references": [
					"var.private_outbound_acl_rules",
					"count.index",
				],
			},
			"network_acl_id": {
				"references": [
					"aws_network_acl.private[0].id",
					"aws_network_acl.private[0]",
					"aws_network_acl.private",
				],
			},
			"protocol": {
				"references": [
					"var.private_outbound_acl_rules",
					"count.index",
				],
			},
			"rule_action": {
				"references": [
					"var.private_outbound_acl_rules",
					"count.index",
				],
			},
			"rule_number": {
				"references": [
					"var.private_outbound_acl_rules",
					"count.index",
				],
			},
			"to_port": {
				"references": [
					"var.private_outbound_acl_rules",
					"count.index",
				],
			},
		},
		"count": {
			"references": [
				"var.create_vpc",
				"var.private_dedicated_network_acl",
				"var.private_subnets",
				"var.private_outbound_acl_rules",
			],
		},
		"depends_on":          [],
		"for_each":            {},
		"mode":                "managed",
		"module_address":      "module.vpc",
		"name":                "private_outbound",
		"provider_config_key": "module.vpc:aws",
		"provisioners":        [],
		"type":                "aws_network_acl_rule",
	},
	"module.vpc.aws_network_acl_rule.public_inbound": {
		"address": "module.vpc.aws_network_acl_rule.public_inbound",
		"config": {
			"cidr_block": {
				"references": [
					"var.public_inbound_acl_rules",
					"count.index",
				],
			},
			"egress": {
				"constant_value": false,
			},
			"from_port": {
				"references": [
					"var.public_inbound_acl_rules",
					"count.index",
				],
			},
			"icmp_code": {
				"references": [
					"var.public_inbound_acl_rules",
					"count.index",
				],
			},
			"icmp_type": {
				"references": [
					"var.public_inbound_acl_rules",
					"count.index",
				],
			},
			"ipv6_cidr_block": {
				"references": [
					"var.public_inbound_acl_rules",
					"count.index",
				],
			},
			"network_acl_id": {
				"references": [
					"aws_network_acl.public[0].id",
					"aws_network_acl.public[0]",
					"aws_network_acl.public",
				],
			},
			"protocol": {
				"references": [
					"var.public_inbound_acl_rules",
					"count.index",
				],
			},
			"rule_action": {
				"references": [
					"var.public_inbound_acl_rules",
					"count.index",
				],
			},
			"rule_number": {
				"references": [
					"var.public_inbound_acl_rules",
					"count.index",
				],
			},
			"to_port": {
				"references": [
					"var.public_inbound_acl_rules",
					"count.index",
				],
			},
		},
		"count": {
			"references": [
				"var.create_vpc",
				"var.public_dedicated_network_acl",
				"var.public_subnets",
				"var.public_inbound_acl_rules",
			],
		},
		"depends_on":          [],
		"for_each":            {},
		"mode":                "managed",
		"module_address":      "module.vpc",
		"name":                "public_inbound",
		"provider_config_key": "module.vpc:aws",
		"provisioners":        [],
		"type":                "aws_network_acl_rule",
	},
	"module.vpc.aws_network_acl_rule.public_outbound": {
		"address": "module.vpc.aws_network_acl_rule.public_outbound",
		"config": {
			"cidr_block": {
				"references": [
					"var.public_outbound_acl_rules",
					"count.index",
				],
			},
			"egress": {
				"constant_value": true,
			},
			"from_port": {
				"references": [
					"var.public_outbound_acl_rules",
					"count.index",
				],
			},
			"icmp_code": {
				"references": [
					"var.public_outbound_acl_rules",
					"count.index",
				],
			},
			"icmp_type": {
				"references": [
					"var.public_outbound_acl_rules",
					"count.index",
				],
			},
			"ipv6_cidr_block": {
				"references": [
					"var.public_outbound_acl_rules",
					"count.index",
				],
			},
			"network_acl_id": {
				"references": [
					"aws_network_acl.public[0].id",
					"aws_network_acl.public[0]",
					"aws_network_acl.public",
				],
			},
			"protocol": {
				"references": [
					"var.public_outbound_acl_rules",
					"count.index",
				],
			},
			"rule_action": {
				"references": [
					"var.public_outbound_acl_rules",
					"count.index",
				],
			},
			"rule_number": {
				"references": [
					"var.public_outbound_acl_rules",
					"count.index",
				],
			},
			"to_port": {
				"references": [
					"var.public_outbound_acl_rules",
					"count.index",
				],
			},
		},
		"count": {
			"references": [
				"var.create_vpc",
				"var.public_dedicated_network_acl",
				"var.public_subnets",
				"var.public_outbound_acl_rules",
			],
		},
		"depends_on":          [],
		"for_each":            {},
		"mode":                "managed",
		"module_address":      "module.vpc",
		"name":                "public_outbound",
		"provider_config_key": "module.vpc:aws",
		"provisioners":        [],
		"type":                "aws_network_acl_rule",
	},
	"module.vpc.aws_network_acl_rule.redshift_inbound": {
		"address": "module.vpc.aws_network_acl_rule.redshift_inbound",
		"config": {
			"cidr_block": {
				"references": [
					"var.redshift_inbound_acl_rules",
					"count.index",
				],
			},
			"egress": {
				"constant_value": false,
			},
			"from_port": {
				"references": [
					"var.redshift_inbound_acl_rules",
					"count.index",
				],
			},
			"icmp_code": {
				"references": [
					"var.redshift_inbound_acl_rules",
					"count.index",
				],
			},
			"icmp_type": {
				"references": [
					"var.redshift_inbound_acl_rules",
					"count.index",
				],
			},
			"ipv6_cidr_block": {
				"references": [
					"var.redshift_inbound_acl_rules",
					"count.index",
				],
			},
			"network_acl_id": {
				"references": [
					"aws_network_acl.redshift[0].id",
					"aws_network_acl.redshift[0]",
					"aws_network_acl.redshift",
				],
			},
			"protocol": {
				"references": [
					"var.redshift_inbound_acl_rules",
					"count.index",
				],
			},
			"rule_action": {
				"references": [
					"var.redshift_inbound_acl_rules",
					"count.index",
				],
			},
			"rule_number": {
				"references": [
					"var.redshift_inbound_acl_rules",
					"count.index",
				],
			},
			"to_port": {
				"references": [
					"var.redshift_inbound_acl_rules",
					"count.index",
				],
			},
		},
		"count": {
			"references": [
				"var.create_vpc",
				"var.redshift_dedicated_network_acl",
				"var.redshift_subnets",
				"var.redshift_inbound_acl_rules",
			],
		},
		"depends_on":          [],
		"for_each":            {},
		"mode":                "managed",
		"module_address":      "module.vpc",
		"name":                "redshift_inbound",
		"provider_config_key": "module.vpc:aws",
		"provisioners":        [],
		"type":                "aws_network_acl_rule",
	},
	"module.vpc.aws_network_acl_rule.redshift_outbound": {
		"address": "module.vpc.aws_network_acl_rule.redshift_outbound",
		"config": {
			"cidr_block": {
				"references": [
					"var.redshift_outbound_acl_rules",
					"count.index",
				],
			},
			"egress": {
				"constant_value": true,
			},
			"from_port": {
				"references": [
					"var.redshift_outbound_acl_rules",
					"count.index",
				],
			},
			"icmp_code": {
				"references": [
					"var.redshift_outbound_acl_rules",
					"count.index",
				],
			},
			"icmp_type": {
				"references": [
					"var.redshift_outbound_acl_rules",
					"count.index",
				],
			},
			"ipv6_cidr_block": {
				"references": [
					"var.redshift_outbound_acl_rules",
					"count.index",
				],
			},
			"network_acl_id": {
				"references": [
					"aws_network_acl.redshift[0].id",
					"aws_network_acl.redshift[0]",
					"aws_network_acl.redshift",
				],
			},
			"protocol": {
				"references": [
					"var.redshift_outbound_acl_rules",
					"count.index",
				],
			},
			"rule_action": {
				"references": [
					"var.redshift_outbound_acl_rules",
					"count.index",
				],
			},
			"rule_number": {
				"references": [
					"var.redshift_outbound_acl_rules",
					"count.index",
				],
			},
			"to_port": {
				"references": [
					"var.redshift_outbound_acl_rules",
					"count.index",
				],
			},
		},
		"count": {
			"references": [
				"var.create_vpc",
				"var.redshift_dedicated_network_acl",
				"var.redshift_subnets",
				"var.redshift_outbound_acl_rules",
			],
		},
		"depends_on":          [],
		"for_each":            {},
		"mode":                "managed",
		"module_address":      "module.vpc",
		"name":                "redshift_outbound",
		"provider_config_key": "module.vpc:aws",
		"provisioners":        [],
		"type":                "aws_network_acl_rule",
	},
	"module.vpc.aws_redshift_subnet_group.redshift": {
		"address": "module.vpc.aws_redshift_subnet_group.redshift",
		"config": {
			"description": {
				"references": [
					"var.name",
				],
			},
			"name": {
				"references": [
					"var.name",
				],
			},
			"subnet_ids": {
				"references": [
					"aws_subnet.redshift",
				],
			},
			"tags": {
				"references": [
					"var.name",
					"var.tags",
					"var.redshift_subnet_group_tags",
				],
			},
		},
		"count": {
			"references": [
				"var.create_vpc",
				"var.redshift_subnets",
				"var.create_redshift_subnet_group",
			],
		},
		"depends_on":          [],
		"for_each":            {},
		"mode":                "managed",
		"module_address":      "module.vpc",
		"name":                "redshift",
		"provider_config_key": "module.vpc:aws",
		"provisioners":        [],
		"type":                "aws_redshift_subnet_group",
	},
	"module.vpc.aws_route.database_internet_gateway": {
		"address": "module.vpc.aws_route.database_internet_gateway",
		"config": {
			"destination_cidr_block": {
				"constant_value": "0.0.0.0/0",
			},
			"gateway_id": {
				"references": [
					"aws_internet_gateway.this[0].id",
					"aws_internet_gateway.this[0]",
					"aws_internet_gateway.this",
				],
			},
			"route_table_id": {
				"references": [
					"aws_route_table.database[0].id",
					"aws_route_table.database[0]",
					"aws_route_table.database",
				],
			},
			"timeouts": {
				"constant_value": null,
			},
		},
		"count": {
			"references": [
				"var.create_vpc",
				"var.create_igw",
				"var.create_database_subnet_route_table",
				"var.database_subnets",
				"var.create_database_internet_gateway_route",
				"var.create_database_nat_gateway_route",
			],
		},
		"depends_on":          [],
		"for_each":            {},
		"mode":                "managed",
		"module_address":      "module.vpc",
		"name":                "database_internet_gateway",
		"provider_config_key": "module.vpc:aws",
		"provisioners":        [],
		"type":                "aws_route",
	},
	"module.vpc.aws_route.database_ipv6_egress": {
		"address": "module.vpc.aws_route.database_ipv6_egress",
		"config": {
			"destination_ipv6_cidr_block": {
				"constant_value": "::/0",
			},
			"egress_only_gateway_id": {
				"references": [
					"aws_egress_only_internet_gateway.this[0].id",
					"aws_egress_only_internet_gateway.this[0]",
					"aws_egress_only_internet_gateway.this",
				],
			},
			"route_table_id": {
				"references": [
					"aws_route_table.database[0].id",
					"aws_route_table.database[0]",
					"aws_route_table.database",
				],
			},
			"timeouts": {
				"constant_value": null,
			},
		},
		"count": {
			"references": [
				"var.create_vpc",
				"var.create_egress_only_igw",
				"var.enable_ipv6",
				"var.create_database_subnet_route_table",
				"var.database_subnets",
				"var.create_database_internet_gateway_route",
			],
		},
		"depends_on":          [],
		"for_each":            {},
		"mode":                "managed",
		"module_address":      "module.vpc",
		"name":                "database_ipv6_egress",
		"provider_config_key": "module.vpc:aws",
		"provisioners":        [],
		"type":                "aws_route",
	},
	"module.vpc.aws_route.database_nat_gateway": {
		"address": "module.vpc.aws_route.database_nat_gateway",
		"config": {
			"destination_cidr_block": {
				"constant_value": "0.0.0.0/0",
			},
			"nat_gateway_id": {
				"references": [
					"aws_nat_gateway.this",
					"count.index",
				],
			},
			"route_table_id": {
				"references": [
					"aws_route_table.database",
					"count.index",
				],
			},
			"timeouts": {
				"constant_value": null,
			},
		},
		"count": {
			"references": [
				"var.create_vpc",
				"var.create_database_subnet_route_table",
				"var.database_subnets",
				"var.create_database_internet_gateway_route",
				"var.create_database_nat_gateway_route",
				"var.enable_nat_gateway",
				"var.single_nat_gateway",
				"var.database_subnets",
			],
		},
		"depends_on":          [],
		"for_each":            {},
		"mode":                "managed",
		"module_address":      "module.vpc",
		"name":                "database_nat_gateway",
		"provider_config_key": "module.vpc:aws",
		"provisioners":        [],
		"type":                "aws_route",
	},
	"module.vpc.aws_route.private_ipv6_egress": {
		"address": "module.vpc.aws_route.private_ipv6_egress",
		"config": {
			"destination_ipv6_cidr_block": {
				"constant_value": "::/0",
			},
			"egress_only_gateway_id": {
				"references": [
					"aws_egress_only_internet_gateway.this",
				],
			},
			"route_table_id": {
				"references": [
					"aws_route_table.private",
					"count.index",
				],
			},
		},
		"count": {
			"references": [
				"var.create_vpc",
				"var.create_egress_only_igw",
				"var.enable_ipv6",
				"var.private_subnets",
			],
		},
		"depends_on":          [],
		"for_each":            {},
		"mode":                "managed",
		"module_address":      "module.vpc",
		"name":                "private_ipv6_egress",
		"provider_config_key": "module.vpc:aws",
		"provisioners":        [],
		"type":                "aws_route",
	},
	"module.vpc.aws_route.private_nat_gateway": {
		"address": "module.vpc.aws_route.private_nat_gateway",
		"config": {
			"destination_cidr_block": {
				"constant_value": "0.0.0.0/0",
			},
			"nat_gateway_id": {
				"references": [
					"aws_nat_gateway.this",
					"count.index",
				],
			},
			"route_table_id": {
				"references": [
					"aws_route_table.private",
					"count.index",
				],
			},
			"timeouts": {
				"constant_value": null,
			},
		},
		"count": {
			"references": [
				"var.create_vpc",
				"var.enable_nat_gateway",
				"local.nat_gateway_count",
			],
		},
		"depends_on":          [],
		"for_each":            {},
		"mode":                "managed",
		"module_address":      "module.vpc",
		"name":                "private_nat_gateway",
		"provider_config_key": "module.vpc:aws",
		"provisioners":        [],
		"type":                "aws_route",
	},
	"module.vpc.aws_route.public_internet_gateway": {
		"address": "module.vpc.aws_route.public_internet_gateway",
		"config": {
			"destination_cidr_block": {
				"constant_value": "0.0.0.0/0",
			},
			"gateway_id": {
				"references": [
					"aws_internet_gateway.this[0].id",
					"aws_internet_gateway.this[0]",
					"aws_internet_gateway.this",
				],
			},
			"route_table_id": {
				"references": [
					"aws_route_table.public[0].id",
					"aws_route_table.public[0]",
					"aws_route_table.public",
				],
			},
			"timeouts": {
				"constant_value": null,
			},
		},
		"count": {
			"references": [
				"var.create_vpc",
				"var.create_igw",
				"var.public_subnets",
			],
		},
		"depends_on":          [],
		"for_each":            {},
		"mode":                "managed",
		"module_address":      "module.vpc",
		"name":                "public_internet_gateway",
		"provider_config_key": "module.vpc:aws",
		"provisioners":        [],
		"type":                "aws_route",
	},
	"module.vpc.aws_route.public_internet_gateway_ipv6": {
		"address": "module.vpc.aws_route.public_internet_gateway_ipv6",
		"config": {
			"destination_ipv6_cidr_block": {
				"constant_value": "::/0",
			},
			"gateway_id": {
				"references": [
					"aws_internet_gateway.this[0].id",
					"aws_internet_gateway.this[0]",
					"aws_internet_gateway.this",
				],
			},
			"route_table_id": {
				"references": [
					"aws_route_table.public[0].id",
					"aws_route_table.public[0]",
					"aws_route_table.public",
				],
			},
		},
		"count": {
			"references": [
				"var.create_vpc",
				"var.create_igw",
				"var.enable_ipv6",
				"var.public_subnets",
			],
		},
		"depends_on":          [],
		"for_each":            {},
		"mode":                "managed",
		"module_address":      "module.vpc",
		"name":                "public_internet_gateway_ipv6",
		"provider_config_key": "module.vpc:aws",
		"provisioners":        [],
		"type":                "aws_route",
	},
	"module.vpc.aws_route_table.database": {
		"address": "module.vpc.aws_route_table.database",
		"config": {
			"tags": {
				"references": [
					"var.single_nat_gateway",
					"var.create_database_internet_gateway_route",
					"var.name",
					"var.database_subnet_suffix",
					"var.database_subnet_suffix",
					"var.name",
					"var.azs",
					"count.index",
					"var.tags",
					"var.database_route_table_tags",
				],
			},
			"vpc_id": {
				"references": [
					"local.vpc_id",
				],
			},
		},
		"count": {
			"references": [
				"var.create_vpc",
				"var.create_database_subnet_route_table",
				"var.database_subnets",
				"var.single_nat_gateway",
				"var.create_database_internet_gateway_route",
				"var.database_subnets",
			],
		},
		"depends_on":          [],
		"for_each":            {},
		"mode":                "managed",
		"module_address":      "module.vpc",
		"name":                "database",
		"provider_config_key": "module.vpc:aws",
		"provisioners":        [],
		"type":                "aws_route_table",
	},
	"module.vpc.aws_route_table.elasticache": {
		"address": "module.vpc.aws_route_table.elasticache",
		"config": {
			"tags": {
				"references": [
					"var.name",
					"var.elasticache_subnet_suffix",
					"var.tags",
					"var.elasticache_route_table_tags",
				],
			},
			"vpc_id": {
				"references": [
					"local.vpc_id",
				],
			},
		},
		"count": {
			"references": [
				"var.create_vpc",
				"var.create_elasticache_subnet_route_table",
				"var.elasticache_subnets",
			],
		},
		"depends_on":          [],
		"for_each":            {},
		"mode":                "managed",
		"module_address":      "module.vpc",
		"name":                "elasticache",
		"provider_config_key": "module.vpc:aws",
		"provisioners":        [],
		"type":                "aws_route_table",
	},
	"module.vpc.aws_route_table.intra": {
		"address": "module.vpc.aws_route_table.intra",
		"config": {
			"tags": {
				"references": [
					"var.name",
					"var.intra_subnet_suffix",
					"var.tags",
					"var.intra_route_table_tags",
				],
			},
			"vpc_id": {
				"references": [
					"local.vpc_id",
				],
			},
		},
		"count": {
			"references": [
				"var.create_vpc",
				"var.intra_subnets",
			],
		},
		"depends_on":          [],
		"for_each":            {},
		"mode":                "managed",
		"module_address":      "module.vpc",
		"name":                "intra",
		"provider_config_key": "module.vpc:aws",
		"provisioners":        [],
		"type":                "aws_route_table",
	},
	"module.vpc.aws_route_table.private": {
		"address": "module.vpc.aws_route_table.private",
		"config": {
			"tags": {
				"references": [
					"var.single_nat_gateway",
					"var.name",
					"var.private_subnet_suffix",
					"var.private_subnet_suffix",
					"var.name",
					"var.azs",
					"count.index",
					"var.tags",
					"var.private_route_table_tags",
				],
			},
			"vpc_id": {
				"references": [
					"local.vpc_id",
				],
			},
		},
		"count": {
			"references": [
				"var.create_vpc",
				"local.max_subnet_length",
				"local.nat_gateway_count",
			],
		},
		"depends_on":          [],
		"for_each":            {},
		"mode":                "managed",
		"module_address":      "module.vpc",
		"name":                "private",
		"provider_config_key": "module.vpc:aws",
		"provisioners":        [],
		"type":                "aws_route_table",
	},
	"module.vpc.aws_route_table.public": {
		"address": "module.vpc.aws_route_table.public",
		"config": {
			"tags": {
				"references": [
					"var.public_subnet_suffix",
					"var.name",
					"var.tags",
					"var.public_route_table_tags",
				],
			},
			"vpc_id": {
				"references": [
					"local.vpc_id",
				],
			},
		},
		"count": {
			"references": [
				"var.create_vpc",
				"var.public_subnets",
			],
		},
		"depends_on":          [],
		"for_each":            {},
		"mode":                "managed",
		"module_address":      "module.vpc",
		"name":                "public",
		"provider_config_key": "module.vpc:aws",
		"provisioners":        [],
		"type":                "aws_route_table",
	},
	"module.vpc.aws_route_table.redshift": {
		"address": "module.vpc.aws_route_table.redshift",
		"config": {
			"tags": {
				"references": [
					"var.name",
					"var.redshift_subnet_suffix",
					"var.tags",
					"var.redshift_route_table_tags",
				],
			},
			"vpc_id": {
				"references": [
					"local.vpc_id",
				],
			},
		},
		"count": {
			"references": [
				"var.create_vpc",
				"var.create_redshift_subnet_route_table",
				"var.redshift_subnets",
			],
		},
		"depends_on":          [],
		"for_each":            {},
		"mode":                "managed",
		"module_address":      "module.vpc",
		"name":                "redshift",
		"provider_config_key": "module.vpc:aws",
		"provisioners":        [],
		"type":                "aws_route_table",
	},
	"module.vpc.aws_route_table_association.database": {
		"address": "module.vpc.aws_route_table_association.database",
		"config": {
			"route_table_id": {
				"references": [
					"aws_route_table.database",
					"aws_route_table.private",
					"var.create_database_subnet_route_table",
					"var.single_nat_gateway",
					"var.create_database_internet_gateway_route",
					"count.index",
					"count.index",
				],
			},
			"subnet_id": {
				"references": [
					"aws_subnet.database",
					"count.index",
				],
			},
		},
		"count": {
			"references": [
				"var.create_vpc",
				"var.database_subnets",
				"var.database_subnets",
			],
		},
		"depends_on":          [],
		"for_each":            {},
		"mode":                "managed",
		"module_address":      "module.vpc",
		"name":                "database",
		"provider_config_key": "module.vpc:aws",
		"provisioners":        [],
		"type":                "aws_route_table_association",
	},
	"module.vpc.aws_route_table_association.elasticache": {
		"address": "module.vpc.aws_route_table_association.elasticache",
		"config": {
			"route_table_id": {
				"references": [
					"aws_route_table.elasticache",
					"aws_route_table.private",
					"var.single_nat_gateway",
					"var.create_elasticache_subnet_route_table",
					"count.index",
				],
			},
			"subnet_id": {
				"references": [
					"aws_subnet.elasticache",
					"count.index",
				],
			},
		},
		"count": {
			"references": [
				"var.create_vpc",
				"var.elasticache_subnets",
				"var.elasticache_subnets",
			],
		},
		"depends_on":          [],
		"for_each":            {},
		"mode":                "managed",
		"module_address":      "module.vpc",
		"name":                "elasticache",
		"provider_config_key": "module.vpc:aws",
		"provisioners":        [],
		"type":                "aws_route_table_association",
	},
	"module.vpc.aws_route_table_association.intra": {
		"address": "module.vpc.aws_route_table_association.intra",
		"config": {
			"route_table_id": {
				"references": [
					"aws_route_table.intra",
				],
			},
			"subnet_id": {
				"references": [
					"aws_subnet.intra",
					"count.index",
				],
			},
		},
		"count": {
			"references": [
				"var.create_vpc",
				"var.intra_subnets",
				"var.intra_subnets",
			],
		},
		"depends_on":          [],
		"for_each":            {},
		"mode":                "managed",
		"module_address":      "module.vpc",
		"name":                "intra",
		"provider_config_key": "module.vpc:aws",
		"provisioners":        [],
		"type":                "aws_route_table_association",
	},
	"module.vpc.aws_route_table_association.outpost": {
		"address": "module.vpc.aws_route_table_association.outpost",
		"config": {
			"route_table_id": {
				"references": [
					"aws_route_table.private",
					"var.single_nat_gateway",
					"count.index",
				],
			},
			"subnet_id": {
				"references": [
					"aws_subnet.outpost",
					"count.index",
				],
			},
		},
		"count": {
			"references": [
				"var.create_vpc",
				"var.outpost_subnets",
				"var.outpost_subnets",
			],
		},
		"depends_on":          [],
		"for_each":            {},
		"mode":                "managed",
		"module_address":      "module.vpc",
		"name":                "outpost",
		"provider_config_key": "module.vpc:aws",
		"provisioners":        [],
		"type":                "aws_route_table_association",
	},
	"module.vpc.aws_route_table_association.private": {
		"address": "module.vpc.aws_route_table_association.private",
		"config": {
			"route_table_id": {
				"references": [
					"aws_route_table.private",
					"var.single_nat_gateway",
					"count.index",
				],
			},
			"subnet_id": {
				"references": [
					"aws_subnet.private",
					"count.index",
				],
			},
		},
		"count": {
			"references": [
				"var.create_vpc",
				"var.private_subnets",
				"var.private_subnets",
			],
		},
		"depends_on":          [],
		"for_each":            {},
		"mode":                "managed",
		"module_address":      "module.vpc",
		"name":                "private",
		"provider_config_key": "module.vpc:aws",
		"provisioners":        [],
		"type":                "aws_route_table_association",
	},
	"module.vpc.aws_route_table_association.public": {
		"address": "module.vpc.aws_route_table_association.public",
		"config": {
			"route_table_id": {
				"references": [
					"aws_route_table.public[0].id",
					"aws_route_table.public[0]",
					"aws_route_table.public",
				],
			},
			"subnet_id": {
				"references": [
					"aws_subnet.public",
					"count.index",
				],
			},
		},
		"count": {
			"references": [
				"var.create_vpc",
				"var.public_subnets",
				"var.public_subnets",
			],
		},
		"depends_on":          [],
		"for_each":            {},
		"mode":                "managed",
		"module_address":      "module.vpc",
		"name":                "public",
		"provider_config_key": "module.vpc:aws",
		"provisioners":        [],
		"type":                "aws_route_table_association",
	},
	"module.vpc.aws_route_table_association.redshift": {
		"address": "module.vpc.aws_route_table_association.redshift",
		"config": {
			"route_table_id": {
				"references": [
					"aws_route_table.redshift",
					"aws_route_table.private",
					"var.single_nat_gateway",
					"var.create_redshift_subnet_route_table",
					"count.index",
				],
			},
			"subnet_id": {
				"references": [
					"aws_subnet.redshift",
					"count.index",
				],
			},
		},
		"count": {
			"references": [
				"var.create_vpc",
				"var.redshift_subnets",
				"var.enable_public_redshift",
				"var.redshift_subnets",
			],
		},
		"depends_on":          [],
		"for_each":            {},
		"mode":                "managed",
		"module_address":      "module.vpc",
		"name":                "redshift",
		"provider_config_key": "module.vpc:aws",
		"provisioners":        [],
		"type":                "aws_route_table_association",
	},
	"module.vpc.aws_route_table_association.redshift_public": {
		"address": "module.vpc.aws_route_table_association.redshift_public",
		"config": {
			"route_table_id": {
				"references": [
					"aws_route_table.redshift",
					"aws_route_table.public",
					"var.single_nat_gateway",
					"var.create_redshift_subnet_route_table",
					"count.index",
				],
			},
			"subnet_id": {
				"references": [
					"aws_subnet.redshift",
					"count.index",
				],
			},
		},
		"count": {
			"references": [
				"var.create_vpc",
				"var.redshift_subnets",
				"var.enable_public_redshift",
				"var.redshift_subnets",
			],
		},
		"depends_on":          [],
		"for_each":            {},
		"mode":                "managed",
		"module_address":      "module.vpc",
		"name":                "redshift_public",
		"provider_config_key": "module.vpc:aws",
		"provisioners":        [],
		"type":                "aws_route_table_association",
	},
	"module.vpc.aws_subnet.database": {
		"address": "module.vpc.aws_subnet.database",
		"config": {
			"assign_ipv6_address_on_creation": {
				"references": [
					"var.database_subnet_assign_ipv6_address_on_creation",
					"var.assign_ipv6_address_on_creation",
					"var.database_subnet_assign_ipv6_address_on_creation",
				],
			},
			"availability_zone": {
				"references": [
					"var.azs",
					"count.index",
					"var.azs",
					"count.index",
				],
			},
			"availability_zone_id": {
				"references": [
					"var.azs",
					"count.index",
					"var.azs",
					"count.index",
				],
			},
			"cidr_block": {
				"references": [
					"var.database_subnets",
					"count.index",
				],
			},
			"ipv6_cidr_block": {
				"references": [
					"var.enable_ipv6",
					"var.database_subnet_ipv6_prefixes",
					"aws_vpc.this[0].ipv6_cidr_block",
					"aws_vpc.this[0]",
					"aws_vpc.this",
					"var.database_subnet_ipv6_prefixes",
					"count.index",
				],
			},
			"tags": {
				"references": [
					"var.database_subnet_suffix",
					"var.name",
					"var.azs",
					"count.index",
					"var.tags",
					"var.database_subnet_tags",
				],
			},
			"vpc_id": {
				"references": [
					"local.vpc_id",
				],
			},
		},
		"count": {
			"references": [
				"var.create_vpc",
				"var.database_subnets",
				"var.database_subnets",
			],
		},
		"depends_on":          [],
		"for_each":            {},
		"mode":                "managed",
		"module_address":      "module.vpc",
		"name":                "database",
		"provider_config_key": "module.vpc:aws",
		"provisioners":        [],
		"type":                "aws_subnet",
	},
	"module.vpc.aws_subnet.elasticache": {
		"address": "module.vpc.aws_subnet.elasticache",
		"config": {
			"assign_ipv6_address_on_creation": {
				"references": [
					"var.elasticache_subnet_assign_ipv6_address_on_creation",
					"var.assign_ipv6_address_on_creation",
					"var.elasticache_subnet_assign_ipv6_address_on_creation",
				],
			},
			"availability_zone": {
				"references": [
					"var.azs",
					"count.index",
					"var.azs",
					"count.index",
				],
			},
			"availability_zone_id": {
				"references": [
					"var.azs",
					"count.index",
					"var.azs",
					"count.index",
				],
			},
			"cidr_block": {
				"references": [
					"var.elasticache_subnets",
					"count.index",
				],
			},
			"ipv6_cidr_block": {
				"references": [
					"var.enable_ipv6",
					"var.elasticache_subnet_ipv6_prefixes",
					"aws_vpc.this[0].ipv6_cidr_block",
					"aws_vpc.this[0]",
					"aws_vpc.this",
					"var.elasticache_subnet_ipv6_prefixes",
					"count.index",
				],
			},
			"tags": {
				"references": [
					"var.elasticache_subnet_suffix",
					"var.name",
					"var.azs",
					"count.index",
					"var.tags",
					"var.elasticache_subnet_tags",
				],
			},
			"vpc_id": {
				"references": [
					"local.vpc_id",
				],
			},
		},
		"count": {
			"references": [
				"var.create_vpc",
				"var.elasticache_subnets",
				"var.elasticache_subnets",
			],
		},
		"depends_on":          [],
		"for_each":            {},
		"mode":                "managed",
		"module_address":      "module.vpc",
		"name":                "elasticache",
		"provider_config_key": "module.vpc:aws",
		"provisioners":        [],
		"type":                "aws_subnet",
	},
	"module.vpc.aws_subnet.intra": {
		"address": "module.vpc.aws_subnet.intra",
		"config": {
			"assign_ipv6_address_on_creation": {
				"references": [
					"var.intra_subnet_assign_ipv6_address_on_creation",
					"var.assign_ipv6_address_on_creation",
					"var.intra_subnet_assign_ipv6_address_on_creation",
				],
			},
			"availability_zone": {
				"references": [
					"var.azs",
					"count.index",
					"var.azs",
					"count.index",
				],
			},
			"availability_zone_id": {
				"references": [
					"var.azs",
					"count.index",
					"var.azs",
					"count.index",
				],
			},
			"cidr_block": {
				"references": [
					"var.intra_subnets",
					"count.index",
				],
			},
			"ipv6_cidr_block": {
				"references": [
					"var.enable_ipv6",
					"var.intra_subnet_ipv6_prefixes",
					"aws_vpc.this[0].ipv6_cidr_block",
					"aws_vpc.this[0]",
					"aws_vpc.this",
					"var.intra_subnet_ipv6_prefixes",
					"count.index",
				],
			},
			"tags": {
				"references": [
					"var.intra_subnet_suffix",
					"var.name",
					"var.azs",
					"count.index",
					"var.tags",
					"var.intra_subnet_tags",
				],
			},
			"vpc_id": {
				"references": [
					"local.vpc_id",
				],
			},
		},
		"count": {
			"references": [
				"var.create_vpc",
				"var.intra_subnets",
				"var.intra_subnets",
			],
		},
		"depends_on":          [],
		"for_each":            {},
		"mode":                "managed",
		"module_address":      "module.vpc",
		"name":                "intra",
		"provider_config_key": "module.vpc:aws",
		"provisioners":        [],
		"type":                "aws_subnet",
	},
	"module.vpc.aws_subnet.outpost": {
		"address": "module.vpc.aws_subnet.outpost",
		"config": {
			"assign_ipv6_address_on_creation": {
				"references": [
					"var.outpost_subnet_assign_ipv6_address_on_creation",
					"var.assign_ipv6_address_on_creation",
					"var.outpost_subnet_assign_ipv6_address_on_creation",
				],
			},
			"availability_zone": {
				"references": [
					"var.outpost_az",
				],
			},
			"cidr_block": {
				"references": [
					"var.outpost_subnets",
					"count.index",
				],
			},
			"ipv6_cidr_block": {
				"references": [
					"var.enable_ipv6",
					"var.outpost_subnet_ipv6_prefixes",
					"aws_vpc.this[0].ipv6_cidr_block",
					"aws_vpc.this[0]",
					"aws_vpc.this",
					"var.outpost_subnet_ipv6_prefixes",
					"count.index",
				],
			},
			"outpost_arn": {
				"references": [
					"var.outpost_arn",
				],
			},
			"tags": {
				"references": [
					"var.outpost_subnet_suffix",
					"var.name",
					"var.outpost_az",
					"var.tags",
					"var.outpost_subnet_tags",
				],
			},
			"vpc_id": {
				"references": [
					"local.vpc_id",
				],
			},
		},
		"count": {
			"references": [
				"var.create_vpc",
				"var.outpost_subnets",
				"var.outpost_subnets",
			],
		},
		"depends_on":          [],
		"for_each":            {},
		"mode":                "managed",
		"module_address":      "module.vpc",
		"name":                "outpost",
		"provider_config_key": "module.vpc:aws",
		"provisioners":        [],
		"type":                "aws_subnet",
	},
	"module.vpc.aws_subnet.private": {
		"address": "module.vpc.aws_subnet.private",
		"config": {
			"assign_ipv6_address_on_creation": {
				"references": [
					"var.private_subnet_assign_ipv6_address_on_creation",
					"var.assign_ipv6_address_on_creation",
					"var.private_subnet_assign_ipv6_address_on_creation",
				],
			},
			"availability_zone": {
				"references": [
					"var.azs",
					"count.index",
					"var.azs",
					"count.index",
				],
			},
			"availability_zone_id": {
				"references": [
					"var.azs",
					"count.index",
					"var.azs",
					"count.index",
				],
			},
			"cidr_block": {
				"references": [
					"var.private_subnets",
					"count.index",
				],
			},
			"ipv6_cidr_block": {
				"references": [
					"var.enable_ipv6",
					"var.private_subnet_ipv6_prefixes",
					"aws_vpc.this[0].ipv6_cidr_block",
					"aws_vpc.this[0]",
					"aws_vpc.this",
					"var.private_subnet_ipv6_prefixes",
					"count.index",
				],
			},
			"tags": {
				"references": [
					"var.private_subnet_suffix",
					"var.name",
					"var.azs",
					"count.index",
					"var.tags",
					"var.private_subnet_tags",
				],
			},
			"vpc_id": {
				"references": [
					"local.vpc_id",
				],
			},
		},
		"count": {
			"references": [
				"var.create_vpc",
				"var.private_subnets",
				"var.private_subnets",
			],
		},
		"depends_on":          [],
		"for_each":            {},
		"mode":                "managed",
		"module_address":      "module.vpc",
		"name":                "private",
		"provider_config_key": "module.vpc:aws",
		"provisioners":        [],
		"type":                "aws_subnet",
	},
	"module.vpc.aws_subnet.public": {
		"address": "module.vpc.aws_subnet.public",
		"config": {
			"assign_ipv6_address_on_creation": {
				"references": [
					"var.public_subnet_assign_ipv6_address_on_creation",
					"var.assign_ipv6_address_on_creation",
					"var.public_subnet_assign_ipv6_address_on_creation",
				],
			},
			"availability_zone": {
				"references": [
					"var.azs",
					"count.index",
					"var.azs",
					"count.index",
				],
			},
			"availability_zone_id": {
				"references": [
					"var.azs",
					"count.index",
					"var.azs",
					"count.index",
				],
			},
			"cidr_block": {
				"references": [
					"var.public_subnets",
					"count.index",
				],
			},
			"ipv6_cidr_block": {
				"references": [
					"var.enable_ipv6",
					"var.public_subnet_ipv6_prefixes",
					"aws_vpc.this[0].ipv6_cidr_block",
					"aws_vpc.this[0]",
					"aws_vpc.this",
					"var.public_subnet_ipv6_prefixes",
					"count.index",
				],
			},
			"map_public_ip_on_launch": {
				"references": [
					"var.map_public_ip_on_launch",
				],
			},
			"tags": {
				"references": [
					"var.public_subnet_suffix",
					"var.name",
					"var.azs",
					"count.index",
					"var.tags",
					"var.public_subnet_tags",
				],
			},
			"vpc_id": {
				"references": [
					"local.vpc_id",
				],
			},
		},
		"count": {
			"references": [
				"var.create_vpc",
				"var.public_subnets",
				"var.one_nat_gateway_per_az",
				"var.public_subnets",
				"var.azs",
				"var.public_subnets",
			],
		},
		"depends_on":          [],
		"for_each":            {},
		"mode":                "managed",
		"module_address":      "module.vpc",
		"name":                "public",
		"provider_config_key": "module.vpc:aws",
		"provisioners":        [],
		"type":                "aws_subnet",
	},
	"module.vpc.aws_subnet.redshift": {
		"address": "module.vpc.aws_subnet.redshift",
		"config": {
			"assign_ipv6_address_on_creation": {
				"references": [
					"var.redshift_subnet_assign_ipv6_address_on_creation",
					"var.assign_ipv6_address_on_creation",
					"var.redshift_subnet_assign_ipv6_address_on_creation",
				],
			},
			"availability_zone": {
				"references": [
					"var.azs",
					"count.index",
					"var.azs",
					"count.index",
				],
			},
			"availability_zone_id": {
				"references": [
					"var.azs",
					"count.index",
					"var.azs",
					"count.index",
				],
			},
			"cidr_block": {
				"references": [
					"var.redshift_subnets",
					"count.index",
				],
			},
			"ipv6_cidr_block": {
				"references": [
					"var.enable_ipv6",
					"var.redshift_subnet_ipv6_prefixes",
					"aws_vpc.this[0].ipv6_cidr_block",
					"aws_vpc.this[0]",
					"aws_vpc.this",
					"var.redshift_subnet_ipv6_prefixes",
					"count.index",
				],
			},
			"tags": {
				"references": [
					"var.redshift_subnet_suffix",
					"var.name",
					"var.azs",
					"count.index",
					"var.tags",
					"var.redshift_subnet_tags",
				],
			},
			"vpc_id": {
				"references": [
					"local.vpc_id",
				],
			},
		},
		"count": {
			"references": [
				"var.create_vpc",
				"var.redshift_subnets",
				"var.redshift_subnets",
			],
		},
		"depends_on":          [],
		"for_each":            {},
		"mode":                "managed",
		"module_address":      "module.vpc",
		"name":                "redshift",
		"provider_config_key": "module.vpc:aws",
		"provisioners":        [],
		"type":                "aws_subnet",
	},
	"module.vpc.aws_vpc.this": {
		"address": "module.vpc.aws_vpc.this",
		"config": {
			"assign_generated_ipv6_cidr_block": {
				"references": [
					"var.enable_ipv6",
				],
			},
			"cidr_block": {
				"references": [
					"var.cidr",
				],
			},
			"enable_classiclink": {
				"references": [
					"var.enable_classiclink",
				],
			},
			"enable_classiclink_dns_support": {
				"references": [
					"var.enable_classiclink_dns_support",
				],
			},
			"enable_dns_hostnames": {
				"references": [
					"var.enable_dns_hostnames",
				],
			},
			"enable_dns_support": {
				"references": [
					"var.enable_dns_support",
				],
			},
			"instance_tenancy": {
				"references": [
					"var.instance_tenancy",
				],
			},
			"tags": {
				"references": [
					"var.name",
					"var.tags",
					"var.vpc_tags",
				],
			},
		},
		"count": {
			"references": [
				"var.create_vpc",
			],
		},
		"depends_on":          [],
		"for_each":            {},
		"mode":                "managed",
		"module_address":      "module.vpc",
		"name":                "this",
		"provider_config_key": "module.vpc:aws",
		"provisioners":        [],
		"type":                "aws_vpc",
	},
	"module.vpc.aws_vpc_dhcp_options.this": {
		"address": "module.vpc.aws_vpc_dhcp_options.this",
		"config": {
			"domain_name": {
				"references": [
					"var.dhcp_options_domain_name",
				],
			},
			"domain_name_servers": {
				"references": [
					"var.dhcp_options_domain_name_servers",
				],
			},
			"netbios_name_servers": {
				"references": [
					"var.dhcp_options_netbios_name_servers",
				],
			},
			"netbios_node_type": {
				"references": [
					"var.dhcp_options_netbios_node_type",
				],
			},
			"ntp_servers": {
				"references": [
					"var.dhcp_options_ntp_servers",
				],
			},
			"tags": {
				"references": [
					"var.name",
					"var.tags",
					"var.dhcp_options_tags",
				],
			},
		},
		"count": {
			"references": [
				"var.create_vpc",
				"var.enable_dhcp_options",
			],
		},
		"depends_on":          [],
		"for_each":            {},
		"mode":                "managed",
		"module_address":      "module.vpc",
		"name":                "this",
		"provider_config_key": "module.vpc:aws",
		"provisioners":        [],
		"type":                "aws_vpc_dhcp_options",
	},
	"module.vpc.aws_vpc_dhcp_options_association.this": {
		"address": "module.vpc.aws_vpc_dhcp_options_association.this",
		"config": {
			"dhcp_options_id": {
				"references": [
					"aws_vpc_dhcp_options.this[0].id",
					"aws_vpc_dhcp_options.this[0]",
					"aws_vpc_dhcp_options.this",
				],
			},
			"vpc_id": {
				"references": [
					"local.vpc_id",
				],
			},
		},
		"count": {
			"references": [
				"var.create_vpc",
				"var.enable_dhcp_options",
			],
		},
		"depends_on":          [],
		"for_each":            {},
		"mode":                "managed",
		"module_address":      "module.vpc",
		"name":                "this",
		"provider_config_key": "module.vpc:aws",
		"provisioners":        [],
		"type":                "aws_vpc_dhcp_options_association",
	},
	"module.vpc.aws_vpc_ipv4_cidr_block_association.this": {
		"address": "module.vpc.aws_vpc_ipv4_cidr_block_association.this",
		"config": {
			"cidr_block": {
				"references": [
					"var.secondary_cidr_blocks",
					"count.index",
				],
			},
			"vpc_id": {
				"references": [
					"aws_vpc.this[0].id",
					"aws_vpc.this[0]",
					"aws_vpc.this",
				],
			},
		},
		"count": {
			"references": [
				"var.create_vpc",
				"var.secondary_cidr_blocks",
				"var.secondary_cidr_blocks",
			],
		},
		"depends_on":          [],
		"for_each":            {},
		"mode":                "managed",
		"module_address":      "module.vpc",
		"name":                "this",
		"provider_config_key": "module.vpc:aws",
		"provisioners":        [],
		"type":                "aws_vpc_ipv4_cidr_block_association",
	},
	"module.vpc.aws_vpn_gateway.this": {
		"address": "module.vpc.aws_vpn_gateway.this",
		"config": {
			"amazon_side_asn": {
				"references": [
					"var.amazon_side_asn",
				],
			},
			"availability_zone": {
				"references": [
					"var.vpn_gateway_az",
				],
			},
			"tags": {
				"references": [
					"var.name",
					"var.tags",
					"var.vpn_gateway_tags",
				],
			},
			"vpc_id": {
				"references": [
					"local.vpc_id",
				],
			},
		},
		"count": {
			"references": [
				"var.create_vpc",
				"var.enable_vpn_gateway",
			],
		},
		"depends_on":          [],
		"for_each":            {},
		"mode":                "managed",
		"module_address":      "module.vpc",
		"name":                "this",
		"provider_config_key": "module.vpc:aws",
		"provisioners":        [],
		"type":                "aws_vpn_gateway",
	},
	"module.vpc.aws_vpn_gateway_attachment.this": {
		"address": "module.vpc.aws_vpn_gateway_attachment.this",
		"config": {
			"vpc_id": {
				"references": [
					"local.vpc_id",
				],
			},
			"vpn_gateway_id": {
				"references": [
					"var.vpn_gateway_id",
				],
			},
		},
		"count": {
			"references": [
				"var.vpn_gateway_id",
			],
		},
		"depends_on":          [],
		"for_each":            {},
		"mode":                "managed",
		"module_address":      "module.vpc",
		"name":                "this",
		"provider_config_key": "module.vpc:aws",
		"provisioners":        [],
		"type":                "aws_vpn_gateway_attachment",
	},
	"module.vpc.aws_vpn_gateway_route_propagation.intra": {
		"address": "module.vpc.aws_vpn_gateway_route_propagation.intra",
		"config": {
			"route_table_id": {
				"references": [
					"aws_route_table.intra",
					"count.index",
				],
			},
			"vpn_gateway_id": {
				"references": [
					"aws_vpn_gateway.this",
					"aws_vpn_gateway_attachment.this",
					"count.index",
				],
			},
		},
		"count": {
			"references": [
				"var.create_vpc",
				"var.propagate_intra_route_tables_vgw",
				"var.enable_vpn_gateway",
				"var.vpn_gateway_id",
				"var.intra_subnets",
			],
		},
		"depends_on":          [],
		"for_each":            {},
		"mode":                "managed",
		"module_address":      "module.vpc",
		"name":                "intra",
		"provider_config_key": "module.vpc:aws",
		"provisioners":        [],
		"type":                "aws_vpn_gateway_route_propagation",
	},
	"module.vpc.aws_vpn_gateway_route_propagation.private": {
		"address": "module.vpc.aws_vpn_gateway_route_propagation.private",
		"config": {
			"route_table_id": {
				"references": [
					"aws_route_table.private",
					"count.index",
				],
			},
			"vpn_gateway_id": {
				"references": [
					"aws_vpn_gateway.this",
					"aws_vpn_gateway_attachment.this",
					"count.index",
				],
			},
		},
		"count": {
			"references": [
				"var.create_vpc",
				"var.propagate_private_route_tables_vgw",
				"var.enable_vpn_gateway",
				"var.vpn_gateway_id",
				"var.private_subnets",
			],
		},
		"depends_on":          [],
		"for_each":            {},
		"mode":                "managed",
		"module_address":      "module.vpc",
		"name":                "private",
		"provider_config_key": "module.vpc:aws",
		"provisioners":        [],
		"type":                "aws_vpn_gateway_route_propagation",
	},
	"module.vpc.aws_vpn_gateway_route_propagation.public": {
		"address": "module.vpc.aws_vpn_gateway_route_propagation.public",
		"config": {
			"route_table_id": {
				"references": [
					"aws_route_table.public",
					"count.index",
				],
			},
			"vpn_gateway_id": {
				"references": [
					"aws_vpn_gateway.this",
					"aws_vpn_gateway_attachment.this",
					"count.index",
				],
			},
		},
		"count": {
			"references": [
				"var.create_vpc",
				"var.propagate_public_route_tables_vgw",
				"var.enable_vpn_gateway",
				"var.vpn_gateway_id",
			],
		},
		"depends_on":          [],
		"for_each":            {},
		"mode":                "managed",
		"module_address":      "module.vpc",
		"name":                "public",
		"provider_config_key": "module.vpc:aws",
		"provisioners":        [],
		"type":                "aws_vpn_gateway_route_propagation",
	},
	"module.vpc.data.aws_iam_policy_document.flow_log_cloudwatch_assume_role": {
		"address": "module.vpc.data.aws_iam_policy_document.flow_log_cloudwatch_assume_role",
		"config": {
			"statement": [
				{
					"actions": {
						"constant_value": [
							"sts:AssumeRole",
						],
					},
					"effect": {
						"constant_value": "Allow",
					},
					"principals": [
						{
							"identifiers": {
								"constant_value": [
									"vpc-flow-logs.amazonaws.com",
								],
							},
							"type": {
								"constant_value": "Service",
							},
						},
					],
				},
			],
		},
		"count": {
			"references": [
				"local.create_flow_log_cloudwatch_iam_role",
			],
		},
		"depends_on":          [],
		"for_each":            {},
		"mode":                "data",
		"module_address":      "module.vpc",
		"name":                "flow_log_cloudwatch_assume_role",
		"provider_config_key": "module.vpc:aws",
		"provisioners":        [],
		"type":                "aws_iam_policy_document",
	},
	"module.vpc.data.aws_iam_policy_document.vpc_flow_log_cloudwatch": {
		"address": "module.vpc.data.aws_iam_policy_document.vpc_flow_log_cloudwatch",
		"config": {
			"statement": [
				{
					"actions": {
						"constant_value": [
							"logs:CreateLogStream",
							"logs:PutLogEvents",
							"logs:DescribeLogGroups",
							"logs:DescribeLogStreams",
						],
					},
					"effect": {
						"constant_value": "Allow",
					},
					"resources": {
						"constant_value": [
							"*",
						],
					},
					"sid": {
						"constant_value": "AWSVPCFlowLogsPushToCloudWatch",
					},
				},
			],
		},
		"count": {
			"references": [
				"local.create_flow_log_cloudwatch_iam_role",
			],
		},
		"depends_on":          [],
		"for_each":            {},
		"mode":                "data",
		"module_address":      "module.vpc",
		"name":                "vpc_flow_log_cloudwatch",
		"provider_config_key": "module.vpc:aws",
		"provisioners":        [],
		"type":                "aws_iam_policy_document",
	},
	"random_string.suffix": {
		"address": "random_string.suffix",
		"config": {
			"length": {
				"constant_value": 8,
			},
			"special": {
				"constant_value": false,
			},
		},
		"count":               {},
		"depends_on":          [],
		"for_each":            {},
		"mode":                "managed",
		"module_address":      "",
		"name":                "suffix",
		"provider_config_key": "random",
		"provisioners":        [],
		"type":                "random_string",
	},
}

provisioners = {}

variables = {
	"module.eks.module.fargate:cluster_name": {
		"default":        "",
		"description":    "Name of the EKS cluster.",
		"module_address": "module.eks.module.fargate",
		"name":           "cluster_name",
	},
	"module.eks.module.fargate:create_eks": {
		"default":        true,
		"description":    "Controls if EKS resources should be created (it affects almost all resources)",
		"module_address": "module.eks.module.fargate",
		"name":           "create_eks",
	},
	"module.eks.module.fargate:create_fargate_pod_execution_role": {
		"default":        true,
		"description":    "Controls if the the IAM Role that provides permissions for the EKS Fargate Profile should be created.",
		"module_address": "module.eks.module.fargate",
		"name":           "create_fargate_pod_execution_role",
	},
	"module.eks.module.fargate:fargate_pod_execution_role_name": {
		"default":        null,
		"description":    "The IAM Role that provides permissions for the EKS Fargate Profile.",
		"module_address": "module.eks.module.fargate",
		"name":           "fargate_pod_execution_role_name",
	},
	"module.eks.module.fargate:fargate_profiles": {
		"default":        {},
		"description":    "Fargate profiles to create. See `fargate_profile` keys section in README.md for more details",
		"module_address": "module.eks.module.fargate",
		"name":           "fargate_profiles",
	},
	"module.eks.module.fargate:iam_path": {
		"default":        "/",
		"description":    "IAM roles will be created on this path.",
		"module_address": "module.eks.module.fargate",
		"name":           "iam_path",
	},
	"module.eks.module.fargate:permissions_boundary": {
		"default":        null,
		"description":    "If provided, all IAM roles will be created with this permissions boundary attached.",
		"module_address": "module.eks.module.fargate",
		"name":           "permissions_boundary",
	},
	"module.eks.module.fargate:subnets": {
		"default":        [],
		"description":    "A list of subnets for the EKS Fargate profiles.",
		"module_address": "module.eks.module.fargate",
		"name":           "subnets",
	},
	"module.eks.module.fargate:tags": {
		"default":        {},
		"description":    "A map of tags to add to all resources.",
		"module_address": "module.eks.module.fargate",
		"name":           "tags",
	},
	"module.eks.module.node_groups:cluster_auth_base64": {
		"default":        "",
		"description":    "Base64 encoded CA of parent cluster",
		"module_address": "module.eks.module.node_groups",
		"name":           "cluster_auth_base64",
	},
	"module.eks.module.node_groups:cluster_endpoint": {
		"default":        "",
		"description":    "Endpoint of parent cluster",
		"module_address": "module.eks.module.node_groups",
		"name":           "cluster_endpoint",
	},
	"module.eks.module.node_groups:cluster_name": {
		"default":        "",
		"description":    "Name of parent cluster",
		"module_address": "module.eks.module.node_groups",
		"name":           "cluster_name",
	},
	"module.eks.module.node_groups:create_eks": {
		"default":        true,
		"description":    "Controls if EKS resources should be created (it affects almost all resources)",
		"module_address": "module.eks.module.node_groups",
		"name":           "create_eks",
	},
	"module.eks.module.node_groups:default_iam_role_arn": {
		"default":        "",
		"description":    "ARN of the default IAM worker role to use if one is not specified in `var.node_groups` or `var.node_groups_defaults`",
		"module_address": "module.eks.module.node_groups",
		"name":           "default_iam_role_arn",
	},
	"module.eks.module.node_groups:ebs_optimized_not_supported": {
		"default":        [],
		"description":    "List of instance types that do not support EBS optimization",
		"module_address": "module.eks.module.node_groups",
		"name":           "ebs_optimized_not_supported",
	},
	"module.eks.module.node_groups:node_groups": {
		"default":        {},
		"description":    "Map of maps of `eks_node_groups` to create. See \"`node_groups` and `node_groups_defaults` keys\" section in README.md for more details",
		"module_address": "module.eks.module.node_groups",
		"name":           "node_groups",
	},
	"module.eks.module.node_groups:node_groups_defaults": {
		"default":        {},
		"description":    "map of maps of node groups to create. See \"`node_groups` and `node_groups_defaults` keys\" section in README.md for more details",
		"module_address": "module.eks.module.node_groups",
		"name":           "node_groups_defaults",
	},
	"module.eks.module.node_groups:tags": {
		"default":        {},
		"description":    "A map of tags to add to all resources",
		"module_address": "module.eks.module.node_groups",
		"name":           "tags",
	},
	"module.eks.module.node_groups:worker_additional_security_group_ids": {
		"default":        [],
		"description":    "A list of additional security group ids to attach to worker instances",
		"module_address": "module.eks.module.node_groups",
		"name":           "worker_additional_security_group_ids",
	},
	"module.eks.module.node_groups:worker_security_group_id": {
		"default":        "",
		"description":    "If provided, all workers will be attached to this security group. If not given, a security group will be created with necessary ingress/egress to work with the EKS cluster.",
		"module_address": "module.eks.module.node_groups",
		"name":           "worker_security_group_id",
	},
	"module.eks.module.node_groups:workers_group_defaults": {
		"default":        {},
		"description":    "Workers group defaults from parent",
		"module_address": "module.eks.module.node_groups",
		"name":           "workers_group_defaults",
	},
	"module.eks:attach_worker_cni_policy": {
		"default":        true,
		"description":    "Whether to attach the Amazon managed `AmazonEKS_CNI_Policy` IAM policy to the default worker IAM role. WARNING: If set `false` the permissions must be assigned to the `aws-node` DaemonSet pods via another method or nodes will not be able to join the cluster.",
		"module_address": "module.eks",
		"name":           "attach_worker_cni_policy",
	},
	"module.eks:aws_auth_additional_labels": {
		"default":        {},
		"description":    "Additional kubernetes labels applied on aws-auth ConfigMap",
		"module_address": "module.eks",
		"name":           "aws_auth_additional_labels",
	},
	"module.eks:cluster_create_endpoint_private_access_sg_rule": {
		"default":        false,
		"description":    "Whether to create security group rules for the access to the Amazon EKS private API server endpoint. When is `true`, `cluster_endpoint_private_access_cidrs` must be setted.",
		"module_address": "module.eks",
		"name":           "cluster_create_endpoint_private_access_sg_rule",
	},
	"module.eks:cluster_create_security_group": {
		"default":        true,
		"description":    "Whether to create a security group for the cluster or attach the cluster to `cluster_security_group_id`.",
		"module_address": "module.eks",
		"name":           "cluster_create_security_group",
	},
	"module.eks:cluster_create_timeout": {
		"default":        "30m",
		"description":    "Timeout value when creating the EKS cluster.",
		"module_address": "module.eks",
		"name":           "cluster_create_timeout",
	},
	"module.eks:cluster_delete_timeout": {
		"default":        "15m",
		"description":    "Timeout value when deleting the EKS cluster.",
		"module_address": "module.eks",
		"name":           "cluster_delete_timeout",
	},
	"module.eks:cluster_egress_cidrs": {
		"default": [
			"0.0.0.0/0",
		],
		"description":    "List of CIDR blocks that are permitted for cluster egress traffic.",
		"module_address": "module.eks",
		"name":           "cluster_egress_cidrs",
	},
	"module.eks:cluster_enabled_log_types": {
		"default":        [],
		"description":    "A list of the desired control plane logging to enable. For more information, see Amazon EKS Control Plane Logging documentation (https://docs.aws.amazon.com/eks/latest/userguide/control-plane-logs.html)",
		"module_address": "module.eks",
		"name":           "cluster_enabled_log_types",
	},
	"module.eks:cluster_encryption_config": {
		"default":        [],
		"description":    "Configuration block with encryption configuration for the cluster. See examples/secrets_encryption/main.tf for example format",
		"module_address": "module.eks",
		"name":           "cluster_encryption_config",
	},
	"module.eks:cluster_endpoint_private_access": {
		"default":        false,
		"description":    "Indicates whether or not the Amazon EKS private API server endpoint is enabled.",
		"module_address": "module.eks",
		"name":           "cluster_endpoint_private_access",
	},
	"module.eks:cluster_endpoint_private_access_cidrs": {
		"default":        null,
		"description":    "List of CIDR blocks which can access the Amazon EKS private API server endpoint. To use this `cluster_endpoint_private_access` and `cluster_create_endpoint_private_access_sg_rule` must be set to `true`.",
		"module_address": "module.eks",
		"name":           "cluster_endpoint_private_access_cidrs",
	},
	"module.eks:cluster_endpoint_private_access_sg": {
		"default":        null,
		"description":    "List of security group IDs which can access the Amazon EKS private API server endpoint. To use this `cluster_endpoint_private_access` and `cluster_create_endpoint_private_access_sg_rule` must be set to `true`.",
		"module_address": "module.eks",
		"name":           "cluster_endpoint_private_access_sg",
	},
	"module.eks:cluster_endpoint_public_access": {
		"default":        true,
		"description":    "Indicates whether or not the Amazon EKS public API server endpoint is enabled. When it's set to `false` ensure to have a proper private access with `cluster_endpoint_private_access = true`.",
		"module_address": "module.eks",
		"name":           "cluster_endpoint_public_access",
	},
	"module.eks:cluster_endpoint_public_access_cidrs": {
		"default": [
			"0.0.0.0/0",
		],
		"description":    "List of CIDR blocks which can access the Amazon EKS public API server endpoint.",
		"module_address": "module.eks",
		"name":           "cluster_endpoint_public_access_cidrs",
	},
	"module.eks:cluster_iam_role_name": {
		"default":        "",
		"description":    "IAM role name for the cluster. If manage_cluster_iam_resources is set to false, set this to reuse an existing IAM role. If manage_cluster_iam_resources is set to true, set this to force the created role name.",
		"module_address": "module.eks",
		"name":           "cluster_iam_role_name",
	},
	"module.eks:cluster_log_kms_key_id": {
		"default":        "",
		"description":    "If a KMS Key ARN is set, this key will be used to encrypt the corresponding log group. Please be sure that the KMS Key has an appropriate key policy (https://docs.aws.amazon.com/AmazonCloudWatch/latest/logs/encrypt-log-data-kms.html)",
		"module_address": "module.eks",
		"name":           "cluster_log_kms_key_id",
	},
	"module.eks:cluster_log_retention_in_days": {
		"default":        90,
		"description":    "Number of days to retain log events. Default retention - 90 days.",
		"module_address": "module.eks",
		"name":           "cluster_log_retention_in_days",
	},
	"module.eks:cluster_name": {
		"default":        "",
		"description":    "Name of the EKS cluster. Also used as a prefix in names of related resources.",
		"module_address": "module.eks",
		"name":           "cluster_name",
	},
	"module.eks:cluster_security_group_id": {
		"default":        "",
		"description":    "If provided, the EKS cluster will be attached to this security group. If not given, a security group will be created with necessary ingress/egress to work with the workers",
		"module_address": "module.eks",
		"name":           "cluster_security_group_id",
	},
	"module.eks:cluster_service_ipv4_cidr": {
		"default":        null,
		"description":    "service ipv4 cidr for the kubernetes cluster",
		"module_address": "module.eks",
		"name":           "cluster_service_ipv4_cidr",
	},
	"module.eks:cluster_tags": {
		"default":        {},
		"description":    "A map of tags to add to just the eks resource.",
		"module_address": "module.eks",
		"name":           "cluster_tags",
	},
	"module.eks:cluster_update_timeout": {
		"default":        "60m",
		"description":    "Timeout value when updating the EKS cluster.",
		"module_address": "module.eks",
		"name":           "cluster_update_timeout",
	},
	"module.eks:cluster_version": {
		"default":        null,
		"description":    "Kubernetes minor version to use for the EKS cluster (for example 1.21).",
		"module_address": "module.eks",
		"name":           "cluster_version",
	},
	"module.eks:create_eks": {
		"default":        true,
		"description":    "Controls if EKS resources should be created (it affects almost all resources)",
		"module_address": "module.eks",
		"name":           "create_eks",
	},
	"module.eks:create_fargate_pod_execution_role": {
		"default":        true,
		"description":    "Controls if the EKS Fargate pod execution IAM role should be created.",
		"module_address": "module.eks",
		"name":           "create_fargate_pod_execution_role",
	},
	"module.eks:default_platform": {
		"default":        "linux",
		"description":    "Default platform name. Valid options are `linux` and `windows`.",
		"module_address": "module.eks",
		"name":           "default_platform",
	},
	"module.eks:eks_oidc_root_ca_thumbprint": {
		"default":        "9e99a48a9960b14926bb7f3b02e22da2b0ab7280",
		"description":    "Thumbprint of Root CA for EKS OIDC, Valid until 2037",
		"module_address": "module.eks",
		"name":           "eks_oidc_root_ca_thumbprint",
	},
	"module.eks:enable_irsa": {
		"default":        false,
		"description":    "Whether to create OpenID Connect Provider for EKS to enable IRSA",
		"module_address": "module.eks",
		"name":           "enable_irsa",
	},
	"module.eks:fargate_pod_execution_role_name": {
		"default":        null,
		"description":    "The IAM Role that provides permissions for the EKS Fargate Profile.",
		"module_address": "module.eks",
		"name":           "fargate_pod_execution_role_name",
	},
	"module.eks:fargate_profiles": {
		"default":        {},
		"description":    "Fargate profiles to create. See `fargate_profile` keys section in fargate submodule's README.md for more details",
		"module_address": "module.eks",
		"name":           "fargate_profiles",
	},
	"module.eks:fargate_subnets": {
		"default":        [],
		"description":    "A list of subnets to place fargate workers within (if different from subnets).",
		"module_address": "module.eks",
		"name":           "fargate_subnets",
	},
	"module.eks:iam_path": {
		"default":        "/",
		"description":    "If provided, all IAM roles will be created on this path.",
		"module_address": "module.eks",
		"name":           "iam_path",
	},
	"module.eks:kubeconfig_api_version": {
		"default":        "client.authentication.k8s.io/v1alpha1",
		"description":    "KubeConfig API version. Defaults to client.authentication.k8s.io/v1alpha1",
		"module_address": "module.eks",
		"name":           "kubeconfig_api_version",
	},
	"module.eks:kubeconfig_aws_authenticator_additional_args": {
		"default":        [],
		"description":    "Any additional arguments to pass to the authenticator such as the role to assume. e.g. [\"-r\", \"MyEksRole\"].",
		"module_address": "module.eks",
		"name":           "kubeconfig_aws_authenticator_additional_args",
	},
	"module.eks:kubeconfig_aws_authenticator_command": {
		"default":        "aws-iam-authenticator",
		"description":    "Command to use to fetch AWS EKS credentials.",
		"module_address": "module.eks",
		"name":           "kubeconfig_aws_authenticator_command",
	},
	"module.eks:kubeconfig_aws_authenticator_command_args": {
		"default":        [],
		"description":    "Default arguments passed to the authenticator command. Defaults to [token -i $cluster_name].",
		"module_address": "module.eks",
		"name":           "kubeconfig_aws_authenticator_command_args",
	},
	"module.eks:kubeconfig_aws_authenticator_env_variables": {
		"default":        {},
		"description":    "Environment variables that should be used when executing the authenticator. e.g. { AWS_PROFILE = \"eks\"}.",
		"module_address": "module.eks",
		"name":           "kubeconfig_aws_authenticator_env_variables",
	},
	"module.eks:kubeconfig_file_permission": {
		"default":        "0600",
		"description":    "File permission of the Kubectl config file containing cluster configuration saved to `kubeconfig_output_path.`",
		"module_address": "module.eks",
		"name":           "kubeconfig_file_permission",
	},
	"module.eks:kubeconfig_name": {
		"default":        "",
		"description":    "Override the default name used for items kubeconfig.",
		"module_address": "module.eks",
		"name":           "kubeconfig_name",
	},
	"module.eks:kubeconfig_output_path": {
		"default":        "./",
		"description":    "Where to save the Kubectl config file (if `write_kubeconfig = true`). Assumed to be a directory if the value ends with a forward slash `/`.",
		"module_address": "module.eks",
		"name":           "kubeconfig_output_path",
	},
	"module.eks:manage_aws_auth": {
		"default":        true,
		"description":    "Whether to apply the aws-auth configmap file.",
		"module_address": "module.eks",
		"name":           "manage_aws_auth",
	},
	"module.eks:manage_cluster_iam_resources": {
		"default":        true,
		"description":    "Whether to let the module manage cluster IAM resources. If set to false, cluster_iam_role_name must be specified.",
		"module_address": "module.eks",
		"name":           "manage_cluster_iam_resources",
	},
	"module.eks:manage_worker_iam_resources": {
		"default":        true,
		"description":    "Whether to let the module manage worker IAM resources. If set to false, iam_instance_profile_name must be specified for workers.",
		"module_address": "module.eks",
		"name":           "manage_worker_iam_resources",
	},
	"module.eks:map_accounts": {
		"default":        [],
		"description":    "Additional AWS account numbers to add to the aws-auth configmap.",
		"module_address": "module.eks",
		"name":           "map_accounts",
	},
	"module.eks:map_roles": {
		"default":        [],
		"description":    "Additional IAM roles to add to the aws-auth configmap.",
		"module_address": "module.eks",
		"name":           "map_roles",
	},
	"module.eks:map_users": {
		"default":        [],
		"description":    "Additional IAM users to add to the aws-auth configmap.",
		"module_address": "module.eks",
		"name":           "map_users",
	},
	"module.eks:node_groups": {
		"default":        {},
		"description":    "Map of map of node groups to create. See `node_groups` module's documentation for more details",
		"module_address": "module.eks",
		"name":           "node_groups",
	},
	"module.eks:node_groups_defaults": {
		"default":        {},
		"description":    "Map of values to be applied to all node groups. See `node_groups` module's documentation for more details",
		"module_address": "module.eks",
		"name":           "node_groups_defaults",
	},
	"module.eks:openid_connect_audiences": {
		"default":        [],
		"description":    "List of OpenID Connect audience client IDs to add to the IRSA provider.",
		"module_address": "module.eks",
		"name":           "openid_connect_audiences",
	},
	"module.eks:permissions_boundary": {
		"default":        null,
		"description":    "If provided, all IAM roles will be created with this permissions boundary attached.",
		"module_address": "module.eks",
		"name":           "permissions_boundary",
	},
	"module.eks:subnets": {
		"default":        [],
		"description":    "A list of subnets to place the EKS cluster and workers within.",
		"module_address": "module.eks",
		"name":           "subnets",
	},
	"module.eks:tags": {
		"default":        {},
		"description":    "A map of tags to add to all resources. Tags added to launch configuration or templates override these values for ASG Tags only.",
		"module_address": "module.eks",
		"name":           "tags",
	},
	"module.eks:vpc_id": {
		"default":        null,
		"description":    "VPC where the cluster and workers will be deployed.",
		"module_address": "module.eks",
		"name":           "vpc_id",
	},
	"module.eks:wait_for_cluster_timeout": {
		"default":        300,
		"description":    "A timeout (in seconds) to wait for cluster to be available.",
		"module_address": "module.eks",
		"name":           "wait_for_cluster_timeout",
	},
	"module.eks:worker_additional_security_group_ids": {
		"default":        [],
		"description":    "A list of additional security group ids to attach to worker instances",
		"module_address": "module.eks",
		"name":           "worker_additional_security_group_ids",
	},
	"module.eks:worker_ami_name_filter": {
		"default":        "",
		"description":    "Name filter for AWS EKS worker AMI. If not provided, the latest official AMI for the specified 'cluster_version' is used.",
		"module_address": "module.eks",
		"name":           "worker_ami_name_filter",
	},
	"module.eks:worker_ami_name_filter_windows": {
		"default":        "",
		"description":    "Name filter for AWS EKS Windows worker AMI. If not provided, the latest official AMI for the specified 'cluster_version' is used.",
		"module_address": "module.eks",
		"name":           "worker_ami_name_filter_windows",
	},
	"module.eks:worker_ami_owner_id": {
		"default":        "amazon",
		"description":    "The ID of the owner for the AMI to use for the AWS EKS workers. Valid values are an AWS account ID, 'self' (the current account), or an AWS owner alias (e.g. 'amazon', 'aws-marketplace', 'microsoft').",
		"module_address": "module.eks",
		"name":           "worker_ami_owner_id",
	},
	"module.eks:worker_ami_owner_id_windows": {
		"default":        "amazon",
		"description":    "The ID of the owner for the AMI to use for the AWS EKS Windows workers. Valid values are an AWS account ID, 'self' (the current account), or an AWS owner alias (e.g. 'amazon', 'aws-marketplace', 'microsoft').",
		"module_address": "module.eks",
		"name":           "worker_ami_owner_id_windows",
	},
	"module.eks:worker_create_cluster_primary_security_group_rules": {
		"default":        false,
		"description":    "Whether to create security group rules to allow communication between pods on workers and pods using the primary cluster security group.",
		"module_address": "module.eks",
		"name":           "worker_create_cluster_primary_security_group_rules",
	},
	"module.eks:worker_create_initial_lifecycle_hooks": {
		"default":        false,
		"description":    "Whether to create initial lifecycle hooks provided in worker groups.",
		"module_address": "module.eks",
		"name":           "worker_create_initial_lifecycle_hooks",
	},
	"module.eks:worker_create_security_group": {
		"default":        true,
		"description":    "Whether to create a security group for the workers or attach the workers to `worker_security_group_id`.",
		"module_address": "module.eks",
		"name":           "worker_create_security_group",
	},
	"module.eks:worker_groups": {
		"default":        [],
		"description":    "A list of maps defining worker group configurations to be defined using AWS Launch Configurations. See workers_group_defaults for valid keys.",
		"module_address": "module.eks",
		"name":           "worker_groups",
	},
	"module.eks:worker_groups_launch_template": {
		"default":        [],
		"description":    "A list of maps defining worker group configurations to be defined using AWS Launch Templates. See workers_group_defaults for valid keys.",
		"module_address": "module.eks",
		"name":           "worker_groups_launch_template",
	},
	"module.eks:worker_security_group_id": {
		"default":        "",
		"description":    "If provided, all workers will be attached to this security group. If not given, a security group will be created with necessary ingress/egress to work with the EKS cluster.",
		"module_address": "module.eks",
		"name":           "worker_security_group_id",
	},
	"module.eks:worker_sg_ingress_from_port": {
		"default":        1025,
		"description":    "Minimum port number from which pods will accept communication. Must be changed to a lower value if some pods in your cluster will expose a port lower than 1025 (e.g. 22, 80, or 443).",
		"module_address": "module.eks",
		"name":           "worker_sg_ingress_from_port",
	},
	"module.eks:workers_additional_policies": {
		"default":        [],
		"description":    "Additional policies to be added to workers",
		"module_address": "module.eks",
		"name":           "workers_additional_policies",
	},
	"module.eks:workers_egress_cidrs": {
		"default": [
			"0.0.0.0/0",
		],
		"description":    "List of CIDR blocks that are permitted for workers egress traffic.",
		"module_address": "module.eks",
		"name":           "workers_egress_cidrs",
	},
	"module.eks:workers_group_defaults": {
		"default":        {},
		"description":    "Override default values for target groups. See workers_group_defaults_defaults in local.tf for valid keys.",
		"module_address": "module.eks",
		"name":           "workers_group_defaults",
	},
	"module.eks:workers_role_name": {
		"default":        "",
		"description":    "User defined workers role name.",
		"module_address": "module.eks",
		"name":           "workers_role_name",
	},
	"module.eks:write_kubeconfig": {
		"default":        true,
		"description":    "Whether to write a Kubectl config file containing the cluster configuration. Saved to `kubeconfig_output_path`.",
		"module_address": "module.eks",
		"name":           "write_kubeconfig",
	},
	"module.vpc:amazon_side_asn": {
		"default":        "64512",
		"description":    "The Autonomous System Number (ASN) for the Amazon side of the gateway. By default the virtual private gateway is created with the current default Amazon ASN.",
		"module_address": "module.vpc",
		"name":           "amazon_side_asn",
	},
	"module.vpc:assign_ipv6_address_on_creation": {
		"default":        false,
		"description":    "Assign IPv6 address on subnet, must be disabled to change IPv6 CIDRs. This is the IPv6 equivalent of map_public_ip_on_launch",
		"module_address": "module.vpc",
		"name":           "assign_ipv6_address_on_creation",
	},
	"module.vpc:azs": {
		"default":        [],
		"description":    "A list of availability zones names or ids in the region",
		"module_address": "module.vpc",
		"name":           "azs",
	},
	"module.vpc:cidr": {
		"default":        "0.0.0.0/0",
		"description":    "The CIDR block for the VPC. Default value is a valid CIDR, but not acceptable by AWS and should be overridden",
		"module_address": "module.vpc",
		"name":           "cidr",
	},
	"module.vpc:create_database_internet_gateway_route": {
		"default":        false,
		"description":    "Controls if an internet gateway route for public database access should be created",
		"module_address": "module.vpc",
		"name":           "create_database_internet_gateway_route",
	},
	"module.vpc:create_database_nat_gateway_route": {
		"default":        false,
		"description":    "Controls if a nat gateway route should be created to give internet access to the database subnets",
		"module_address": "module.vpc",
		"name":           "create_database_nat_gateway_route",
	},
	"module.vpc:create_database_subnet_group": {
		"default":        true,
		"description":    "Controls if database subnet group should be created (n.b. database_subnets must also be set)",
		"module_address": "module.vpc",
		"name":           "create_database_subnet_group",
	},
	"module.vpc:create_database_subnet_route_table": {
		"default":        false,
		"description":    "Controls if separate route table for database should be created",
		"module_address": "module.vpc",
		"name":           "create_database_subnet_route_table",
	},
	"module.vpc:create_egress_only_igw": {
		"default":        true,
		"description":    "Controls if an Egress Only Internet Gateway is created and its related routes.",
		"module_address": "module.vpc",
		"name":           "create_egress_only_igw",
	},
	"module.vpc:create_elasticache_subnet_group": {
		"default":        true,
		"description":    "Controls if elasticache subnet group should be created",
		"module_address": "module.vpc",
		"name":           "create_elasticache_subnet_group",
	},
	"module.vpc:create_elasticache_subnet_route_table": {
		"default":        false,
		"description":    "Controls if separate route table for elasticache should be created",
		"module_address": "module.vpc",
		"name":           "create_elasticache_subnet_route_table",
	},
	"module.vpc:create_flow_log_cloudwatch_iam_role": {
		"default":        false,
		"description":    "Whether to create IAM role for VPC Flow Logs",
		"module_address": "module.vpc",
		"name":           "create_flow_log_cloudwatch_iam_role",
	},
	"module.vpc:create_flow_log_cloudwatch_log_group": {
		"default":        false,
		"description":    "Whether to create CloudWatch log group for VPC Flow Logs",
		"module_address": "module.vpc",
		"name":           "create_flow_log_cloudwatch_log_group",
	},
	"module.vpc:create_igw": {
		"default":        true,
		"description":    "Controls if an Internet Gateway is created for public subnets and the related routes that connect them.",
		"module_address": "module.vpc",
		"name":           "create_igw",
	},
	"module.vpc:create_redshift_subnet_group": {
		"default":        true,
		"description":    "Controls if redshift subnet group should be created",
		"module_address": "module.vpc",
		"name":           "create_redshift_subnet_group",
	},
	"module.vpc:create_redshift_subnet_route_table": {
		"default":        false,
		"description":    "Controls if separate route table for redshift should be created",
		"module_address": "module.vpc",
		"name":           "create_redshift_subnet_route_table",
	},
	"module.vpc:create_vpc": {
		"default":        true,
		"description":    "Controls if VPC should be created (it affects almost all resources)",
		"module_address": "module.vpc",
		"name":           "create_vpc",
	},
	"module.vpc:customer_gateway_tags": {
		"default":        {},
		"description":    "Additional tags for the Customer Gateway",
		"module_address": "module.vpc",
		"name":           "customer_gateway_tags",
	},
	"module.vpc:customer_gateways": {
		"default":        {},
		"description":    "Maps of Customer Gateway's attributes (BGP ASN and Gateway's Internet-routable external IP address)",
		"module_address": "module.vpc",
		"name":           "customer_gateways",
	},
	"module.vpc:database_acl_tags": {
		"default":        {},
		"description":    "Additional tags for the database subnets network ACL",
		"module_address": "module.vpc",
		"name":           "database_acl_tags",
	},
	"module.vpc:database_dedicated_network_acl": {
		"default":        false,
		"description":    "Whether to use dedicated network ACL (not default) and custom rules for database subnets",
		"module_address": "module.vpc",
		"name":           "database_dedicated_network_acl",
	},
	"module.vpc:database_inbound_acl_rules": {
		"default": [
			{
				"cidr_block":  "0.0.0.0/0",
				"from_port":   "0",
				"protocol":    "-1",
				"rule_action": "allow",
				"rule_number": "100",
				"to_port":     "0",
			},
		],
		"description":    "Database subnets inbound network ACL rules",
		"module_address": "module.vpc",
		"name":           "database_inbound_acl_rules",
	},
	"module.vpc:database_outbound_acl_rules": {
		"default": [
			{
				"cidr_block":  "0.0.0.0/0",
				"from_port":   "0",
				"protocol":    "-1",
				"rule_action": "allow",
				"rule_number": "100",
				"to_port":     "0",
			},
		],
		"description":    "Database subnets outbound network ACL rules",
		"module_address": "module.vpc",
		"name":           "database_outbound_acl_rules",
	},
	"module.vpc:database_route_table_tags": {
		"default":        {},
		"description":    "Additional tags for the database route tables",
		"module_address": "module.vpc",
		"name":           "database_route_table_tags",
	},
	"module.vpc:database_subnet_assign_ipv6_address_on_creation": {
		"default":        null,
		"description":    "Assign IPv6 address on database subnet, must be disabled to change IPv6 CIDRs. This is the IPv6 equivalent of map_public_ip_on_launch",
		"module_address": "module.vpc",
		"name":           "database_subnet_assign_ipv6_address_on_creation",
	},
	"module.vpc:database_subnet_group_name": {
		"default":        null,
		"description":    "Name of database subnet group",
		"module_address": "module.vpc",
		"name":           "database_subnet_group_name",
	},
	"module.vpc:database_subnet_group_tags": {
		"default":        {},
		"description":    "Additional tags for the database subnet group",
		"module_address": "module.vpc",
		"name":           "database_subnet_group_tags",
	},
	"module.vpc:database_subnet_ipv6_prefixes": {
		"default":        [],
		"description":    "Assigns IPv6 database subnet id based on the Amazon provided /56 prefix base 10 integer (0-256). Must be of equal length to the corresponding IPv4 subnet list",
		"module_address": "module.vpc",
		"name":           "database_subnet_ipv6_prefixes",
	},
	"module.vpc:database_subnet_suffix": {
		"default":        "db",
		"description":    "Suffix to append to database subnets name",
		"module_address": "module.vpc",
		"name":           "database_subnet_suffix",
	},
	"module.vpc:database_subnet_tags": {
		"default":        {},
		"description":    "Additional tags for the database subnets",
		"module_address": "module.vpc",
		"name":           "database_subnet_tags",
	},
	"module.vpc:database_subnets": {
		"default":        [],
		"description":    "A list of database subnets",
		"module_address": "module.vpc",
		"name":           "database_subnets",
	},
	"module.vpc:default_network_acl_egress": {
		"default": [
			{
				"action":     "allow",
				"cidr_block": "0.0.0.0/0",
				"from_port":  "0",
				"protocol":   "-1",
				"rule_no":    "100",
				"to_port":    "0",
			},
			{
				"action":          "allow",
				"from_port":       "0",
				"ipv6_cidr_block": "::/0",
				"protocol":        "-1",
				"rule_no":         "101",
				"to_port":         "0",
			},
		],
		"description":    "List of maps of egress rules to set on the Default Network ACL",
		"module_address": "module.vpc",
		"name":           "default_network_acl_egress",
	},
	"module.vpc:default_network_acl_ingress": {
		"default": [
			{
				"action":     "allow",
				"cidr_block": "0.0.0.0/0",
				"from_port":  "0",
				"protocol":   "-1",
				"rule_no":    "100",
				"to_port":    "0",
			},
			{
				"action":          "allow",
				"from_port":       "0",
				"ipv6_cidr_block": "::/0",
				"protocol":        "-1",
				"rule_no":         "101",
				"to_port":         "0",
			},
		],
		"description":    "List of maps of ingress rules to set on the Default Network ACL",
		"module_address": "module.vpc",
		"name":           "default_network_acl_ingress",
	},
	"module.vpc:default_network_acl_name": {
		"default":        "",
		"description":    "Name to be used on the Default Network ACL",
		"module_address": "module.vpc",
		"name":           "default_network_acl_name",
	},
	"module.vpc:default_network_acl_tags": {
		"default":        {},
		"description":    "Additional tags for the Default Network ACL",
		"module_address": "module.vpc",
		"name":           "default_network_acl_tags",
	},
	"module.vpc:default_route_table_propagating_vgws": {
		"default":        [],
		"description":    "List of virtual gateways for propagation",
		"module_address": "module.vpc",
		"name":           "default_route_table_propagating_vgws",
	},
	"module.vpc:default_route_table_routes": {
		"default":        [],
		"description":    "Configuration block of routes. See https://registry.terraform.io/providers/hashicorp/aws/latest/docs/resources/default_route_table#route",
		"module_address": "module.vpc",
		"name":           "default_route_table_routes",
	},
	"module.vpc:default_route_table_tags": {
		"default":        {},
		"description":    "Additional tags for the default route table",
		"module_address": "module.vpc",
		"name":           "default_route_table_tags",
	},
	"module.vpc:default_security_group_egress": {
		"default":        null,
		"description":    "List of maps of egress rules to set on the default security group",
		"module_address": "module.vpc",
		"name":           "default_security_group_egress",
	},
	"module.vpc:default_security_group_ingress": {
		"default":        null,
		"description":    "List of maps of ingress rules to set on the default security group",
		"module_address": "module.vpc",
		"name":           "default_security_group_ingress",
	},
	"module.vpc:default_security_group_name": {
		"default":        "default",
		"description":    "Name to be used on the default security group",
		"module_address": "module.vpc",
		"name":           "default_security_group_name",
	},
	"module.vpc:default_security_group_tags": {
		"default":        {},
		"description":    "Additional tags for the default security group",
		"module_address": "module.vpc",
		"name":           "default_security_group_tags",
	},
	"module.vpc:default_vpc_enable_classiclink": {
		"default":        false,
		"description":    "Should be true to enable ClassicLink in the Default VPC",
		"module_address": "module.vpc",
		"name":           "default_vpc_enable_classiclink",
	},
	"module.vpc:default_vpc_enable_dns_hostnames": {
		"default":        false,
		"description":    "Should be true to enable DNS hostnames in the Default VPC",
		"module_address": "module.vpc",
		"name":           "default_vpc_enable_dns_hostnames",
	},
	"module.vpc:default_vpc_enable_dns_support": {
		"default":        true,
		"description":    "Should be true to enable DNS support in the Default VPC",
		"module_address": "module.vpc",
		"name":           "default_vpc_enable_dns_support",
	},
	"module.vpc:default_vpc_name": {
		"default":        "",
		"description":    "Name to be used on the Default VPC",
		"module_address": "module.vpc",
		"name":           "default_vpc_name",
	},
	"module.vpc:default_vpc_tags": {
		"default":        {},
		"description":    "Additional tags for the Default VPC",
		"module_address": "module.vpc",
		"name":           "default_vpc_tags",
	},
	"module.vpc:dhcp_options_domain_name": {
		"default":        "",
		"description":    "Specifies DNS name for DHCP options set (requires enable_dhcp_options set to true)",
		"module_address": "module.vpc",
		"name":           "dhcp_options_domain_name",
	},
	"module.vpc:dhcp_options_domain_name_servers": {
		"default": [
			"AmazonProvidedDNS",
		],
		"description":    "Specify a list of DNS server addresses for DHCP options set, default to AWS provided (requires enable_dhcp_options set to true)",
		"module_address": "module.vpc",
		"name":           "dhcp_options_domain_name_servers",
	},
	"module.vpc:dhcp_options_netbios_name_servers": {
		"default":        [],
		"description":    "Specify a list of netbios servers for DHCP options set (requires enable_dhcp_options set to true)",
		"module_address": "module.vpc",
		"name":           "dhcp_options_netbios_name_servers",
	},
	"module.vpc:dhcp_options_netbios_node_type": {
		"default":        "",
		"description":    "Specify netbios node_type for DHCP options set (requires enable_dhcp_options set to true)",
		"module_address": "module.vpc",
		"name":           "dhcp_options_netbios_node_type",
	},
	"module.vpc:dhcp_options_ntp_servers": {
		"default":        [],
		"description":    "Specify a list of NTP servers for DHCP options set (requires enable_dhcp_options set to true)",
		"module_address": "module.vpc",
		"name":           "dhcp_options_ntp_servers",
	},
	"module.vpc:dhcp_options_tags": {
		"default":        {},
		"description":    "Additional tags for the DHCP option set (requires enable_dhcp_options set to true)",
		"module_address": "module.vpc",
		"name":           "dhcp_options_tags",
	},
	"module.vpc:elasticache_acl_tags": {
		"default":        {},
		"description":    "Additional tags for the elasticache subnets network ACL",
		"module_address": "module.vpc",
		"name":           "elasticache_acl_tags",
	},
	"module.vpc:elasticache_dedicated_network_acl": {
		"default":        false,
		"description":    "Whether to use dedicated network ACL (not default) and custom rules for elasticache subnets",
		"module_address": "module.vpc",
		"name":           "elasticache_dedicated_network_acl",
	},
	"module.vpc:elasticache_inbound_acl_rules": {
		"default": [
			{
				"cidr_block":  "0.0.0.0/0",
				"from_port":   "0",
				"protocol":    "-1",
				"rule_action": "allow",
				"rule_number": "100",
				"to_port":     "0",
			},
		],
		"description":    "Elasticache subnets inbound network ACL rules",
		"module_address": "module.vpc",
		"name":           "elasticache_inbound_acl_rules",
	},
	"module.vpc:elasticache_outbound_acl_rules": {
		"default": [
			{
				"cidr_block":  "0.0.0.0/0",
				"from_port":   "0",
				"protocol":    "-1",
				"rule_action": "allow",
				"rule_number": "100",
				"to_port":     "0",
			},
		],
		"description":    "Elasticache subnets outbound network ACL rules",
		"module_address": "module.vpc",
		"name":           "elasticache_outbound_acl_rules",
	},
	"module.vpc:elasticache_route_table_tags": {
		"default":        {},
		"description":    "Additional tags for the elasticache route tables",
		"module_address": "module.vpc",
		"name":           "elasticache_route_table_tags",
	},
	"module.vpc:elasticache_subnet_assign_ipv6_address_on_creation": {
		"default":        null,
		"description":    "Assign IPv6 address on elasticache subnet, must be disabled to change IPv6 CIDRs. This is the IPv6 equivalent of map_public_ip_on_launch",
		"module_address": "module.vpc",
		"name":           "elasticache_subnet_assign_ipv6_address_on_creation",
	},
	"module.vpc:elasticache_subnet_ipv6_prefixes": {
		"default":        [],
		"description":    "Assigns IPv6 elasticache subnet id based on the Amazon provided /56 prefix base 10 integer (0-256). Must be of equal length to the corresponding IPv4 subnet list",
		"module_address": "module.vpc",
		"name":           "elasticache_subnet_ipv6_prefixes",
	},
	"module.vpc:elasticache_subnet_suffix": {
		"default":        "elasticache",
		"description":    "Suffix to append to elasticache subnets name",
		"module_address": "module.vpc",
		"name":           "elasticache_subnet_suffix",
	},
	"module.vpc:elasticache_subnet_tags": {
		"default":        {},
		"description":    "Additional tags for the elasticache subnets",
		"module_address": "module.vpc",
		"name":           "elasticache_subnet_tags",
	},
	"module.vpc:elasticache_subnets": {
		"default":        [],
		"description":    "A list of elasticache subnets",
		"module_address": "module.vpc",
		"name":           "elasticache_subnets",
	},
	"module.vpc:enable_classiclink": {
		"default":        null,
		"description":    "Should be true to enable ClassicLink for the VPC. Only valid in regions and accounts that support EC2 Classic.",
		"module_address": "module.vpc",
		"name":           "enable_classiclink",
	},
	"module.vpc:enable_classiclink_dns_support": {
		"default":        null,
		"description":    "Should be true to enable ClassicLink DNS Support for the VPC. Only valid in regions and accounts that support EC2 Classic.",
		"module_address": "module.vpc",
		"name":           "enable_classiclink_dns_support",
	},
	"module.vpc:enable_dhcp_options": {
		"default":        false,
		"description":    "Should be true if you want to specify a DHCP options set with a custom domain name, DNS servers, NTP servers, netbios servers, and/or netbios server type",
		"module_address": "module.vpc",
		"name":           "enable_dhcp_options",
	},
	"module.vpc:enable_dns_hostnames": {
		"default":        false,
		"description":    "Should be true to enable DNS hostnames in the VPC",
		"module_address": "module.vpc",
		"name":           "enable_dns_hostnames",
	},
	"module.vpc:enable_dns_support": {
		"default":        true,
		"description":    "Should be true to enable DNS support in the VPC",
		"module_address": "module.vpc",
		"name":           "enable_dns_support",
	},
	"module.vpc:enable_flow_log": {
		"default":        false,
		"description":    "Whether or not to enable VPC Flow Logs",
		"module_address": "module.vpc",
		"name":           "enable_flow_log",
	},
	"module.vpc:enable_ipv6": {
		"default":        false,
		"description":    "Requests an Amazon-provided IPv6 CIDR block with a /56 prefix length for the VPC. You cannot specify the range of IP addresses, or the size of the CIDR block.",
		"module_address": "module.vpc",
		"name":           "enable_ipv6",
	},
	"module.vpc:enable_nat_gateway": {
		"default":        false,
		"description":    "Should be true if you want to provision NAT Gateways for each of your private networks",
		"module_address": "module.vpc",
		"name":           "enable_nat_gateway",
	},
	"module.vpc:enable_public_redshift": {
		"default":        false,
		"description":    "Controls if redshift should have public routing table",
		"module_address": "module.vpc",
		"name":           "enable_public_redshift",
	},
	"module.vpc:enable_vpn_gateway": {
		"default":        false,
		"description":    "Should be true if you want to create a new VPN Gateway resource and attach it to the VPC",
		"module_address": "module.vpc",
		"name":           "enable_vpn_gateway",
	},
	"module.vpc:external_nat_ip_ids": {
		"default":        [],
		"description":    "List of EIP IDs to be assigned to the NAT Gateways (used in combination with reuse_nat_ips)",
		"module_address": "module.vpc",
		"name":           "external_nat_ip_ids",
	},
	"module.vpc:external_nat_ips": {
		"default":        [],
		"description":    "List of EIPs to be used for `nat_public_ips` output (used in combination with reuse_nat_ips and external_nat_ip_ids)",
		"module_address": "module.vpc",
		"name":           "external_nat_ips",
	},
	"module.vpc:flow_log_cloudwatch_iam_role_arn": {
		"default":        "",
		"description":    "The ARN for the IAM role that's used to post flow logs to a CloudWatch Logs log group. When flow_log_destination_arn is set to ARN of Cloudwatch Logs, this argument needs to be provided.",
		"module_address": "module.vpc",
		"name":           "flow_log_cloudwatch_iam_role_arn",
	},
	"module.vpc:flow_log_cloudwatch_log_group_kms_key_id": {
		"default":        null,
		"description":    "The ARN of the KMS Key to use when encrypting log data for VPC flow logs.",
		"module_address": "module.vpc",
		"name":           "flow_log_cloudwatch_log_group_kms_key_id",
	},
	"module.vpc:flow_log_cloudwatch_log_group_name_prefix": {
		"default":        "/aws/vpc-flow-log/",
		"description":    "Specifies the name prefix of CloudWatch Log Group for VPC flow logs.",
		"module_address": "module.vpc",
		"name":           "flow_log_cloudwatch_log_group_name_prefix",
	},
	"module.vpc:flow_log_cloudwatch_log_group_retention_in_days": {
		"default":        null,
		"description":    "Specifies the number of days you want to retain log events in the specified log group for VPC flow logs.",
		"module_address": "module.vpc",
		"name":           "flow_log_cloudwatch_log_group_retention_in_days",
	},
	"module.vpc:flow_log_destination_arn": {
		"default":        "",
		"description":    "The ARN of the CloudWatch log group or S3 bucket where VPC Flow Logs will be pushed. If this ARN is a S3 bucket the appropriate permissions need to be set on that bucket's policy. When create_flow_log_cloudwatch_log_group is set to false this argument must be provided.",
		"module_address": "module.vpc",
		"name":           "flow_log_destination_arn",
	},
	"module.vpc:flow_log_destination_type": {
		"default":        "cloud-watch-logs",
		"description":    "Type of flow log destination. Can be s3 or cloud-watch-logs.",
		"module_address": "module.vpc",
		"name":           "flow_log_destination_type",
	},
	"module.vpc:flow_log_log_format": {
		"default":        null,
		"description":    "The fields to include in the flow log record, in the order in which they should appear.",
		"module_address": "module.vpc",
		"name":           "flow_log_log_format",
	},
	"module.vpc:flow_log_max_aggregation_interval": {
		"default":        600,
		"description":    "The maximum interval of time during which a flow of packets is captured and aggregated into a flow log record. Valid Values: `60` seconds or `600` seconds.",
		"module_address": "module.vpc",
		"name":           "flow_log_max_aggregation_interval",
	},
	"module.vpc:flow_log_traffic_type": {
		"default":        "ALL",
		"description":    "The type of traffic to capture. Valid values: ACCEPT, REJECT, ALL.",
		"module_address": "module.vpc",
		"name":           "flow_log_traffic_type",
	},
	"module.vpc:igw_tags": {
		"default":        {},
		"description":    "Additional tags for the internet gateway",
		"module_address": "module.vpc",
		"name":           "igw_tags",
	},
	"module.vpc:instance_tenancy": {
		"default":        "default",
		"description":    "A tenancy option for instances launched into the VPC",
		"module_address": "module.vpc",
		"name":           "instance_tenancy",
	},
	"module.vpc:intra_acl_tags": {
		"default":        {},
		"description":    "Additional tags for the intra subnets network ACL",
		"module_address": "module.vpc",
		"name":           "intra_acl_tags",
	},
	"module.vpc:intra_dedicated_network_acl": {
		"default":        false,
		"description":    "Whether to use dedicated network ACL (not default) and custom rules for intra subnets",
		"module_address": "module.vpc",
		"name":           "intra_dedicated_network_acl",
	},
	"module.vpc:intra_inbound_acl_rules": {
		"default": [
			{
				"cidr_block":  "0.0.0.0/0",
				"from_port":   "0",
				"protocol":    "-1",
				"rule_action": "allow",
				"rule_number": "100",
				"to_port":     "0",
			},
		],
		"description":    "Intra subnets inbound network ACLs",
		"module_address": "module.vpc",
		"name":           "intra_inbound_acl_rules",
	},
	"module.vpc:intra_outbound_acl_rules": {
		"default": [
			{
				"cidr_block":  "0.0.0.0/0",
				"from_port":   "0",
				"protocol":    "-1",
				"rule_action": "allow",
				"rule_number": "100",
				"to_port":     "0",
			},
		],
		"description":    "Intra subnets outbound network ACLs",
		"module_address": "module.vpc",
		"name":           "intra_outbound_acl_rules",
	},
	"module.vpc:intra_route_table_tags": {
		"default":        {},
		"description":    "Additional tags for the intra route tables",
		"module_address": "module.vpc",
		"name":           "intra_route_table_tags",
	},
	"module.vpc:intra_subnet_assign_ipv6_address_on_creation": {
		"default":        null,
		"description":    "Assign IPv6 address on intra subnet, must be disabled to change IPv6 CIDRs. This is the IPv6 equivalent of map_public_ip_on_launch",
		"module_address": "module.vpc",
		"name":           "intra_subnet_assign_ipv6_address_on_creation",
	},
	"module.vpc:intra_subnet_ipv6_prefixes": {
		"default":        [],
		"description":    "Assigns IPv6 intra subnet id based on the Amazon provided /56 prefix base 10 integer (0-256). Must be of equal length to the corresponding IPv4 subnet list",
		"module_address": "module.vpc",
		"name":           "intra_subnet_ipv6_prefixes",
	},
	"module.vpc:intra_subnet_suffix": {
		"default":        "intra",
		"description":    "Suffix to append to intra subnets name",
		"module_address": "module.vpc",
		"name":           "intra_subnet_suffix",
	},
	"module.vpc:intra_subnet_tags": {
		"default":        {},
		"description":    "Additional tags for the intra subnets",
		"module_address": "module.vpc",
		"name":           "intra_subnet_tags",
	},
	"module.vpc:intra_subnets": {
		"default":        [],
		"description":    "A list of intra subnets",
		"module_address": "module.vpc",
		"name":           "intra_subnets",
	},
	"module.vpc:manage_default_network_acl": {
		"default":        false,
		"description":    "Should be true to adopt and manage Default Network ACL",
		"module_address": "module.vpc",
		"name":           "manage_default_network_acl",
	},
	"module.vpc:manage_default_route_table": {
		"default":        false,
		"description":    "Should be true to manage default route table",
		"module_address": "module.vpc",
		"name":           "manage_default_route_table",
	},
	"module.vpc:manage_default_security_group": {
		"default":        false,
		"description":    "Should be true to adopt and manage default security group",
		"module_address": "module.vpc",
		"name":           "manage_default_security_group",
	},
	"module.vpc:manage_default_vpc": {
		"default":        false,
		"description":    "Should be true to adopt and manage Default VPC",
		"module_address": "module.vpc",
		"name":           "manage_default_vpc",
	},
	"module.vpc:map_public_ip_on_launch": {
		"default":        true,
		"description":    "Should be false if you do not want to auto-assign public IP on launch",
		"module_address": "module.vpc",
		"name":           "map_public_ip_on_launch",
	},
	"module.vpc:name": {
		"default":        "",
		"description":    "Name to be used on all the resources as identifier",
		"module_address": "module.vpc",
		"name":           "name",
	},
	"module.vpc:nat_eip_tags": {
		"default":        {},
		"description":    "Additional tags for the NAT EIP",
		"module_address": "module.vpc",
		"name":           "nat_eip_tags",
	},
	"module.vpc:nat_gateway_tags": {
		"default":        {},
		"description":    "Additional tags for the NAT gateways",
		"module_address": "module.vpc",
		"name":           "nat_gateway_tags",
	},
	"module.vpc:one_nat_gateway_per_az": {
		"default":        false,
		"description":    "Should be true if you want only one NAT Gateway per availability zone. Requires `var.azs` to be set, and the number of `public_subnets` created to be greater than or equal to the number of availability zones specified in `var.azs`.",
		"module_address": "module.vpc",
		"name":           "one_nat_gateway_per_az",
	},
	"module.vpc:outpost_acl_tags": {
		"default":        {},
		"description":    "Additional tags for the outpost subnets network ACL",
		"module_address": "module.vpc",
		"name":           "outpost_acl_tags",
	},
	"module.vpc:outpost_arn": {
		"default":        null,
		"description":    "ARN of Outpost you want to create a subnet in.",
		"module_address": "module.vpc",
		"name":           "outpost_arn",
	},
	"module.vpc:outpost_az": {
		"default":        null,
		"description":    "AZ where Outpost is anchored.",
		"module_address": "module.vpc",
		"name":           "outpost_az",
	},
	"module.vpc:outpost_dedicated_network_acl": {
		"default":        false,
		"description":    "Whether to use dedicated network ACL (not default) and custom rules for outpost subnets",
		"module_address": "module.vpc",
		"name":           "outpost_dedicated_network_acl",
	},
	"module.vpc:outpost_inbound_acl_rules": {
		"default": [
			{
				"cidr_block":  "0.0.0.0/0",
				"from_port":   "0",
				"protocol":    "-1",
				"rule_action": "allow",
				"rule_number": "100",
				"to_port":     "0",
			},
		],
		"description":    "Outpost subnets inbound network ACLs",
		"module_address": "module.vpc",
		"name":           "outpost_inbound_acl_rules",
	},
	"module.vpc:outpost_outbound_acl_rules": {
		"default": [
			{
				"cidr_block":  "0.0.0.0/0",
				"from_port":   "0",
				"protocol":    "-1",
				"rule_action": "allow",
				"rule_number": "100",
				"to_port":     "0",
			},
		],
		"description":    "Outpost subnets outbound network ACLs",
		"module_address": "module.vpc",
		"name":           "outpost_outbound_acl_rules",
	},
	"module.vpc:outpost_subnet_assign_ipv6_address_on_creation": {
		"default":        null,
		"description":    "Assign IPv6 address on outpost subnet, must be disabled to change IPv6 CIDRs. This is the IPv6 equivalent of map_public_ip_on_launch",
		"module_address": "module.vpc",
		"name":           "outpost_subnet_assign_ipv6_address_on_creation",
	},
	"module.vpc:outpost_subnet_ipv6_prefixes": {
		"default":        [],
		"description":    "Assigns IPv6 outpost subnet id based on the Amazon provided /56 prefix base 10 integer (0-256). Must be of equal length to the corresponding IPv4 subnet list",
		"module_address": "module.vpc",
		"name":           "outpost_subnet_ipv6_prefixes",
	},
	"module.vpc:outpost_subnet_suffix": {
		"default":        "outpost",
		"description":    "Suffix to append to outpost subnets name",
		"module_address": "module.vpc",
		"name":           "outpost_subnet_suffix",
	},
	"module.vpc:outpost_subnet_tags": {
		"default":        {},
		"description":    "Additional tags for the outpost subnets",
		"module_address": "module.vpc",
		"name":           "outpost_subnet_tags",
	},
	"module.vpc:outpost_subnets": {
		"default":        [],
		"description":    "A list of outpost subnets inside the VPC",
		"module_address": "module.vpc",
		"name":           "outpost_subnets",
	},
	"module.vpc:private_acl_tags": {
		"default":        {},
		"description":    "Additional tags for the private subnets network ACL",
		"module_address": "module.vpc",
		"name":           "private_acl_tags",
	},
	"module.vpc:private_dedicated_network_acl": {
		"default":        false,
		"description":    "Whether to use dedicated network ACL (not default) and custom rules for private subnets",
		"module_address": "module.vpc",
		"name":           "private_dedicated_network_acl",
	},
	"module.vpc:private_inbound_acl_rules": {
		"default": [
			{
				"cidr_block":  "0.0.0.0/0",
				"from_port":   "0",
				"protocol":    "-1",
				"rule_action": "allow",
				"rule_number": "100",
				"to_port":     "0",
			},
		],
		"description":    "Private subnets inbound network ACLs",
		"module_address": "module.vpc",
		"name":           "private_inbound_acl_rules",
	},
	"module.vpc:private_outbound_acl_rules": {
		"default": [
			{
				"cidr_block":  "0.0.0.0/0",
				"from_port":   "0",
				"protocol":    "-1",
				"rule_action": "allow",
				"rule_number": "100",
				"to_port":     "0",
			},
		],
		"description":    "Private subnets outbound network ACLs",
		"module_address": "module.vpc",
		"name":           "private_outbound_acl_rules",
	},
	"module.vpc:private_route_table_tags": {
		"default":        {},
		"description":    "Additional tags for the private route tables",
		"module_address": "module.vpc",
		"name":           "private_route_table_tags",
	},
	"module.vpc:private_subnet_assign_ipv6_address_on_creation": {
		"default":        null,
		"description":    "Assign IPv6 address on private subnet, must be disabled to change IPv6 CIDRs. This is the IPv6 equivalent of map_public_ip_on_launch",
		"module_address": "module.vpc",
		"name":           "private_subnet_assign_ipv6_address_on_creation",
	},
	"module.vpc:private_subnet_ipv6_prefixes": {
		"default":        [],
		"description":    "Assigns IPv6 private subnet id based on the Amazon provided /56 prefix base 10 integer (0-256). Must be of equal length to the corresponding IPv4 subnet list",
		"module_address": "module.vpc",
		"name":           "private_subnet_ipv6_prefixes",
	},
	"module.vpc:private_subnet_suffix": {
		"default":        "private",
		"description":    "Suffix to append to private subnets name",
		"module_address": "module.vpc",
		"name":           "private_subnet_suffix",
	},
	"module.vpc:private_subnet_tags": {
		"default":        {},
		"description":    "Additional tags for the private subnets",
		"module_address": "module.vpc",
		"name":           "private_subnet_tags",
	},
	"module.vpc:private_subnets": {
		"default":        [],
		"description":    "A list of private subnets inside the VPC",
		"module_address": "module.vpc",
		"name":           "private_subnets",
	},
	"module.vpc:propagate_intra_route_tables_vgw": {
		"default":        false,
		"description":    "Should be true if you want route table propagation",
		"module_address": "module.vpc",
		"name":           "propagate_intra_route_tables_vgw",
	},
	"module.vpc:propagate_private_route_tables_vgw": {
		"default":        false,
		"description":    "Should be true if you want route table propagation",
		"module_address": "module.vpc",
		"name":           "propagate_private_route_tables_vgw",
	},
	"module.vpc:propagate_public_route_tables_vgw": {
		"default":        false,
		"description":    "Should be true if you want route table propagation",
		"module_address": "module.vpc",
		"name":           "propagate_public_route_tables_vgw",
	},
	"module.vpc:public_acl_tags": {
		"default":        {},
		"description":    "Additional tags for the public subnets network ACL",
		"module_address": "module.vpc",
		"name":           "public_acl_tags",
	},
	"module.vpc:public_dedicated_network_acl": {
		"default":        false,
		"description":    "Whether to use dedicated network ACL (not default) and custom rules for public subnets",
		"module_address": "module.vpc",
		"name":           "public_dedicated_network_acl",
	},
	"module.vpc:public_inbound_acl_rules": {
		"default": [
			{
				"cidr_block":  "0.0.0.0/0",
				"from_port":   "0",
				"protocol":    "-1",
				"rule_action": "allow",
				"rule_number": "100",
				"to_port":     "0",
			},
		],
		"description":    "Public subnets inbound network ACLs",
		"module_address": "module.vpc",
		"name":           "public_inbound_acl_rules",
	},
	"module.vpc:public_outbound_acl_rules": {
		"default": [
			{
				"cidr_block":  "0.0.0.0/0",
				"from_port":   "0",
				"protocol":    "-1",
				"rule_action": "allow",
				"rule_number": "100",
				"to_port":     "0",
			},
		],
		"description":    "Public subnets outbound network ACLs",
		"module_address": "module.vpc",
		"name":           "public_outbound_acl_rules",
	},
	"module.vpc:public_route_table_tags": {
		"default":        {},
		"description":    "Additional tags for the public route tables",
		"module_address": "module.vpc",
		"name":           "public_route_table_tags",
	},
	"module.vpc:public_subnet_assign_ipv6_address_on_creation": {
		"default":        null,
		"description":    "Assign IPv6 address on public subnet, must be disabled to change IPv6 CIDRs. This is the IPv6 equivalent of map_public_ip_on_launch",
		"module_address": "module.vpc",
		"name":           "public_subnet_assign_ipv6_address_on_creation",
	},
	"module.vpc:public_subnet_ipv6_prefixes": {
		"default":        [],
		"description":    "Assigns IPv6 public subnet id based on the Amazon provided /56 prefix base 10 integer (0-256). Must be of equal length to the corresponding IPv4 subnet list",
		"module_address": "module.vpc",
		"name":           "public_subnet_ipv6_prefixes",
	},
	"module.vpc:public_subnet_suffix": {
		"default":        "public",
		"description":    "Suffix to append to public subnets name",
		"module_address": "module.vpc",
		"name":           "public_subnet_suffix",
	},
	"module.vpc:public_subnet_tags": {
		"default":        {},
		"description":    "Additional tags for the public subnets",
		"module_address": "module.vpc",
		"name":           "public_subnet_tags",
	},
	"module.vpc:public_subnets": {
		"default":        [],
		"description":    "A list of public subnets inside the VPC",
		"module_address": "module.vpc",
		"name":           "public_subnets",
	},
	"module.vpc:redshift_acl_tags": {
		"default":        {},
		"description":    "Additional tags for the redshift subnets network ACL",
		"module_address": "module.vpc",
		"name":           "redshift_acl_tags",
	},
	"module.vpc:redshift_dedicated_network_acl": {
		"default":        false,
		"description":    "Whether to use dedicated network ACL (not default) and custom rules for redshift subnets",
		"module_address": "module.vpc",
		"name":           "redshift_dedicated_network_acl",
	},
	"module.vpc:redshift_inbound_acl_rules": {
		"default": [
			{
				"cidr_block":  "0.0.0.0/0",
				"from_port":   "0",
				"protocol":    "-1",
				"rule_action": "allow",
				"rule_number": "100",
				"to_port":     "0",
			},
		],
		"description":    "Redshift subnets inbound network ACL rules",
		"module_address": "module.vpc",
		"name":           "redshift_inbound_acl_rules",
	},
	"module.vpc:redshift_outbound_acl_rules": {
		"default": [
			{
				"cidr_block":  "0.0.0.0/0",
				"from_port":   "0",
				"protocol":    "-1",
				"rule_action": "allow",
				"rule_number": "100",
				"to_port":     "0",
			},
		],
		"description":    "Redshift subnets outbound network ACL rules",
		"module_address": "module.vpc",
		"name":           "redshift_outbound_acl_rules",
	},
	"module.vpc:redshift_route_table_tags": {
		"default":        {},
		"description":    "Additional tags for the redshift route tables",
		"module_address": "module.vpc",
		"name":           "redshift_route_table_tags",
	},
	"module.vpc:redshift_subnet_assign_ipv6_address_on_creation": {
		"default":        null,
		"description":    "Assign IPv6 address on redshift subnet, must be disabled to change IPv6 CIDRs. This is the IPv6 equivalent of map_public_ip_on_launch",
		"module_address": "module.vpc",
		"name":           "redshift_subnet_assign_ipv6_address_on_creation",
	},
	"module.vpc:redshift_subnet_group_tags": {
		"default":        {},
		"description":    "Additional tags for the redshift subnet group",
		"module_address": "module.vpc",
		"name":           "redshift_subnet_group_tags",
	},
	"module.vpc:redshift_subnet_ipv6_prefixes": {
		"default":        [],
		"description":    "Assigns IPv6 redshift subnet id based on the Amazon provided /56 prefix base 10 integer (0-256). Must be of equal length to the corresponding IPv4 subnet list",
		"module_address": "module.vpc",
		"name":           "redshift_subnet_ipv6_prefixes",
	},
	"module.vpc:redshift_subnet_suffix": {
		"default":        "redshift",
		"description":    "Suffix to append to redshift subnets name",
		"module_address": "module.vpc",
		"name":           "redshift_subnet_suffix",
	},
	"module.vpc:redshift_subnet_tags": {
		"default":        {},
		"description":    "Additional tags for the redshift subnets",
		"module_address": "module.vpc",
		"name":           "redshift_subnet_tags",
	},
	"module.vpc:redshift_subnets": {
		"default":        [],
		"description":    "A list of redshift subnets",
		"module_address": "module.vpc",
		"name":           "redshift_subnets",
	},
	"module.vpc:reuse_nat_ips": {
		"default":        false,
		"description":    "Should be true if you don't want EIPs to be created for your NAT Gateways and will instead pass them in via the 'external_nat_ip_ids' variable",
		"module_address": "module.vpc",
		"name":           "reuse_nat_ips",
	},
	"module.vpc:secondary_cidr_blocks": {
		"default":        [],
		"description":    "List of secondary CIDR blocks to associate with the VPC to extend the IP Address pool",
		"module_address": "module.vpc",
		"name":           "secondary_cidr_blocks",
	},
	"module.vpc:single_nat_gateway": {
		"default":        false,
		"description":    "Should be true if you want to provision a single shared NAT Gateway across all of your private networks",
		"module_address": "module.vpc",
		"name":           "single_nat_gateway",
	},
	"module.vpc:tags": {
		"default":        {},
		"description":    "A map of tags to add to all resources",
		"module_address": "module.vpc",
		"name":           "tags",
	},
	"module.vpc:vpc_flow_log_permissions_boundary": {
		"default":        null,
		"description":    "The ARN of the Permissions Boundary for the VPC Flow Log IAM Role",
		"module_address": "module.vpc",
		"name":           "vpc_flow_log_permissions_boundary",
	},
	"module.vpc:vpc_flow_log_tags": {
		"default":        {},
		"description":    "Additional tags for the VPC Flow Logs",
		"module_address": "module.vpc",
		"name":           "vpc_flow_log_tags",
	},
	"module.vpc:vpc_tags": {
		"default":        {},
		"description":    "Additional tags for the VPC",
		"module_address": "module.vpc",
		"name":           "vpc_tags",
	},
	"module.vpc:vpn_gateway_az": {
		"default":        null,
		"description":    "The Availability Zone for the VPN Gateway",
		"module_address": "module.vpc",
		"name":           "vpn_gateway_az",
	},
	"module.vpc:vpn_gateway_id": {
		"default":        "",
		"description":    "ID of VPN Gateway to attach to the VPC",
		"module_address": "module.vpc",
		"name":           "vpn_gateway_id",
	},
	"module.vpc:vpn_gateway_tags": {
		"default":        {},
		"description":    "Additional tags for the VPN gateway",
		"module_address": "module.vpc",
		"name":           "vpn_gateway_tags",
	},
	"region": {
		"default":        "us-east-2",
		"description":    "AWS region",
		"module_address": "",
		"name":           "region",
	},
}

outputs = {
	"cluster_endpoint": {
		"depends_on":     [],
		"description":    "Endpoint for EKS control plane.",
		"module_address": "",
		"name":           "cluster_endpoint",
		"sensitive":      false,
		"value": {
			"references": [
				"module.eks.cluster_endpoint",
				"module.eks",
			],
		},
	},
	"cluster_id": {
		"depends_on":     [],
		"description":    "EKS cluster ID.",
		"module_address": "",
		"name":           "cluster_id",
		"sensitive":      false,
		"value": {
			"references": [
				"module.eks.cluster_id",
				"module.eks",
			],
		},
	},
	"cluster_name": {
		"depends_on":     [],
		"description":    "Kubernetes Cluster Name",
		"module_address": "",
		"name":           "cluster_name",
		"sensitive":      false,
		"value": {
			"references": [
				"local.cluster_name",
			],
		},
	},
	"cluster_security_group_id": {
		"depends_on":     [],
		"description":    "Security group ids attached to the cluster control plane.",
		"module_address": "",
		"name":           "cluster_security_group_id",
		"sensitive":      false,
		"value": {
			"references": [
				"module.eks.cluster_security_group_id",
				"module.eks",
			],
		},
	},
	"config_map_aws_auth": {
		"depends_on":     [],
		"description":    "A kubernetes configuration to authenticate to this EKS cluster.",
		"module_address": "",
		"name":           "config_map_aws_auth",
		"sensitive":      false,
		"value": {
			"references": [
				"module.eks.config_map_aws_auth",
				"module.eks",
			],
		},
	},
	"kubectl_config": {
		"depends_on":     [],
		"description":    "kubectl config as generated by the module.",
		"module_address": "",
		"name":           "kubectl_config",
		"sensitive":      false,
		"value": {
			"references": [
				"module.eks.kubeconfig",
				"module.eks",
			],
		},
	},
	"module.eks.module.fargate:aws_auth_roles": {
		"depends_on":     [],
		"description":    "Roles for use in aws-auth ConfigMap",
		"module_address": "module.eks.module.fargate",
		"name":           "aws_auth_roles",
		"sensitive":      false,
		"value": {
			"references": [
				"local.pod_execution_role_arn",
				"local.create_eks",
			],
		},
	},
	"module.eks.module.fargate:fargate_profile_arns": {
		"depends_on":     [],
		"description":    "Amazon Resource Name (ARN) of the EKS Fargate Profiles.",
		"module_address": "module.eks.module.fargate",
		"name":           "fargate_profile_arns",
		"sensitive":      false,
		"value": {
			"references": [
				"aws_eks_fargate_profile.this",
			],
		},
	},
	"module.eks.module.fargate:fargate_profile_ids": {
		"depends_on":     [],
		"description":    "EKS Cluster name and EKS Fargate Profile names separated by a colon (:).",
		"module_address": "module.eks.module.fargate",
		"name":           "fargate_profile_ids",
		"sensitive":      false,
		"value": {
			"references": [
				"aws_eks_fargate_profile.this",
			],
		},
	},
	"module.eks.module.fargate:iam_role_arn": {
		"depends_on":     [],
		"description":    "IAM role ARN for EKS Fargate pods",
		"module_address": "module.eks.module.fargate",
		"name":           "iam_role_arn",
		"sensitive":      false,
		"value": {
			"references": [
				"local.pod_execution_role_arn",
			],
		},
	},
	"module.eks.module.fargate:iam_role_name": {
		"depends_on":     [],
		"description":    "IAM role name for EKS Fargate pods",
		"module_address": "module.eks.module.fargate",
		"name":           "iam_role_name",
		"sensitive":      false,
		"value": {
			"references": [
				"local.pod_execution_role_name",
			],
		},
	},
	"module.eks.module.node_groups:aws_auth_roles": {
		"depends_on":     [],
		"description":    "Roles for use in aws-auth ConfigMap",
		"module_address": "module.eks.module.node_groups",
		"name":           "aws_auth_roles",
		"sensitive":      false,
		"value": {
			"references": [
				"local.node_groups_expanded",
				"var.default_iam_role_arn",
			],
		},
	},
	"module.eks.module.node_groups:node_groups": {
		"depends_on":     [],
		"description":    "Outputs from EKS node groups. Map of maps, keyed by `var.node_groups` keys. See `aws_eks_node_group` Terraform documentation for values",
		"module_address": "module.eks.module.node_groups",
		"name":           "node_groups",
		"sensitive":      false,
		"value": {
			"references": [
				"aws_eks_node_group.workers",
			],
		},
	},
	"module.eks:cloudwatch_log_group_arn": {
		"depends_on":     [],
		"description":    "Arn of cloudwatch log group created",
		"module_address": "module.eks",
		"name":           "cloudwatch_log_group_arn",
		"sensitive":      false,
		"value": {
			"references": [
				"aws_cloudwatch_log_group.this",
			],
		},
	},
	"module.eks:cloudwatch_log_group_name": {
		"depends_on":     [],
		"description":    "Name of cloudwatch log group created",
		"module_address": "module.eks",
		"name":           "cloudwatch_log_group_name",
		"sensitive":      false,
		"value": {
			"references": [
				"aws_cloudwatch_log_group.this",
			],
		},
	},
	"module.eks:cluster_arn": {
		"depends_on":     [],
		"description":    "The Amazon Resource Name (ARN) of the cluster.",
		"module_address": "module.eks",
		"name":           "cluster_arn",
		"sensitive":      false,
		"value": {
			"references": [
				"local.cluster_arn",
			],
		},
	},
	"module.eks:cluster_certificate_authority_data": {
		"depends_on":     [],
		"description":    "Nested attribute containing certificate-authority-data for your cluster. This is the base64 encoded certificate data required to communicate with your cluster.",
		"module_address": "module.eks",
		"name":           "cluster_certificate_authority_data",
		"sensitive":      false,
		"value": {
			"references": [
				"local.cluster_auth_base64",
			],
		},
	},
	"module.eks:cluster_endpoint": {
		"depends_on":     [],
		"description":    "The endpoint for your EKS Kubernetes API.",
		"module_address": "module.eks",
		"name":           "cluster_endpoint",
		"sensitive":      false,
		"value": {
			"references": [
				"local.cluster_endpoint",
			],
		},
	},
	"module.eks:cluster_iam_role_arn": {
		"depends_on":     [],
		"description":    "IAM role ARN of the EKS cluster.",
		"module_address": "module.eks",
		"name":           "cluster_iam_role_arn",
		"sensitive":      false,
		"value": {
			"references": [
				"local.cluster_iam_role_arn",
			],
		},
	},
	"module.eks:cluster_iam_role_name": {
		"depends_on":     [],
		"description":    "IAM role name of the EKS cluster.",
		"module_address": "module.eks",
		"name":           "cluster_iam_role_name",
		"sensitive":      false,
		"value": {
			"references": [
				"local.cluster_iam_role_name",
			],
		},
	},
	"module.eks:cluster_id": {
		"depends_on": [
			"data.http.wait_for_cluster",
		],
		"description":    "The name/id of the EKS cluster. Will block on cluster creation until the cluster is really ready.",
		"module_address": "module.eks",
		"name":           "cluster_id",
		"sensitive":      false,
		"value": {
			"references": [
				"local.cluster_id",
			],
		},
	},
	"module.eks:cluster_oidc_issuer_url": {
		"depends_on":     [],
		"description":    "The URL on the EKS cluster OIDC Issuer",
		"module_address": "module.eks",
		"name":           "cluster_oidc_issuer_url",
		"sensitive":      false,
		"value": {
			"references": [
				"local.cluster_oidc_issuer_url",
			],
		},
	},
	"module.eks:cluster_primary_security_group_id": {
		"depends_on":     [],
		"description":    "The cluster primary security group ID created by the EKS cluster on 1.14 or later. Referred to as 'Cluster security group' in the EKS console.",
		"module_address": "module.eks",
		"name":           "cluster_primary_security_group_id",
		"sensitive":      false,
		"value": {
			"references": [
				"local.cluster_primary_security_group_id",
			],
		},
	},
	"module.eks:cluster_security_group_id": {
		"depends_on":     [],
		"description":    "Security group ID attached to the EKS cluster. On 1.14 or later, this is the 'Additional security groups' in the EKS console.",
		"module_address": "module.eks",
		"name":           "cluster_security_group_id",
		"sensitive":      false,
		"value": {
			"references": [
				"local.cluster_security_group_id",
			],
		},
	},
	"module.eks:cluster_version": {
		"depends_on":     [],
		"description":    "The Kubernetes server version for the EKS cluster.",
		"module_address": "module.eks",
		"name":           "cluster_version",
		"sensitive":      false,
		"value": {
			"references": [
				"aws_eks_cluster.this",
			],
		},
	},
	"module.eks:config_map_aws_auth": {
		"depends_on":     [],
		"description":    "A kubernetes configuration to authenticate to this EKS cluster.",
		"module_address": "module.eks",
		"name":           "config_map_aws_auth",
		"sensitive":      false,
		"value": {
			"references": [
				"kubernetes_config_map.aws_auth",
			],
		},
	},
	"module.eks:fargate_iam_role_arn": {
		"depends_on":     [],
		"description":    "IAM role ARN for EKS Fargate pods",
		"module_address": "module.eks",
		"name":           "fargate_iam_role_arn",
		"sensitive":      false,
		"value": {
			"references": [
				"module.fargate.iam_role_arn",
				"module.fargate",
			],
		},
	},
	"module.eks:fargate_iam_role_name": {
		"depends_on":     [],
		"description":    "IAM role name for EKS Fargate pods",
		"module_address": "module.eks",
		"name":           "fargate_iam_role_name",
		"sensitive":      false,
		"value": {
			"references": [
				"module.fargate.iam_role_name",
				"module.fargate",
			],
		},
	},
	"module.eks:fargate_profile_arns": {
		"depends_on":     [],
		"description":    "Amazon Resource Name (ARN) of the EKS Fargate Profiles.",
		"module_address": "module.eks",
		"name":           "fargate_profile_arns",
		"sensitive":      false,
		"value": {
			"references": [
				"module.fargate.fargate_profile_arns",
				"module.fargate",
			],
		},
	},
	"module.eks:fargate_profile_ids": {
		"depends_on":     [],
		"description":    "EKS Cluster name and EKS Fargate Profile names separated by a colon (:).",
		"module_address": "module.eks",
		"name":           "fargate_profile_ids",
		"sensitive":      false,
		"value": {
			"references": [
				"module.fargate.fargate_profile_ids",
				"module.fargate",
			],
		},
	},
	"module.eks:kubeconfig": {
		"depends_on": [
			"data.http.wait_for_cluster",
		],
		"description":    "kubectl config file contents for this EKS cluster. Will block on cluster creation until the cluster is really ready.",
		"module_address": "module.eks",
		"name":           "kubeconfig",
		"sensitive":      false,
		"value": {
			"references": [
				"local.kubeconfig",
			],
		},
	},
	"module.eks:kubeconfig_filename": {
		"depends_on": [
			"data.http.wait_for_cluster",
		],
		"description":    "The filename of the generated kubectl config. Will block on cluster creation until the cluster is really ready.",
		"module_address": "module.eks",
		"name":           "kubeconfig_filename",
		"sensitive":      false,
		"value": {
			"references": [
				"local_file.kubeconfig",
			],
		},
	},
	"module.eks:node_groups": {
		"depends_on":     [],
		"description":    "Outputs from EKS node groups. Map of maps, keyed by var.node_groups keys",
		"module_address": "module.eks",
		"name":           "node_groups",
		"sensitive":      false,
		"value": {
			"references": [
				"module.node_groups.node_groups",
				"module.node_groups",
			],
		},
	},
	"module.eks:oidc_provider_arn": {
		"depends_on":     [],
		"description":    "The ARN of the OIDC Provider if `enable_irsa = true`.",
		"module_address": "module.eks",
		"name":           "oidc_provider_arn",
		"sensitive":      false,
		"value": {
			"references": [
				"var.enable_irsa",
				"aws_iam_openid_connect_provider.oidc_provider",
			],
		},
	},
	"module.eks:security_group_rule_cluster_https_worker_ingress": {
		"depends_on":     [],
		"description":    "Security group rule responsible for allowing pods to communicate with the EKS cluster API.",
		"module_address": "module.eks",
		"name":           "security_group_rule_cluster_https_worker_ingress",
		"sensitive":      false,
		"value": {
			"references": [
				"aws_security_group_rule.cluster_https_worker_ingress",
			],
		},
	},
	"module.eks:worker_iam_instance_profile_arns": {
		"depends_on":     [],
		"description":    "default IAM instance profile ARN for EKS worker groups",
		"module_address": "module.eks",
		"name":           "worker_iam_instance_profile_arns",
		"sensitive":      false,
		"value": {
			"references": [
				"aws_iam_instance_profile.workers",
				"aws_iam_instance_profile.workers_launch_template",
			],
		},
	},
	"module.eks:worker_iam_instance_profile_names": {
		"depends_on":     [],
		"description":    "default IAM instance profile name for EKS worker groups",
		"module_address": "module.eks",
		"name":           "worker_iam_instance_profile_names",
		"sensitive":      false,
		"value": {
			"references": [
				"aws_iam_instance_profile.workers",
				"aws_iam_instance_profile.workers_launch_template",
			],
		},
	},
	"module.eks:worker_iam_role_arn": {
		"depends_on":     [],
		"description":    "default IAM role ARN for EKS worker groups",
		"module_address": "module.eks",
		"name":           "worker_iam_role_arn",
		"sensitive":      false,
		"value": {
			"references": [
				"aws_iam_role.workers",
				"data.aws_iam_instance_profile.custom_worker_group_iam_instance_profile",
				"data.aws_iam_instance_profile.custom_worker_group_launch_template_iam_instance_profile",
			],
		},
	},
	"module.eks:worker_iam_role_name": {
		"depends_on":     [],
		"description":    "default IAM role name for EKS worker groups",
		"module_address": "module.eks",
		"name":           "worker_iam_role_name",
		"sensitive":      false,
		"value": {
			"references": [
				"aws_iam_role.workers",
				"data.aws_iam_instance_profile.custom_worker_group_iam_instance_profile",
				"data.aws_iam_instance_profile.custom_worker_group_launch_template_iam_instance_profile",
			],
		},
	},
	"module.eks:worker_security_group_id": {
		"depends_on":     [],
		"description":    "Security group ID attached to the EKS workers.",
		"module_address": "module.eks",
		"name":           "worker_security_group_id",
		"sensitive":      false,
		"value": {
			"references": [
				"local.worker_security_group_id",
			],
		},
	},
	"module.eks:workers_asg_arns": {
		"depends_on":     [],
		"description":    "IDs of the autoscaling groups containing workers.",
		"module_address": "module.eks",
		"name":           "workers_asg_arns",
		"sensitive":      false,
		"value": {
			"references": [
				"aws_autoscaling_group.workers",
				"aws_autoscaling_group.workers_launch_template",
			],
		},
	},
	"module.eks:workers_asg_names": {
		"depends_on":     [],
		"description":    "Names of the autoscaling groups containing workers.",
		"module_address": "module.eks",
		"name":           "workers_asg_names",
		"sensitive":      false,
		"value": {
			"references": [
				"aws_autoscaling_group.workers",
				"aws_autoscaling_group.workers_launch_template",
			],
		},
	},
	"module.eks:workers_default_ami_id": {
		"depends_on":     [],
		"description":    "ID of the default worker group AMI",
		"module_address": "module.eks",
		"name":           "workers_default_ami_id",
		"sensitive":      false,
		"value": {
			"references": [
				"local.default_ami_id_linux",
			],
		},
	},
	"module.eks:workers_default_ami_id_windows": {
		"depends_on":     [],
		"description":    "ID of the default Windows worker group AMI",
		"module_address": "module.eks",
		"name":           "workers_default_ami_id_windows",
		"sensitive":      false,
		"value": {
			"references": [
				"local.default_ami_id_windows",
			],
		},
	},
	"module.eks:workers_launch_template_arns": {
		"depends_on":     [],
		"description":    "ARNs of the worker launch templates.",
		"module_address": "module.eks",
		"name":           "workers_launch_template_arns",
		"sensitive":      false,
		"value": {
			"references": [
				"aws_launch_template.workers_launch_template",
			],
		},
	},
	"module.eks:workers_launch_template_ids": {
		"depends_on":     [],
		"description":    "IDs of the worker launch templates.",
		"module_address": "module.eks",
		"name":           "workers_launch_template_ids",
		"sensitive":      false,
		"value": {
			"references": [
				"aws_launch_template.workers_launch_template",
			],
		},
	},
	"module.eks:workers_launch_template_latest_versions": {
		"depends_on":     [],
		"description":    "Latest versions of the worker launch templates.",
		"module_address": "module.eks",
		"name":           "workers_launch_template_latest_versions",
		"sensitive":      false,
		"value": {
			"references": [
				"aws_launch_template.workers_launch_template",
			],
		},
	},
	"module.eks:workers_user_data": {
		"depends_on":     [],
		"description":    "User data of worker groups",
		"module_address": "module.eks",
		"name":           "workers_user_data",
		"sensitive":      false,
		"value": {
			"references": [
				"local.launch_configuration_userdata_rendered",
				"local.launch_template_userdata_rendered",
			],
		},
	},
	"module.vpc:azs": {
		"depends_on":     [],
		"description":    "A list of availability zones specified as argument to this module",
		"module_address": "module.vpc",
		"name":           "azs",
		"sensitive":      false,
		"value": {
			"references": [
				"var.azs",
			],
		},
	},
	"module.vpc:cgw_arns": {
		"depends_on":     [],
		"description":    "List of ARNs of Customer Gateway",
		"module_address": "module.vpc",
		"name":           "cgw_arns",
		"sensitive":      false,
		"value": {
			"references": [
				"aws_customer_gateway.this",
			],
		},
	},
	"module.vpc:cgw_ids": {
		"depends_on":     [],
		"description":    "List of IDs of Customer Gateway",
		"module_address": "module.vpc",
		"name":           "cgw_ids",
		"sensitive":      false,
		"value": {
			"references": [
				"aws_customer_gateway.this",
			],
		},
	},
	"module.vpc:database_internet_gateway_route_id": {
		"depends_on":     [],
		"description":    "ID of the database internet gateway route.",
		"module_address": "module.vpc",
		"name":           "database_internet_gateway_route_id",
		"sensitive":      false,
		"value": {
			"references": [
				"aws_route.database_internet_gateway",
			],
		},
	},
	"module.vpc:database_ipv6_egress_route_id": {
		"depends_on":     [],
		"description":    "ID of the database IPv6 egress route.",
		"module_address": "module.vpc",
		"name":           "database_ipv6_egress_route_id",
		"sensitive":      false,
		"value": {
			"references": [
				"aws_route.database_ipv6_egress",
			],
		},
	},
	"module.vpc:database_nat_gateway_route_ids": {
		"depends_on":     [],
		"description":    "List of IDs of the database nat gateway route.",
		"module_address": "module.vpc",
		"name":           "database_nat_gateway_route_ids",
		"sensitive":      false,
		"value": {
			"references": [
				"aws_route.database_nat_gateway",
			],
		},
	},
	"module.vpc:database_network_acl_arn": {
		"depends_on":     [],
		"description":    "ARN of the database network ACL",
		"module_address": "module.vpc",
		"name":           "database_network_acl_arn",
		"sensitive":      false,
		"value": {
			"references": [
				"aws_network_acl.database",
			],
		},
	},
	"module.vpc:database_network_acl_id": {
		"depends_on":     [],
		"description":    "ID of the database network ACL",
		"module_address": "module.vpc",
		"name":           "database_network_acl_id",
		"sensitive":      false,
		"value": {
			"references": [
				"aws_network_acl.database",
			],
		},
	},
	"module.vpc:database_route_table_association_ids": {
		"depends_on":     [],
		"description":    "List of IDs of the database route table association",
		"module_address": "module.vpc",
		"name":           "database_route_table_association_ids",
		"sensitive":      false,
		"value": {
			"references": [
				"aws_route_table_association.database",
			],
		},
	},
	"module.vpc:database_route_table_ids": {
		"depends_on":     [],
		"description":    "List of IDs of database route tables",
		"module_address": "module.vpc",
		"name":           "database_route_table_ids",
		"sensitive":      false,
		"value": {
			"references": [
				"aws_route_table.database",
				"aws_route_table.database",
				"aws_route_table.private",
			],
		},
	},
	"module.vpc:database_subnet_arns": {
		"depends_on":     [],
		"description":    "List of ARNs of database subnets",
		"module_address": "module.vpc",
		"name":           "database_subnet_arns",
		"sensitive":      false,
		"value": {
			"references": [
				"aws_subnet.database",
			],
		},
	},
	"module.vpc:database_subnet_group": {
		"depends_on":     [],
		"description":    "ID of database subnet group",
		"module_address": "module.vpc",
		"name":           "database_subnet_group",
		"sensitive":      false,
		"value": {
			"references": [
				"aws_db_subnet_group.database",
			],
		},
	},
	"module.vpc:database_subnet_group_name": {
		"depends_on":     [],
		"description":    "Name of database subnet group",
		"module_address": "module.vpc",
		"name":           "database_subnet_group_name",
		"sensitive":      false,
		"value": {
			"references": [
				"aws_db_subnet_group.database",
			],
		},
	},
	"module.vpc:database_subnets": {
		"depends_on":     [],
		"description":    "List of IDs of database subnets",
		"module_address": "module.vpc",
		"name":           "database_subnets",
		"sensitive":      false,
		"value": {
			"references": [
				"aws_subnet.database",
			],
		},
	},
	"module.vpc:database_subnets_cidr_blocks": {
		"depends_on":     [],
		"description":    "List of cidr_blocks of database subnets",
		"module_address": "module.vpc",
		"name":           "database_subnets_cidr_blocks",
		"sensitive":      false,
		"value": {
			"references": [
				"aws_subnet.database",
			],
		},
	},
	"module.vpc:database_subnets_ipv6_cidr_blocks": {
		"depends_on":     [],
		"description":    "List of IPv6 cidr_blocks of database subnets in an IPv6 enabled VPC",
		"module_address": "module.vpc",
		"name":           "database_subnets_ipv6_cidr_blocks",
		"sensitive":      false,
		"value": {
			"references": [
				"aws_subnet.database",
			],
		},
	},
	"module.vpc:default_network_acl_id": {
		"depends_on":     [],
		"description":    "The ID of the default network ACL",
		"module_address": "module.vpc",
		"name":           "default_network_acl_id",
		"sensitive":      false,
		"value": {
			"references": [
				"aws_vpc.this",
			],
		},
	},
	"module.vpc:default_route_table_id": {
		"depends_on":     [],
		"description":    "The ID of the default route table",
		"module_address": "module.vpc",
		"name":           "default_route_table_id",
		"sensitive":      false,
		"value": {
			"references": [
				"aws_vpc.this",
			],
		},
	},
	"module.vpc:default_security_group_id": {
		"depends_on":     [],
		"description":    "The ID of the security group created by default on VPC creation",
		"module_address": "module.vpc",
		"name":           "default_security_group_id",
		"sensitive":      false,
		"value": {
			"references": [
				"aws_vpc.this",
			],
		},
	},
	"module.vpc:default_vpc_arn": {
		"depends_on":     [],
		"description":    "The ARN of the Default VPC",
		"module_address": "module.vpc",
		"name":           "default_vpc_arn",
		"sensitive":      false,
		"value": {
			"references": [
				"aws_default_vpc.this",
			],
		},
	},
	"module.vpc:default_vpc_cidr_block": {
		"depends_on":     [],
		"description":    "The CIDR block of the Default VPC",
		"module_address": "module.vpc",
		"name":           "default_vpc_cidr_block",
		"sensitive":      false,
		"value": {
			"references": [
				"aws_default_vpc.this",
			],
		},
	},
	"module.vpc:default_vpc_default_network_acl_id": {
		"depends_on":     [],
		"description":    "The ID of the default network ACL of the Default VPC",
		"module_address": "module.vpc",
		"name":           "default_vpc_default_network_acl_id",
		"sensitive":      false,
		"value": {
			"references": [
				"aws_default_vpc.this",
			],
		},
	},
	"module.vpc:default_vpc_default_route_table_id": {
		"depends_on":     [],
		"description":    "The ID of the default route table of the Default VPC",
		"module_address": "module.vpc",
		"name":           "default_vpc_default_route_table_id",
		"sensitive":      false,
		"value": {
			"references": [
				"aws_default_vpc.this",
			],
		},
	},
	"module.vpc:default_vpc_default_security_group_id": {
		"depends_on":     [],
		"description":    "The ID of the security group created by default on Default VPC creation",
		"module_address": "module.vpc",
		"name":           "default_vpc_default_security_group_id",
		"sensitive":      false,
		"value": {
			"references": [
				"aws_default_vpc.this",
			],
		},
	},
	"module.vpc:default_vpc_enable_dns_hostnames": {
		"depends_on":     [],
		"description":    "Whether or not the Default VPC has DNS hostname support",
		"module_address": "module.vpc",
		"name":           "default_vpc_enable_dns_hostnames",
		"sensitive":      false,
		"value": {
			"references": [
				"aws_default_vpc.this",
			],
		},
	},
	"module.vpc:default_vpc_enable_dns_support": {
		"depends_on":     [],
		"description":    "Whether or not the Default VPC has DNS support",
		"module_address": "module.vpc",
		"name":           "default_vpc_enable_dns_support",
		"sensitive":      false,
		"value": {
			"references": [
				"aws_default_vpc.this",
			],
		},
	},
	"module.vpc:default_vpc_id": {
		"depends_on":     [],
		"description":    "The ID of the Default VPC",
		"module_address": "module.vpc",
		"name":           "default_vpc_id",
		"sensitive":      false,
		"value": {
			"references": [
				"aws_default_vpc.this",
			],
		},
	},
	"module.vpc:default_vpc_instance_tenancy": {
		"depends_on":     [],
		"description":    "Tenancy of instances spin up within Default VPC",
		"module_address": "module.vpc",
		"name":           "default_vpc_instance_tenancy",
		"sensitive":      false,
		"value": {
			"references": [
				"aws_default_vpc.this",
			],
		},
	},
	"module.vpc:default_vpc_main_route_table_id": {
		"depends_on":     [],
		"description":    "The ID of the main route table associated with the Default VPC",
		"module_address": "module.vpc",
		"name":           "default_vpc_main_route_table_id",
		"sensitive":      false,
		"value": {
			"references": [
				"aws_default_vpc.this",
			],
		},
	},
	"module.vpc:egress_only_internet_gateway_id": {
		"depends_on":     [],
		"description":    "The ID of the egress only Internet Gateway",
		"module_address": "module.vpc",
		"name":           "egress_only_internet_gateway_id",
		"sensitive":      false,
		"value": {
			"references": [
				"aws_egress_only_internet_gateway.this",
			],
		},
	},
	"module.vpc:elasticache_network_acl_arn": {
		"depends_on":     [],
		"description":    "ARN of the elasticache network ACL",
		"module_address": "module.vpc",
		"name":           "elasticache_network_acl_arn",
		"sensitive":      false,
		"value": {
			"references": [
				"aws_network_acl.elasticache",
			],
		},
	},
	"module.vpc:elasticache_network_acl_id": {
		"depends_on":     [],
		"description":    "ID of the elasticache network ACL",
		"module_address": "module.vpc",
		"name":           "elasticache_network_acl_id",
		"sensitive":      false,
		"value": {
			"references": [
				"aws_network_acl.elasticache",
			],
		},
	},
	"module.vpc:elasticache_route_table_association_ids": {
		"depends_on":     [],
		"description":    "List of IDs of the elasticache route table association",
		"module_address": "module.vpc",
		"name":           "elasticache_route_table_association_ids",
		"sensitive":      false,
		"value": {
			"references": [
				"aws_route_table_association.elasticache",
			],
		},
	},
	"module.vpc:elasticache_route_table_ids": {
		"depends_on":     [],
		"description":    "List of IDs of elasticache route tables",
		"module_address": "module.vpc",
		"name":           "elasticache_route_table_ids",
		"sensitive":      false,
		"value": {
			"references": [
				"aws_route_table.elasticache",
				"aws_route_table.elasticache",
				"aws_route_table.private",
			],
		},
	},
	"module.vpc:elasticache_subnet_arns": {
		"depends_on":     [],
		"description":    "List of ARNs of elasticache subnets",
		"module_address": "module.vpc",
		"name":           "elasticache_subnet_arns",
		"sensitive":      false,
		"value": {
			"references": [
				"aws_subnet.elasticache",
			],
		},
	},
	"module.vpc:elasticache_subnet_group": {
		"depends_on":     [],
		"description":    "ID of elasticache subnet group",
		"module_address": "module.vpc",
		"name":           "elasticache_subnet_group",
		"sensitive":      false,
		"value": {
			"references": [
				"aws_elasticache_subnet_group.elasticache",
			],
		},
	},
	"module.vpc:elasticache_subnet_group_name": {
		"depends_on":     [],
		"description":    "Name of elasticache subnet group",
		"module_address": "module.vpc",
		"name":           "elasticache_subnet_group_name",
		"sensitive":      false,
		"value": {
			"references": [
				"aws_elasticache_subnet_group.elasticache",
			],
		},
	},
	"module.vpc:elasticache_subnets": {
		"depends_on":     [],
		"description":    "List of IDs of elasticache subnets",
		"module_address": "module.vpc",
		"name":           "elasticache_subnets",
		"sensitive":      false,
		"value": {
			"references": [
				"aws_subnet.elasticache",
			],
		},
	},
	"module.vpc:elasticache_subnets_cidr_blocks": {
		"depends_on":     [],
		"description":    "List of cidr_blocks of elasticache subnets",
		"module_address": "module.vpc",
		"name":           "elasticache_subnets_cidr_blocks",
		"sensitive":      false,
		"value": {
			"references": [
				"aws_subnet.elasticache",
			],
		},
	},
	"module.vpc:elasticache_subnets_ipv6_cidr_blocks": {
		"depends_on":     [],
		"description":    "List of IPv6 cidr_blocks of elasticache subnets in an IPv6 enabled VPC",
		"module_address": "module.vpc",
		"name":           "elasticache_subnets_ipv6_cidr_blocks",
		"sensitive":      false,
		"value": {
			"references": [
				"aws_subnet.elasticache",
			],
		},
	},
	"module.vpc:igw_arn": {
		"depends_on":     [],
		"description":    "The ARN of the Internet Gateway",
		"module_address": "module.vpc",
		"name":           "igw_arn",
		"sensitive":      false,
		"value": {
			"references": [
				"aws_internet_gateway.this",
			],
		},
	},
	"module.vpc:igw_id": {
		"depends_on":     [],
		"description":    "The ID of the Internet Gateway",
		"module_address": "module.vpc",
		"name":           "igw_id",
		"sensitive":      false,
		"value": {
			"references": [
				"aws_internet_gateway.this",
			],
		},
	},
	"module.vpc:intra_network_acl_arn": {
		"depends_on":     [],
		"description":    "ARN of the intra network ACL",
		"module_address": "module.vpc",
		"name":           "intra_network_acl_arn",
		"sensitive":      false,
		"value": {
			"references": [
				"aws_network_acl.intra",
			],
		},
	},
	"module.vpc:intra_network_acl_id": {
		"depends_on":     [],
		"description":    "ID of the intra network ACL",
		"module_address": "module.vpc",
		"name":           "intra_network_acl_id",
		"sensitive":      false,
		"value": {
			"references": [
				"aws_network_acl.intra",
			],
		},
	},
	"module.vpc:intra_route_table_association_ids": {
		"depends_on":     [],
		"description":    "List of IDs of the intra route table association",
		"module_address": "module.vpc",
		"name":           "intra_route_table_association_ids",
		"sensitive":      false,
		"value": {
			"references": [
				"aws_route_table_association.intra",
			],
		},
	},
	"module.vpc:intra_route_table_ids": {
		"depends_on":     [],
		"description":    "List of IDs of intra route tables",
		"module_address": "module.vpc",
		"name":           "intra_route_table_ids",
		"sensitive":      false,
		"value": {
			"references": [
				"aws_route_table.intra",
			],
		},
	},
	"module.vpc:intra_subnet_arns": {
		"depends_on":     [],
		"description":    "List of ARNs of intra subnets",
		"module_address": "module.vpc",
		"name":           "intra_subnet_arns",
		"sensitive":      false,
		"value": {
			"references": [
				"aws_subnet.intra",
			],
		},
	},
	"module.vpc:intra_subnets": {
		"depends_on":     [],
		"description":    "List of IDs of intra subnets",
		"module_address": "module.vpc",
		"name":           "intra_subnets",
		"sensitive":      false,
		"value": {
			"references": [
				"aws_subnet.intra",
			],
		},
	},
	"module.vpc:intra_subnets_cidr_blocks": {
		"depends_on":     [],
		"description":    "List of cidr_blocks of intra subnets",
		"module_address": "module.vpc",
		"name":           "intra_subnets_cidr_blocks",
		"sensitive":      false,
		"value": {
			"references": [
				"aws_subnet.intra",
			],
		},
	},
	"module.vpc:intra_subnets_ipv6_cidr_blocks": {
		"depends_on":     [],
		"description":    "List of IPv6 cidr_blocks of intra subnets in an IPv6 enabled VPC",
		"module_address": "module.vpc",
		"name":           "intra_subnets_ipv6_cidr_blocks",
		"sensitive":      false,
		"value": {
			"references": [
				"aws_subnet.intra",
			],
		},
	},
	"module.vpc:name": {
		"depends_on":     [],
		"description":    "The name of the VPC specified as argument to this module",
		"module_address": "module.vpc",
		"name":           "name",
		"sensitive":      false,
		"value": {
			"references": [
				"var.name",
			],
		},
	},
	"module.vpc:nat_ids": {
		"depends_on":     [],
		"description":    "List of allocation ID of Elastic IPs created for AWS NAT Gateway",
		"module_address": "module.vpc",
		"name":           "nat_ids",
		"sensitive":      false,
		"value": {
			"references": [
				"aws_eip.nat",
			],
		},
	},
	"module.vpc:nat_public_ips": {
		"depends_on":     [],
		"description":    "List of public Elastic IPs created for AWS NAT Gateway",
		"module_address": "module.vpc",
		"name":           "nat_public_ips",
		"sensitive":      false,
		"value": {
			"references": [
				"var.reuse_nat_ips",
				"var.external_nat_ips",
				"aws_eip.nat",
			],
		},
	},
	"module.vpc:natgw_ids": {
		"depends_on":     [],
		"description":    "List of NAT Gateway IDs",
		"module_address": "module.vpc",
		"name":           "natgw_ids",
		"sensitive":      false,
		"value": {
			"references": [
				"aws_nat_gateway.this",
			],
		},
	},
	"module.vpc:outpost_network_acl_arn": {
		"depends_on":     [],
		"description":    "ARN of the outpost network ACL",
		"module_address": "module.vpc",
		"name":           "outpost_network_acl_arn",
		"sensitive":      false,
		"value": {
			"references": [
				"aws_network_acl.outpost",
			],
		},
	},
	"module.vpc:outpost_network_acl_id": {
		"depends_on":     [],
		"description":    "ID of the outpost network ACL",
		"module_address": "module.vpc",
		"name":           "outpost_network_acl_id",
		"sensitive":      false,
		"value": {
			"references": [
				"aws_network_acl.outpost",
			],
		},
	},
	"module.vpc:outpost_subnet_arns": {
		"depends_on":     [],
		"description":    "List of ARNs of outpost subnets",
		"module_address": "module.vpc",
		"name":           "outpost_subnet_arns",
		"sensitive":      false,
		"value": {
			"references": [
				"aws_subnet.outpost",
			],
		},
	},
	"module.vpc:outpost_subnets": {
		"depends_on":     [],
		"description":    "List of IDs of outpost subnets",
		"module_address": "module.vpc",
		"name":           "outpost_subnets",
		"sensitive":      false,
		"value": {
			"references": [
				"aws_subnet.outpost",
			],
		},
	},
	"module.vpc:outpost_subnets_cidr_blocks": {
		"depends_on":     [],
		"description":    "List of cidr_blocks of outpost subnets",
		"module_address": "module.vpc",
		"name":           "outpost_subnets_cidr_blocks",
		"sensitive":      false,
		"value": {
			"references": [
				"aws_subnet.outpost",
			],
		},
	},
	"module.vpc:outpost_subnets_ipv6_cidr_blocks": {
		"depends_on":     [],
		"description":    "List of IPv6 cidr_blocks of outpost subnets in an IPv6 enabled VPC",
		"module_address": "module.vpc",
		"name":           "outpost_subnets_ipv6_cidr_blocks",
		"sensitive":      false,
		"value": {
			"references": [
				"aws_subnet.outpost",
			],
		},
	},
	"module.vpc:private_ipv6_egress_route_ids": {
		"depends_on":     [],
		"description":    "List of IDs of the ipv6 egress route.",
		"module_address": "module.vpc",
		"name":           "private_ipv6_egress_route_ids",
		"sensitive":      false,
		"value": {
			"references": [
				"aws_route.private_ipv6_egress",
			],
		},
	},
	"module.vpc:private_nat_gateway_route_ids": {
		"depends_on":     [],
		"description":    "List of IDs of the private nat gateway route.",
		"module_address": "module.vpc",
		"name":           "private_nat_gateway_route_ids",
		"sensitive":      false,
		"value": {
			"references": [
				"aws_route.private_nat_gateway",
			],
		},
	},
	"module.vpc:private_network_acl_arn": {
		"depends_on":     [],
		"description":    "ARN of the private network ACL",
		"module_address": "module.vpc",
		"name":           "private_network_acl_arn",
		"sensitive":      false,
		"value": {
			"references": [
				"aws_network_acl.private",
			],
		},
	},
	"module.vpc:private_network_acl_id": {
		"depends_on":     [],
		"description":    "ID of the private network ACL",
		"module_address": "module.vpc",
		"name":           "private_network_acl_id",
		"sensitive":      false,
		"value": {
			"references": [
				"aws_network_acl.private",
			],
		},
	},
	"module.vpc:private_route_table_association_ids": {
		"depends_on":     [],
		"description":    "List of IDs of the private route table association",
		"module_address": "module.vpc",
		"name":           "private_route_table_association_ids",
		"sensitive":      false,
		"value": {
			"references": [
				"aws_route_table_association.private",
			],
		},
	},
	"module.vpc:private_route_table_ids": {
		"depends_on":     [],
		"description":    "List of IDs of private route tables",
		"module_address": "module.vpc",
		"name":           "private_route_table_ids",
		"sensitive":      false,
		"value": {
			"references": [
				"aws_route_table.private",
			],
		},
	},
	"module.vpc:private_subnet_arns": {
		"depends_on":     [],
		"description":    "List of ARNs of private subnets",
		"module_address": "module.vpc",
		"name":           "private_subnet_arns",
		"sensitive":      false,
		"value": {
			"references": [
				"aws_subnet.private",
			],
		},
	},
	"module.vpc:private_subnets": {
		"depends_on":     [],
		"description":    "List of IDs of private subnets",
		"module_address": "module.vpc",
		"name":           "private_subnets",
		"sensitive":      false,
		"value": {
			"references": [
				"aws_subnet.private",
			],
		},
	},
	"module.vpc:private_subnets_cidr_blocks": {
		"depends_on":     [],
		"description":    "List of cidr_blocks of private subnets",
		"module_address": "module.vpc",
		"name":           "private_subnets_cidr_blocks",
		"sensitive":      false,
		"value": {
			"references": [
				"aws_subnet.private",
			],
		},
	},
	"module.vpc:private_subnets_ipv6_cidr_blocks": {
		"depends_on":     [],
		"description":    "List of IPv6 cidr_blocks of private subnets in an IPv6 enabled VPC",
		"module_address": "module.vpc",
		"name":           "private_subnets_ipv6_cidr_blocks",
		"sensitive":      false,
		"value": {
			"references": [
				"aws_subnet.private",
			],
		},
	},
	"module.vpc:public_internet_gateway_ipv6_route_id": {
		"depends_on":     [],
		"description":    "ID of the IPv6 internet gateway route.",
		"module_address": "module.vpc",
		"name":           "public_internet_gateway_ipv6_route_id",
		"sensitive":      false,
		"value": {
			"references": [
				"aws_route.public_internet_gateway_ipv6",
			],
		},
	},
	"module.vpc:public_internet_gateway_route_id": {
		"depends_on":     [],
		"description":    "ID of the internet gateway route.",
		"module_address": "module.vpc",
		"name":           "public_internet_gateway_route_id",
		"sensitive":      false,
		"value": {
			"references": [
				"aws_route.public_internet_gateway",
			],
		},
	},
	"module.vpc:public_network_acl_arn": {
		"depends_on":     [],
		"description":    "ARN of the public network ACL",
		"module_address": "module.vpc",
		"name":           "public_network_acl_arn",
		"sensitive":      false,
		"value": {
			"references": [
				"aws_network_acl.public",
			],
		},
	},
	"module.vpc:public_network_acl_id": {
		"depends_on":     [],
		"description":    "ID of the public network ACL",
		"module_address": "module.vpc",
		"name":           "public_network_acl_id",
		"sensitive":      false,
		"value": {
			"references": [
				"aws_network_acl.public",
			],
		},
	},
	"module.vpc:public_route_table_association_ids": {
		"depends_on":     [],
		"description":    "List of IDs of the public route table association",
		"module_address": "module.vpc",
		"name":           "public_route_table_association_ids",
		"sensitive":      false,
		"value": {
			"references": [
				"aws_route_table_association.public",
			],
		},
	},
	"module.vpc:public_route_table_ids": {
		"depends_on":     [],
		"description":    "List of IDs of public route tables",
		"module_address": "module.vpc",
		"name":           "public_route_table_ids",
		"sensitive":      false,
		"value": {
			"references": [
				"aws_route_table.public",
			],
		},
	},
	"module.vpc:public_subnet_arns": {
		"depends_on":     [],
		"description":    "List of ARNs of public subnets",
		"module_address": "module.vpc",
		"name":           "public_subnet_arns",
		"sensitive":      false,
		"value": {
			"references": [
				"aws_subnet.public",
			],
		},
	},
	"module.vpc:public_subnets": {
		"depends_on":     [],
		"description":    "List of IDs of public subnets",
		"module_address": "module.vpc",
		"name":           "public_subnets",
		"sensitive":      false,
		"value": {
			"references": [
				"aws_subnet.public",
			],
		},
	},
	"module.vpc:public_subnets_cidr_blocks": {
		"depends_on":     [],
		"description":    "List of cidr_blocks of public subnets",
		"module_address": "module.vpc",
		"name":           "public_subnets_cidr_blocks",
		"sensitive":      false,
		"value": {
			"references": [
				"aws_subnet.public",
			],
		},
	},
	"module.vpc:public_subnets_ipv6_cidr_blocks": {
		"depends_on":     [],
		"description":    "List of IPv6 cidr_blocks of public subnets in an IPv6 enabled VPC",
		"module_address": "module.vpc",
		"name":           "public_subnets_ipv6_cidr_blocks",
		"sensitive":      false,
		"value": {
			"references": [
				"aws_subnet.public",
			],
		},
	},
	"module.vpc:redshift_network_acl_arn": {
		"depends_on":     [],
		"description":    "ARN of the redshift network ACL",
		"module_address": "module.vpc",
		"name":           "redshift_network_acl_arn",
		"sensitive":      false,
		"value": {
			"references": [
				"aws_network_acl.redshift",
			],
		},
	},
	"module.vpc:redshift_network_acl_id": {
		"depends_on":     [],
		"description":    "ID of the redshift network ACL",
		"module_address": "module.vpc",
		"name":           "redshift_network_acl_id",
		"sensitive":      false,
		"value": {
			"references": [
				"aws_network_acl.redshift",
			],
		},
	},
	"module.vpc:redshift_public_route_table_association_ids": {
		"depends_on":     [],
		"description":    "List of IDs of the public redshidt route table association",
		"module_address": "module.vpc",
		"name":           "redshift_public_route_table_association_ids",
		"sensitive":      false,
		"value": {
			"references": [
				"aws_route_table_association.redshift_public",
			],
		},
	},
	"module.vpc:redshift_route_table_association_ids": {
		"depends_on":     [],
		"description":    "List of IDs of the redshift route table association",
		"module_address": "module.vpc",
		"name":           "redshift_route_table_association_ids",
		"sensitive":      false,
		"value": {
			"references": [
				"aws_route_table_association.redshift",
			],
		},
	},
	"module.vpc:redshift_route_table_ids": {
		"depends_on":     [],
		"description":    "List of IDs of redshift route tables",
		"module_address": "module.vpc",
		"name":           "redshift_route_table_ids",
		"sensitive":      false,
		"value": {
			"references": [
				"aws_route_table.redshift",
				"aws_route_table.redshift",
				"aws_route_table.private",
			],
		},
	},
	"module.vpc:redshift_subnet_arns": {
		"depends_on":     [],
		"description":    "List of ARNs of redshift subnets",
		"module_address": "module.vpc",
		"name":           "redshift_subnet_arns",
		"sensitive":      false,
		"value": {
			"references": [
				"aws_subnet.redshift",
			],
		},
	},
	"module.vpc:redshift_subnet_group": {
		"depends_on":     [],
		"description":    "ID of redshift subnet group",
		"module_address": "module.vpc",
		"name":           "redshift_subnet_group",
		"sensitive":      false,
		"value": {
			"references": [
				"aws_redshift_subnet_group.redshift",
			],
		},
	},
	"module.vpc:redshift_subnets": {
		"depends_on":     [],
		"description":    "List of IDs of redshift subnets",
		"module_address": "module.vpc",
		"name":           "redshift_subnets",
		"sensitive":      false,
		"value": {
			"references": [
				"aws_subnet.redshift",
			],
		},
	},
	"module.vpc:redshift_subnets_cidr_blocks": {
		"depends_on":     [],
		"description":    "List of cidr_blocks of redshift subnets",
		"module_address": "module.vpc",
		"name":           "redshift_subnets_cidr_blocks",
		"sensitive":      false,
		"value": {
			"references": [
				"aws_subnet.redshift",
			],
		},
	},
	"module.vpc:redshift_subnets_ipv6_cidr_blocks": {
		"depends_on":     [],
		"description":    "List of IPv6 cidr_blocks of redshift subnets in an IPv6 enabled VPC",
		"module_address": "module.vpc",
		"name":           "redshift_subnets_ipv6_cidr_blocks",
		"sensitive":      false,
		"value": {
			"references": [
				"aws_subnet.redshift",
			],
		},
	},
	"module.vpc:this_customer_gateway": {
		"depends_on":     [],
		"description":    "Map of Customer Gateway attributes",
		"module_address": "module.vpc",
		"name":           "this_customer_gateway",
		"sensitive":      false,
		"value": {
			"references": [
				"aws_customer_gateway.this",
			],
		},
	},
	"module.vpc:vgw_arn": {
		"depends_on":     [],
		"description":    "The ARN of the VPN Gateway",
		"module_address": "module.vpc",
		"name":           "vgw_arn",
		"sensitive":      false,
		"value": {
			"references": [
				"aws_vpn_gateway.this",
			],
		},
	},
	"module.vpc:vgw_id": {
		"depends_on":     [],
		"description":    "The ID of the VPN Gateway",
		"module_address": "module.vpc",
		"name":           "vgw_id",
		"sensitive":      false,
		"value": {
			"references": [
				"aws_vpn_gateway.this",
				"aws_vpn_gateway_attachment.this",
			],
		},
	},
	"module.vpc:vpc_arn": {
		"depends_on":     [],
		"description":    "The ARN of the VPC",
		"module_address": "module.vpc",
		"name":           "vpc_arn",
		"sensitive":      false,
		"value": {
			"references": [
				"aws_vpc.this",
			],
		},
	},
	"module.vpc:vpc_cidr_block": {
		"depends_on":     [],
		"description":    "The CIDR block of the VPC",
		"module_address": "module.vpc",
		"name":           "vpc_cidr_block",
		"sensitive":      false,
		"value": {
			"references": [
				"aws_vpc.this",
			],
		},
	},
	"module.vpc:vpc_enable_dns_hostnames": {
		"depends_on":     [],
		"description":    "Whether or not the VPC has DNS hostname support",
		"module_address": "module.vpc",
		"name":           "vpc_enable_dns_hostnames",
		"sensitive":      false,
		"value": {
			"references": [
				"aws_vpc.this",
			],
		},
	},
	"module.vpc:vpc_enable_dns_support": {
		"depends_on":     [],
		"description":    "Whether or not the VPC has DNS support",
		"module_address": "module.vpc",
		"name":           "vpc_enable_dns_support",
		"sensitive":      false,
		"value": {
			"references": [
				"aws_vpc.this",
			],
		},
	},
	"module.vpc:vpc_flow_log_cloudwatch_iam_role_arn": {
		"depends_on":     [],
		"description":    "The ARN of the IAM role used when pushing logs to Cloudwatch log group",
		"module_address": "module.vpc",
		"name":           "vpc_flow_log_cloudwatch_iam_role_arn",
		"sensitive":      false,
		"value": {
			"references": [
				"local.flow_log_iam_role_arn",
			],
		},
	},
	"module.vpc:vpc_flow_log_destination_arn": {
		"depends_on":     [],
		"description":    "The ARN of the destination for VPC Flow Logs",
		"module_address": "module.vpc",
		"name":           "vpc_flow_log_destination_arn",
		"sensitive":      false,
		"value": {
			"references": [
				"local.flow_log_destination_arn",
			],
		},
	},
	"module.vpc:vpc_flow_log_destination_type": {
		"depends_on":     [],
		"description":    "The type of the destination for VPC Flow Logs",
		"module_address": "module.vpc",
		"name":           "vpc_flow_log_destination_type",
		"sensitive":      false,
		"value": {
			"references": [
				"var.flow_log_destination_type",
			],
		},
	},
	"module.vpc:vpc_flow_log_id": {
		"depends_on":     [],
		"description":    "The ID of the Flow Log resource",
		"module_address": "module.vpc",
		"name":           "vpc_flow_log_id",
		"sensitive":      false,
		"value": {
			"references": [
				"aws_flow_log.this",
			],
		},
	},
	"module.vpc:vpc_id": {
		"depends_on":     [],
		"description":    "The ID of the VPC",
		"module_address": "module.vpc",
		"name":           "vpc_id",
		"sensitive":      false,
		"value": {
			"references": [
				"aws_vpc.this",
			],
		},
	},
	"module.vpc:vpc_instance_tenancy": {
		"depends_on":     [],
		"description":    "Tenancy of instances spin up within VPC",
		"module_address": "module.vpc",
		"name":           "vpc_instance_tenancy",
		"sensitive":      false,
		"value": {
			"references": [
				"aws_vpc.this",
			],
		},
	},
	"module.vpc:vpc_ipv6_association_id": {
		"depends_on":     [],
		"description":    "The association ID for the IPv6 CIDR block",
		"module_address": "module.vpc",
		"name":           "vpc_ipv6_association_id",
		"sensitive":      false,
		"value": {
			"references": [
				"aws_vpc.this",
			],
		},
	},
	"module.vpc:vpc_ipv6_cidr_block": {
		"depends_on":     [],
		"description":    "The IPv6 CIDR block",
		"module_address": "module.vpc",
		"name":           "vpc_ipv6_cidr_block",
		"sensitive":      false,
		"value": {
			"references": [
				"aws_vpc.this",
			],
		},
	},
	"module.vpc:vpc_main_route_table_id": {
		"depends_on":     [],
		"description":    "The ID of the main route table associated with this VPC",
		"module_address": "module.vpc",
		"name":           "vpc_main_route_table_id",
		"sensitive":      false,
		"value": {
			"references": [
				"aws_vpc.this",
			],
		},
	},
	"module.vpc:vpc_owner_id": {
		"depends_on":     [],
		"description":    "The ID of the AWS account that owns the VPC",
		"module_address": "module.vpc",
		"name":           "vpc_owner_id",
		"sensitive":      false,
		"value": {
			"references": [
				"aws_vpc.this",
			],
		},
	},
	"module.vpc:vpc_secondary_cidr_blocks": {
		"depends_on":     [],
		"description":    "List of secondary CIDR blocks of the VPC",
		"module_address": "module.vpc",
		"name":           "vpc_secondary_cidr_blocks",
		"sensitive":      false,
		"value": {
			"references": [
				"aws_vpc_ipv4_cidr_block_association.this",
			],
		},
	},
	"region": {
		"depends_on":     [],
		"description":    "AWS region",
		"module_address": "",
		"name":           "region",
		"sensitive":      false,
		"value": {
			"references": [
				"var.region",
			],
		},
	},
}

module_calls = {
	"eks": {
		"config": {
			"cluster_name": {
				"references": [
					"local.cluster_name",
				],
			},
			"cluster_version": {
				"constant_value": "1.20",
			},
			"subnets": {
				"references": [
					"module.vpc.private_subnets",
					"module.vpc",
				],
			},
			"vpc_id": {
				"references": [
					"module.vpc.vpc_id",
					"module.vpc",
				],
			},
			"worker_groups": {
				"references": [
					"aws_security_group.worker_group_mgmt_one.id",
					"aws_security_group.worker_group_mgmt_one",
					"aws_security_group.worker_group_mgmt_two.id",
					"aws_security_group.worker_group_mgmt_two",
				],
			},
			"workers_group_defaults": {
				"constant_value": {
					"root_volume_type": "gp2",
				},
			},
		},
		"count":              {},
		"depends_on":         [],
		"for_each":           {},
		"module_address":     "",
		"name":               "eks",
		"source":             "terraform-aws-modules/eks/aws",
		"version_constraint": "17.24.0",
	},
	"module.eks:fargate": {
		"config": {
			"cluster_name": {
				"references": [
					"local.cluster_name",
				],
			},
			"create_eks": {
				"references": [
					"var.create_eks",
				],
			},
			"create_fargate_pod_execution_role": {
				"references": [
					"var.create_fargate_pod_execution_role",
				],
			},
			"fargate_pod_execution_role_name": {
				"references": [
					"var.fargate_pod_execution_role_name",
				],
			},
			"fargate_profiles": {
				"references": [
					"var.fargate_profiles",
				],
			},
			"iam_path": {
				"references": [
					"var.iam_path",
				],
			},
			"permissions_boundary": {
				"references": [
					"var.permissions_boundary",
				],
			},
			"subnets": {
				"references": [
					"var.fargate_subnets",
					"var.subnets",
				],
			},
			"tags": {
				"references": [
					"var.tags",
				],
			},
		},
		"count":              {},
		"depends_on":         [],
		"for_each":           {},
		"module_address":     "module.eks",
		"name":               "fargate",
		"source":             "./modules/fargate",
		"version_constraint": "",
	},
	"module.eks:node_groups": {
		"config": {
			"cluster_auth_base64": {
				"references": [
					"local.cluster_auth_base64",
				],
			},
			"cluster_endpoint": {
				"references": [
					"local.cluster_endpoint",
				],
			},
			"cluster_name": {
				"references": [
					"local.cluster_name",
				],
			},
			"create_eks": {
				"references": [
					"var.create_eks",
				],
			},
			"default_iam_role_arn": {
				"references": [
					"aws_iam_role.workers",
				],
			},
			"ebs_optimized_not_supported": {
				"references": [
					"local.ebs_optimized_not_supported",
				],
			},
			"node_groups": {
				"references": [
					"var.node_groups",
				],
			},
			"node_groups_defaults": {
				"references": [
					"var.node_groups_defaults",
				],
			},
			"tags": {
				"references": [
					"var.tags",
				],
			},
			"worker_additional_security_group_ids": {
				"references": [
					"var.worker_additional_security_group_ids",
				],
			},
			"worker_security_group_id": {
				"references": [
					"local.worker_security_group_id",
				],
			},
			"workers_group_defaults": {
				"references": [
					"local.workers_group_defaults",
				],
			},
		},
		"count": {},
		"depends_on": [
			"aws_eks_cluster.this",
			"aws_iam_role_policy_attachment.workers_AmazonEKSWorkerNodePolicy",
			"aws_iam_role_policy_attachment.workers_AmazonEKS_CNI_Policy",
			"aws_iam_role_policy_attachment.workers_AmazonEC2ContainerRegistryReadOnly",
		],
		"for_each":           {},
		"module_address":     "module.eks",
		"name":               "node_groups",
		"source":             "./modules/node_groups",
		"version_constraint": "",
	},
	"vpc": {
		"config": {
			"azs": {
				"references": [
					"data.aws_availability_zones.available.names",
					"data.aws_availability_zones.available",
				],
			},
			"cidr": {
				"constant_value": "10.0.0.0/16",
			},
			"enable_dns_hostnames": {
				"constant_value": true,
			},
			"enable_nat_gateway": {
				"constant_value": true,
			},
			"name": {
				"constant_value": "education-vpc",
			},
			"private_subnet_tags": {
				"references": [
					"local.cluster_name",
				],
			},
			"private_subnets": {
				"constant_value": [
					"10.0.1.0/24",
					"10.0.2.0/24",
					"10.0.3.0/24",
				],
			},
			"public_subnet_tags": {
				"references": [
					"local.cluster_name",
				],
			},
			"public_subnets": {
				"constant_value": [
					"10.0.4.0/24",
					"10.0.5.0/24",
					"10.0.6.0/24",
				],
			},
			"single_nat_gateway": {
				"constant_value": true,
			},
			"tags": {
				"references": [
					"local.cluster_name",
				],
			},
		},
		"count":              {},
		"depends_on":         [],
		"for_each":           {},
		"module_address":     "",
		"name":               "vpc",
		"source":             "terraform-aws-modules/vpc/aws",
		"version_constraint": "3.2.0",
	},
}

strip_index = func(addr) {
	s = strings.split(addr, ".")
	for s as i, v {
		s[i] = strings.split(v, "[")[0]
	}

	return strings.join(s, ".")
}
